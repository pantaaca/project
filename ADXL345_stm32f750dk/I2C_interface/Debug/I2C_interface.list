
I2C_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008478  08008478  00018478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080088a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000208  08008aac  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008aac  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe5  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b2  00000000  00000000  0003221d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028059  00000000  00000000  00036918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013968  00000000  00000000  0005e971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5bea  00000000  00000000  000722d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167ec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  00167f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008460 	.word	0x08008460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08008460 	.word	0x08008460

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <UART_TransmitString>:
void adxl_read(uint8_t reg, uint8_t numberofbytes);
void adxl_init(void);
uint8_t data_rec[6];

void UART_TransmitString(const char* str)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff f93b 	bl	8000210 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <UART_TransmitString+0x28>)
 8000fa6:	f003 fefd 	bl	8004da4 <HAL_UART_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000270 	.word	0x20000270

08000fb8 <UART_TransmitFloat>:
  sprintf(buffer, "%d\r\n", value);
  UART_TransmitString(buffer);
} // ne korisit se

void UART_TransmitFloat(float value)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a01 	vstr	s0, [r7, #4]
	  char buffer[16];
	  sprintf(buffer, "%f\r\n", value);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fae0 	bl	8000588 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	f107 0008 	add.w	r0, r7, #8
 8000fd0:	4905      	ldr	r1, [pc, #20]	; (8000fe8 <UART_TransmitFloat+0x30>)
 8000fd2:	f004 ffcd 	bl	8005f70 <siprintf>
	  UART_TransmitString(buffer);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffd6 	bl	8000f8c <UART_TransmitString>
} //Mora da se u project/properties/c build/settings/mcu settings i tu da se stiklira podrska za float!!!
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08008480 	.word	0x08008480

08000fec <adxl_write>:

//funkcija za upis u registre
void adxl_write(uint8_t reg, uint8_t value) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 10);
 8001004:	f107 020c 	add.w	r2, r7, #12
 8001008:	230a      	movs	r3, #10
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	21a6      	movs	r1, #166	; 0xa6
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <adxl_write+0x34>)
 8001012:	f001 fcfd 	bl	8002a10 <HAL_I2C_Master_Transmit>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000224 	.word	0x20000224

08001024 <adxl_read>:

//funkcija za citanje vrednosti
void adxl_read(uint8_t reg, uint8_t numberofbytes) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, data_rec, numberofbytes, 100);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	b29a      	uxth	r2, r3
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	b29b      	uxth	r3, r3
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	9102      	str	r1, [sp, #8]
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <adxl_read+0x34>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	21a6      	movs	r1, #166	; 0xa6
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <adxl_read+0x38>)
 800104c:	f001 fdd4 	bl	8002bf8 <HAL_I2C_Mem_Read>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000320 	.word	0x20000320
 800105c:	20000224 	.word	0x20000224

08001060 <adxl_init>:

//Inicijalizacija vrednosti
void adxl_init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	adxl_read(0x00, 1);
 8001064:	2101      	movs	r1, #1
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ffdc 	bl	8001024 <adxl_read>

	adxl_write(0x2d, 0); //resetovanje registra
 800106c:	2100      	movs	r1, #0
 800106e:	202d      	movs	r0, #45	; 0x2d
 8001070:	f7ff ffbc 	bl	8000fec <adxl_write>
	adxl_write(0x2d, 0x08); //meri 1b, wakeup 0, 0 na 8hz
 8001074:	2108      	movs	r1, #8
 8001076:	202d      	movs	r0, #45	; 0x2d
 8001078:	f7ff ffb8 	bl	8000fec <adxl_write>
	adxl_write(0x31, 0x01); //+- 4g
 800107c:	2101      	movs	r1, #1
 800107e:	2031      	movs	r0, #49	; 0x31
 8001080:	f7ff ffb4 	bl	8000fec <adxl_write>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <main>:

int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 800108e:	2300      	movs	r3, #0
 8001090:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f001 f934 	bl	80022fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f955 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f000 fa33 	bl	8001504 <MX_GPIO_Init>
  MX_I2C1_Init();
 800109e:	f000 f9c1 	bl	8001424 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010a2:	f000 f9ff 	bl	80014a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010aa:	f001 f955 	bl	8002358 <HAL_Delay>

     /*-[ I2C Bus Scanning ]-*/
     HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 80010ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80010b2:	221a      	movs	r2, #26
 80010b4:	4990      	ldr	r1, [pc, #576]	; (80012f8 <main+0x270>)
 80010b6:	4891      	ldr	r0, [pc, #580]	; (80012fc <main+0x274>)
 80010b8:	f003 fe74 	bl	8004da4 <HAL_UART_Transmit>
     for(i=1; i<128; i++)
 80010bc:	2301      	movs	r3, #1
 80010be:	75fb      	strb	r3, [r7, #23]
 80010c0:	e028      	b.n	8001114 <main+0x8c>
     {
     	ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	b299      	uxth	r1, r3
 80010ca:	2305      	movs	r3, #5
 80010cc:	2203      	movs	r2, #3
 80010ce:	488c      	ldr	r0, [pc, #560]	; (8001300 <main+0x278>)
 80010d0:	f001 feac 	bl	8002e2c <HAL_I2C_IsDeviceReady>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
     	if (ret != HAL_OK) /* No ACK Received At That Address */
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <main+0x66>
     	{
     		HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80010de:	f242 7310 	movw	r3, #10000	; 0x2710
 80010e2:	2204      	movs	r2, #4
 80010e4:	4987      	ldr	r1, [pc, #540]	; (8001304 <main+0x27c>)
 80010e6:	4885      	ldr	r0, [pc, #532]	; (80012fc <main+0x274>)
 80010e8:	f003 fe5c 	bl	8004da4 <HAL_UART_Transmit>
 80010ec:	e00f      	b.n	800110e <main+0x86>
         }
     	else if(ret == HAL_OK)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10c      	bne.n	800110e <main+0x86>
     	{
     		sprintf(Buffer, "0x%X", i);
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4983      	ldr	r1, [pc, #524]	; (8001308 <main+0x280>)
 80010fa:	4884      	ldr	r0, [pc, #528]	; (800130c <main+0x284>)
 80010fc:	f004 ff38 	bl	8005f70 <siprintf>
     		HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 8001100:	f242 7310 	movw	r3, #10000	; 0x2710
 8001104:	2219      	movs	r2, #25
 8001106:	4981      	ldr	r1, [pc, #516]	; (800130c <main+0x284>)
 8001108:	487c      	ldr	r0, [pc, #496]	; (80012fc <main+0x274>)
 800110a:	f003 fe4b 	bl	8004da4 <HAL_UART_Transmit>
     for(i=1; i<128; i++)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	3301      	adds	r3, #1
 8001112:	75fb      	strb	r3, [r7, #23]
 8001114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dad2      	bge.n	80010c2 <main+0x3a>
     	}
     }
     HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 800111c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001120:	220b      	movs	r2, #11
 8001122:	497b      	ldr	r1, [pc, #492]	; (8001310 <main+0x288>)
 8001124:	4875      	ldr	r0, [pc, #468]	; (80012fc <main+0x274>)
 8001126:	f003 fe3d 	bl	8004da4 <HAL_UART_Transmit>

     adxl_init();
 800112a:	f7ff ff99 	bl	8001060 <adxl_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adxl_read(0x32, 6);
 800112e:	2106      	movs	r1, #6
 8001130:	2032      	movs	r0, #50	; 0x32
 8001132:	f7ff ff77 	bl	8001024 <adxl_read>
	      	x = (data_rec[1]<<8 | data_rec[0]);
 8001136:	4b77      	ldr	r3, [pc, #476]	; (8001314 <main+0x28c>)
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b75      	ldr	r3, [pc, #468]	; (8001314 <main+0x28c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b73      	ldr	r3, [pc, #460]	; (8001318 <main+0x290>)
 800114c:	801a      	strh	r2, [r3, #0]
	      	y = (data_rec[3]<<8 | data_rec[2]);
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <main+0x28c>)
 8001150:	78db      	ldrb	r3, [r3, #3]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <main+0x28c>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21b      	sxth	r3, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b6e      	ldr	r3, [pc, #440]	; (800131c <main+0x294>)
 8001164:	801a      	strh	r2, [r3, #0]
	      	z = (data_rec[5]<<8 | data_rec[4]);
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <main+0x28c>)
 8001168:	795b      	ldrb	r3, [r3, #5]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <main+0x28c>)
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <main+0x298>)
 800117c:	801a      	strh	r2, [r3, #0]

	      	if(x > 32767) {
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <main+0x290>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b21b      	sxth	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	da17      	bge.n	80011b8 <main+0x130>
	      		int xn = x - 65535;
 8001188:	4b63      	ldr	r3, [pc, #396]	; (8001318 <main+0x290>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <main+0x29c>)
 8001190:	4413      	add	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
	      		xg = xn * .0078;
 8001194:	6938      	ldr	r0, [r7, #16]
 8001196:	f7ff f9e5 	bl	8000564 <__aeabi_i2d>
 800119a:	a355      	add	r3, pc, #340	; (adr r3, 80012f0 <main+0x268>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fd1c 	bl	8000be8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a5d      	ldr	r2, [pc, #372]	; (8001328 <main+0x2a0>)
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e012      	b.n	80011de <main+0x156>
	      	}
	      	else {
	      		xg = x * .0078;
 80011b8:	4b57      	ldr	r3, [pc, #348]	; (8001318 <main+0x290>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9d1 	bl	8000564 <__aeabi_i2d>
 80011c2:	a34b      	add	r3, pc, #300	; (adr r3, 80012f0 <main+0x268>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa36 	bl	8000638 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fd08 	bl	8000be8 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a53      	ldr	r2, [pc, #332]	; (8001328 <main+0x2a0>)
 80011dc:	6013      	str	r3, [r2, #0]
	      	}
	      	if(y > 32767) {
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <main+0x294>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da17      	bge.n	8001218 <main+0x190>
	      		int yn = y - 65535;
 80011e8:	4b4c      	ldr	r3, [pc, #304]	; (800131c <main+0x294>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <main+0x29c>)
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
	      		yg = yn * .0078;
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff f9b5 	bl	8000564 <__aeabi_i2d>
 80011fa:	a33d      	add	r3, pc, #244	; (adr r3, 80012f0 <main+0x268>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff fa1a 	bl	8000638 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcec 	bl	8000be8 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a46      	ldr	r2, [pc, #280]	; (800132c <main+0x2a4>)
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e012      	b.n	800123e <main+0x1b6>
	      	}
	      	else {
	      		yg = y * .0078;
 8001218:	4b40      	ldr	r3, [pc, #256]	; (800131c <main+0x294>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9a1 	bl	8000564 <__aeabi_i2d>
 8001222:	a333      	add	r3, pc, #204	; (adr r3, 80012f0 <main+0x268>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff fa06 	bl	8000638 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcd8 	bl	8000be8 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <main+0x2a4>)
 800123c:	6013      	str	r3, [r2, #0]
	      	}
	      	if(z > 32767) {
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <main+0x298>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b21b      	sxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	da17      	bge.n	8001278 <main+0x1f0>
	      		int zn = z - 65535;
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <main+0x298>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <main+0x29c>)
 8001250:	4413      	add	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
	      		zg = zn * .0078;
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f7ff f985 	bl	8000564 <__aeabi_i2d>
 800125a:	a325      	add	r3, pc, #148	; (adr r3, 80012f0 <main+0x268>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9ea 	bl	8000638 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <main+0x2a8>)
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e012      	b.n	800129e <main+0x216>
	      	}
	      	else {
	      		zg = z * .0078;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <main+0x298>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f971 	bl	8000564 <__aeabi_i2d>
 8001282:	a31b      	add	r3, pc, #108	; (adr r3, 80012f0 <main+0x268>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9d6 	bl	8000638 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fca8 	bl	8000be8 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a25      	ldr	r2, [pc, #148]	; (8001330 <main+0x2a8>)
 800129c:	6013      	str	r3, [r2, #0]
	      	}
	      	//xg = (float)x * .0078;
	      	//yg = (float)y * .0078;
	      	//zg = (float)z * .0078;

	      	UART_TransmitString("X: ");
 800129e:	4825      	ldr	r0, [pc, #148]	; (8001334 <main+0x2ac>)
 80012a0:	f7ff fe74 	bl	8000f8c <UART_TransmitString>
	        UART_TransmitFloat(xg);
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x2a0>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	f7ff fe83 	bl	8000fb8 <UART_TransmitFloat>

	      	UART_TransmitString("Y: ");
 80012b2:	4821      	ldr	r0, [pc, #132]	; (8001338 <main+0x2b0>)
 80012b4:	f7ff fe6a 	bl	8000f8c <UART_TransmitString>
	        UART_TransmitFloat(yg);
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <main+0x2a4>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f7ff fe79 	bl	8000fb8 <UART_TransmitFloat>

	      	UART_TransmitString("Z: ");
 80012c6:	481d      	ldr	r0, [pc, #116]	; (800133c <main+0x2b4>)
 80012c8:	f7ff fe60 	bl	8000f8c <UART_TransmitString>
	        UART_TransmitFloat(zg);
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <main+0x2a8>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f7ff fe6f 	bl	8000fb8 <UART_TransmitFloat>

	        UART_TransmitString("\n\n");
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <main+0x2b8>)
 80012dc:	f7ff fe56 	bl	8000f8c <UART_TransmitString>

	      	HAL_Delay(1000);
 80012e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e4:	f001 f838 	bl	8002358 <HAL_Delay>
	  adxl_read(0x32, 6);
 80012e8:	e721      	b.n	800112e <main+0xa6>
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	8e8a71de 	.word	0x8e8a71de
 80012f4:	3f7ff2e4 	.word	0x3f7ff2e4
 80012f8:	20000004 	.word	0x20000004
 80012fc:	20000270 	.word	0x20000270
 8001300:	20000224 	.word	0x20000224
 8001304:	20000000 	.word	0x20000000
 8001308:	08008488 	.word	0x08008488
 800130c:	200002f4 	.word	0x200002f4
 8001310:	20000020 	.word	0x20000020
 8001314:	20000320 	.word	0x20000320
 8001318:	2000030e 	.word	0x2000030e
 800131c:	20000310 	.word	0x20000310
 8001320:	20000312 	.word	0x20000312
 8001324:	ffff0001 	.word	0xffff0001
 8001328:	20000314 	.word	0x20000314
 800132c:	20000318 	.word	0x20000318
 8001330:	2000031c 	.word	0x2000031c
 8001334:	08008490 	.word	0x08008490
 8001338:	08008494 	.word	0x08008494
 800133c:	08008498 	.word	0x08008498
 8001340:	0800849c 	.word	0x0800849c

08001344 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 f99a 	bl	800568c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001368:	f002 f8e2 	bl	8003530 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <SystemClock_Config+0xd8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <SystemClock_Config+0xd8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <SystemClock_Config+0xd8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <SystemClock_Config+0xdc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <SystemClock_Config+0xdc>)
 800138a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <SystemClock_Config+0xdc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013b0:	2319      	movs	r3, #25
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80013b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013be:	2309      	movs	r3, #9
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 f912 	bl	80035f0 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013d2:	f000 fce3 	bl	8001d9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013d6:	f002 f8bb 	bl	8003550 <HAL_PWREx_EnableOverDrive>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80013e0:	f000 fcdc 	bl	8001d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2106      	movs	r1, #6
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fb98 	bl	8003b38 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800140e:	f000 fcc5 	bl	8001d9c <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	; 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40007000 	.word	0x40007000

08001424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_I2C1_Init+0x74>)
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <MX_I2C1_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_I2C1_Init+0x74>)
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <MX_I2C1_Init+0x7c>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_I2C1_Init+0x74>)
 800143c:	2201      	movs	r2, #1
 800143e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_I2C1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <MX_I2C1_Init+0x74>)
 8001460:	f001 fa46 	bl	80028f0 <HAL_I2C_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800146a:	f000 fc97 	bl	8001d9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <MX_I2C1_Init+0x74>)
 8001472:	f001 ffc5 	bl	8003400 <HAL_I2CEx_ConfigAnalogFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800147c:	f000 fc8e 	bl	8001d9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_I2C1_Init+0x74>)
 8001484:	f002 f807 	bl	8003496 <HAL_I2CEx_ConfigDigitalFilter>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 fc85 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000224 	.word	0x20000224
 800149c:	40005400 	.word	0x40005400
 80014a0:	00c0eaff 	.word	0x00c0eaff

080014a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <MX_USART1_UART_Init+0x5c>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART1_UART_Init+0x58>)
 80014e8:	f003 fc0e 	bl	8004d08 <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014f2:	f000 fc53 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000270 	.word	0x20000270
 8001500:	40011000 	.word	0x40011000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	; 0x40
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	4bae      	ldr	r3, [pc, #696]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4aad      	ldr	r2, [pc, #692]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4bab      	ldr	r3, [pc, #684]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	4ba8      	ldr	r3, [pc, #672]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4aa7      	ldr	r2, [pc, #668]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4ba5      	ldr	r3, [pc, #660]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4ba2      	ldr	r3, [pc, #648]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4aa1      	ldr	r2, [pc, #644]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b9f      	ldr	r3, [pc, #636]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a9b      	ldr	r2, [pc, #620]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a95      	ldr	r2, [pc, #596]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a8f      	ldr	r2, [pc, #572]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015aa:	4b8a      	ldr	r3, [pc, #552]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a89      	ldr	r2, [pc, #548]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b87      	ldr	r3, [pc, #540]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015c2:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015da:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a7d      	ldr	r2, [pc, #500]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f2:	4b78      	ldr	r3, [pc, #480]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a77      	ldr	r2, [pc, #476]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b75      	ldr	r3, [pc, #468]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160a:	4b72      	ldr	r3, [pc, #456]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a71      	ldr	r2, [pc, #452]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2120      	movs	r1, #32
 8001626:	486c      	ldr	r0, [pc, #432]	; (80017d8 <MX_GPIO_Init+0x2d4>)
 8001628:	f001 f948 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	210c      	movs	r1, #12
 8001630:	486a      	ldr	r0, [pc, #424]	; (80017dc <MX_GPIO_Init+0x2d8>)
 8001632:	f001 f943 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2108      	movs	r1, #8
 800163a:	4869      	ldr	r0, [pc, #420]	; (80017e0 <MX_GPIO_Init+0x2dc>)
 800163c:	f001 f93e 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001646:	4865      	ldr	r0, [pc, #404]	; (80017dc <MX_GPIO_Init+0x2d8>)
 8001648:	f001 f938 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	4864      	ldr	r0, [pc, #400]	; (80017e4 <MX_GPIO_Init+0x2e0>)
 8001654:	f001 f932 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	21c8      	movs	r1, #200	; 0xc8
 800165c:	4862      	ldr	r0, [pc, #392]	; (80017e8 <MX_GPIO_Init+0x2e4>)
 800165e:	f001 f92d 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001662:	2310      	movs	r3, #16
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001672:	230e      	movs	r3, #14
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	4619      	mov	r1, r3
 800167c:	485b      	ldr	r0, [pc, #364]	; (80017ec <MX_GPIO_Init+0x2e8>)
 800167e:	f000 ff71 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001682:	2308      	movs	r3, #8
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	4855      	ldr	r0, [pc, #340]	; (80017ec <MX_GPIO_Init+0x2e8>)
 8001696:	f000 ff65 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016aa:	2309      	movs	r3, #9
 80016ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	484d      	ldr	r0, [pc, #308]	; (80017ec <MX_GPIO_Init+0x2e8>)
 80016b6:	f000 ff55 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80016ba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016cc:	230b      	movs	r3, #11
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	4844      	ldr	r0, [pc, #272]	; (80017e8 <MX_GPIO_Init+0x2e4>)
 80016d8:	f000 ff44 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80016dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ee:	230c      	movs	r3, #12
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	4619      	mov	r1, r3
 80016f8:	483c      	ldr	r0, [pc, #240]	; (80017ec <MX_GPIO_Init+0x2e8>)
 80016fa:	f000 ff33 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80016fe:	2310      	movs	r3, #16
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800170e:	2302      	movs	r3, #2
 8001710:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001716:	4619      	mov	r1, r3
 8001718:	4835      	ldr	r0, [pc, #212]	; (80017f0 <MX_GPIO_Init+0x2ec>)
 800171a:	f000 ff23 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800172e:	2308      	movs	r3, #8
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001736:	4619      	mov	r1, r3
 8001738:	4827      	ldr	r0, [pc, #156]	; (80017d8 <MX_GPIO_Init+0x2d4>)
 800173a:	f000 ff13 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800173e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001750:	230c      	movs	r3, #12
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001758:	4619      	mov	r1, r3
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_GPIO_Init+0x2f0>)
 800175c:	f000 ff02 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001772:	2301      	movs	r3, #1
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	4619      	mov	r1, r3
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <MX_GPIO_Init+0x2f4>)
 800177e:	f000 fef1 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001782:	2360      	movs	r3, #96	; 0x60
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001792:	230d      	movs	r3, #13
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <MX_GPIO_Init+0x2e8>)
 800179e:	f000 fee1 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017a2:	2340      	movs	r3, #64	; 0x40
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017b2:	230a      	movs	r3, #10
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_GPIO_Init+0x2ec>)
 80017be:	f000 fed1 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80017c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
 80017d0:	e014      	b.n	80017fc <MX_GPIO_Init+0x2f8>
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40022800 	.word	0x40022800
 80017e4:	40021c00 	.word	0x40021c00
 80017e8:	40021800 	.word	0x40021800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001800:	230c      	movs	r3, #12
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	48bc      	ldr	r0, [pc, #752]	; (8001afc <MX_GPIO_Init+0x5f8>)
 800180c:	f000 feaa 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001810:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001822:	230e      	movs	r3, #14
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	48b4      	ldr	r0, [pc, #720]	; (8001b00 <MX_GPIO_Init+0x5fc>)
 800182e:	f000 fe99 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001844:	4619      	mov	r1, r3
 8001846:	48ae      	ldr	r0, [pc, #696]	; (8001b00 <MX_GPIO_Init+0x5fc>)
 8001848:	f000 fe8c 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001850:	4bac      	ldr	r3, [pc, #688]	; (8001b04 <MX_GPIO_Init+0x600>)
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	48aa      	ldr	r0, [pc, #680]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001860:	f000 fe80 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001864:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001876:	230c      	movs	r3, #12
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	48a1      	ldr	r0, [pc, #644]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001882:	f000 fe6f 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001886:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001898:	230a      	movs	r3, #10
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	489a      	ldr	r0, [pc, #616]	; (8001b0c <MX_GPIO_Init+0x608>)
 80018a4:	f000 fe5e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018a8:	23f0      	movs	r3, #240	; 0xf0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018b8:	230a      	movs	r3, #10
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4893      	ldr	r0, [pc, #588]	; (8001b10 <MX_GPIO_Init+0x60c>)
 80018c4:	f000 fe4e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80018c8:	23f7      	movs	r3, #247	; 0xf7
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d8:	230e      	movs	r3, #14
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	488c      	ldr	r0, [pc, #560]	; (8001b14 <MX_GPIO_Init+0x610>)
 80018e4:	f000 fe3e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80018e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018fa:	2309      	movs	r3, #9
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	487d      	ldr	r0, [pc, #500]	; (8001afc <MX_GPIO_Init+0x5f8>)
 8001906:	f000 fe2d 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800191c:	230a      	movs	r3, #10
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4875      	ldr	r0, [pc, #468]	; (8001afc <MX_GPIO_Init+0x5f8>)
 8001928:	f000 fe1c 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800192c:	2320      	movs	r3, #32
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4871      	ldr	r0, [pc, #452]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001944:	f000 fe0e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001948:	2308      	movs	r3, #8
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001958:	230d      	movs	r3, #13
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	4869      	ldr	r0, [pc, #420]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001964:	f000 fdfe 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001968:	f241 030c 	movw	r3, #4108	; 0x100c
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4863      	ldr	r0, [pc, #396]	; (8001b10 <MX_GPIO_Init+0x60c>)
 8001982:	f000 fdef 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	485f      	ldr	r0, [pc, #380]	; (8001b18 <MX_GPIO_Init+0x614>)
 800199c:	f000 fde2 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80019a0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b2:	230c      	movs	r3, #12
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4857      	ldr	r0, [pc, #348]	; (8001b1c <MX_GPIO_Init+0x618>)
 80019be:	f000 fdd1 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019c2:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019d4:	230e      	movs	r3, #14
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	484c      	ldr	r0, [pc, #304]	; (8001b10 <MX_GPIO_Init+0x60c>)
 80019e0:	f000 fdc0 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019e4:	2308      	movs	r3, #8
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	4619      	mov	r1, r3
 80019fa:	4846      	ldr	r0, [pc, #280]	; (8001b14 <MX_GPIO_Init+0x610>)
 80019fc:	f000 fdb2 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a12:	230d      	movs	r3, #13
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4837      	ldr	r0, [pc, #220]	; (8001afc <MX_GPIO_Init+0x5f8>)
 8001a1e:	f000 fda1 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a22:	2310      	movs	r3, #16
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4834      	ldr	r0, [pc, #208]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001a36:	f000 fd95 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	482c      	ldr	r0, [pc, #176]	; (8001b08 <MX_GPIO_Init+0x604>)
 8001a56:	f000 fd85 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a5a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	482c      	ldr	r0, [pc, #176]	; (8001b20 <MX_GPIO_Init+0x61c>)
 8001a70:	f000 fd78 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001a74:	2302      	movs	r3, #2
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a84:	2305      	movs	r3, #5
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4820      	ldr	r0, [pc, #128]	; (8001b10 <MX_GPIO_Init+0x60c>)
 8001a90:	f000 fd68 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <MX_GPIO_Init+0x61c>)
 8001aae:	f000 fd59 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ab2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ac4:	230d      	movs	r3, #13
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4814      	ldr	r0, [pc, #80]	; (8001b20 <MX_GPIO_Init+0x61c>)
 8001ad0:	f000 fd48 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <MX_GPIO_Init+0x60c>)
 8001af0:	f000 fd38 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af8:	e014      	b.n	8001b24 <MX_GPIO_Init+0x620>
 8001afa:	bf00      	nop
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40022400 	.word	0x40022400
 8001b04:	10120000 	.word	0x10120000
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40022000 	.word	0x40022000
 8001b14:	40022800 	.word	0x40022800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40021400 	.word	0x40021400
 8001b20:	40021c00 	.word	0x40021c00
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4885      	ldr	r0, [pc, #532]	; (8001d54 <MX_GPIO_Init+0x850>)
 8001b3e:	f000 fd11 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b48:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <MX_GPIO_Init+0x854>)
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4881      	ldr	r0, [pc, #516]	; (8001d5c <MX_GPIO_Init+0x858>)
 8001b58:	f000 fd04 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	487a      	ldr	r0, [pc, #488]	; (8001d60 <MX_GPIO_Init+0x85c>)
 8001b78:	f000 fcf4 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b7c:	2328      	movs	r3, #40	; 0x28
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	4873      	ldr	r0, [pc, #460]	; (8001d64 <MX_GPIO_Init+0x860>)
 8001b98:	f000 fce4 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001b9c:	23c8      	movs	r3, #200	; 0xc8
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	486d      	ldr	r0, [pc, #436]	; (8001d68 <MX_GPIO_Init+0x864>)
 8001bb4:	f000 fcd6 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001bb8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4867      	ldr	r0, [pc, #412]	; (8001d6c <MX_GPIO_Init+0x868>)
 8001bce:	f000 fcc9 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be2:	230c      	movs	r3, #12
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	485c      	ldr	r0, [pc, #368]	; (8001d60 <MX_GPIO_Init+0x85c>)
 8001bee:	f000 fcb9 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bf2:	2332      	movs	r3, #50	; 0x32
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c02:	230b      	movs	r3, #11
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4854      	ldr	r0, [pc, #336]	; (8001d60 <MX_GPIO_Init+0x85c>)
 8001c0e:	f000 fca9 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c12:	2304      	movs	r3, #4
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c22:	2309      	movs	r3, #9
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4850      	ldr	r0, [pc, #320]	; (8001d70 <MX_GPIO_Init+0x86c>)
 8001c2e:	f000 fc99 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c44:	2309      	movs	r3, #9
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4849      	ldr	r0, [pc, #292]	; (8001d74 <MX_GPIO_Init+0x870>)
 8001c50:	f000 fc88 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c54:	2304      	movs	r3, #4
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4840      	ldr	r0, [pc, #256]	; (8001d68 <MX_GPIO_Init+0x864>)
 8001c68:	f000 fc7c 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c6c:	2386      	movs	r3, #134	; 0x86
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	4833      	ldr	r0, [pc, #204]	; (8001d54 <MX_GPIO_Init+0x850>)
 8001c88:	f000 fc6c 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c90:	2303      	movs	r3, #3
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	482d      	ldr	r0, [pc, #180]	; (8001d54 <MX_GPIO_Init+0x850>)
 8001ca0:	f000 fc60 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ca4:	2350      	movs	r3, #80	; 0x50
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cb4:	230d      	movs	r3, #13
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <MX_GPIO_Init+0x850>)
 8001cc0:	f000 fc50 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4820      	ldr	r0, [pc, #128]	; (8001d64 <MX_GPIO_Init+0x860>)
 8001ce2:	f000 fc3f 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	481b      	ldr	r0, [pc, #108]	; (8001d70 <MX_GPIO_Init+0x86c>)
 8001d04:	f000 fc2e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d18:	2309      	movs	r3, #9
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <MX_GPIO_Init+0x860>)
 8001d24:	f000 fc1e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <MX_GPIO_Init+0x86c>)
 8001d46:	f000 fc0d 	bl	8002564 <HAL_GPIO_Init>

}
 8001d4a:	bf00      	nop
 8001d4c:	3740      	adds	r7, #64	; 0x40
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000
 8001d58:	10120000 	.word	0x10120000
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020c00 	.word	0x40020c00

08001d78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d8a:	f000 fac5 	bl	8002318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40001000 	.word	0x40001000

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_MspInit+0x4c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	210f      	movs	r1, #15
 8001de2:	f06f 0001 	mvn.w	r0, #1
 8001de6:	f000 fb93 	bl	8002510 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0aa      	sub	sp, #168	; 0xa8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2284      	movs	r2, #132	; 0x84
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fc37 	bl	800568c <memset>
  if(hi2c->Instance==I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <HAL_I2C_MspInit+0xc4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d144      	bne.n	8001eb2 <HAL_I2C_MspInit+0xba>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 f896 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e42:	f7ff ffab 	bl	8001d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e82:	4619      	mov	r1, r3
 8001e84:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <HAL_I2C_MspInit+0xcc>)
 8001e86:	f000 fb6d 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_I2C_MspInit+0xc8>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201f      	movs	r0, #31
 8001ea8:	f000 fb32 	bl	8002510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001eac:	201f      	movs	r0, #31
 8001eae:	f000 fb4b 	bl	8002548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	37a8      	adds	r7, #168	; 0xa8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0ac      	sub	sp, #176	; 0xb0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2284      	movs	r2, #132	; 0x84
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fbcf 	bl	800568c <memset>
  if(huart->Instance==USART1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_UART_MspInit+0xf4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d15c      	bne.n	8001fb2 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ef8:	2340      	movs	r3, #64	; 0x40
 8001efa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001efc:	2300      	movs	r3, #0
 8001efe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f00:	f107 0318 	add.w	r3, r7, #24
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 f82f 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f10:	f7ff ff44 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_UART_MspInit+0xf8>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f74:	2307      	movs	r3, #7
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <HAL_UART_MspInit+0xfc>)
 8001f82:	f000 faef 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001faa:	4619      	mov	r1, r3
 8001fac:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_UART_MspInit+0x100>)
 8001fae:	f000 fad9 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	37b0      	adds	r7, #176	; 0xb0
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	2036      	movs	r0, #54	; 0x36
 8001fe2:	f000 fa95 	bl	8002510 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fe6:	2036      	movs	r0, #54	; 0x36
 8001fe8:	f000 faae 	bl	8002548 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_InitTick+0xa0>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_InitTick+0xa0>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_InitTick+0xa0>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002004:	f107 0210 	add.w	r2, r7, #16
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f001 ff78 	bl	8003f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002014:	f001 ff4e 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8002018:	4603      	mov	r3, r0
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_InitTick+0xa4>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	3b01      	subs	r3, #1
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_InitTick+0xa8>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_InitTick+0xac>)
 8002030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_InitTick+0xa8>)
 8002034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002038:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_InitTick+0xa8>)
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_InitTick+0xa8>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_InitTick+0xa8>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_InitTick+0xa8>)
 800204e:	f002 fb7b 	bl	8004748 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <HAL_InitTick+0xa8>)
 800205a:	f002 fbd7 	bl	800480c <HAL_TIM_Base_Start_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	431bde83 	.word	0x431bde83
 8002074:	20000328 	.word	0x20000328
 8002078:	40001000 	.word	0x40001000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <I2C1_EV_IRQHandler+0x10>)
 80020da:	f000 ffaf 	bl	800303c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000224 	.word	0x20000224

080020e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM6_DAC_IRQHandler+0x10>)
 80020ee:	f002 fc05 	bl	80048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000328 	.word	0x20000328

080020fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
	return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_kill>:

int _kill(int pid, int sig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002116:	f003 fa8f 	bl	8005638 <__errno>
 800211a:	4603      	mov	r3, r0
 800211c:	2216      	movs	r2, #22
 800211e:	601a      	str	r2, [r3, #0]
	return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_exit>:

void _exit (int status)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffe7 	bl	800210c <_kill>
	while (1) {}		/* Make sure we hang here */
 800213e:	e7fe      	b.n	800213e <_exit+0x12>

08002140 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e00a      	b.n	8002168 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002152:	f3af 8000 	nop.w
 8002156:	4601      	mov	r1, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	b2ca      	uxtb	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	dbf0      	blt.n	8002152 <_read+0x12>
	}

return len;
 8002170:	687b      	ldr	r3, [r7, #4]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e009      	b.n	80021a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf1      	blt.n	800218c <_write+0x12>
	}
	return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_close>:

int _close(int file)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021da:	605a      	str	r2, [r3, #4]
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_isatty>:

int _isatty(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	return 1;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <_sbrk+0x5c>)
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <_sbrk+0x60>)
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <_sbrk+0x64>)
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <_sbrk+0x68>)
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	429a      	cmp	r2, r3
 800224a:	d207      	bcs.n	800225c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800224c:	f003 f9f4 	bl	8005638 <__errno>
 8002250:	4603      	mov	r3, r0
 8002252:	220c      	movs	r2, #12
 8002254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
 800225a:	e009      	b.n	8002270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_sbrk+0x64>)
 800226c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20050000 	.word	0x20050000
 800227c:	00000400 	.word	0x00000400
 8002280:	20000374 	.word	0x20000374
 8002284:	20000390 	.word	0x20000390

08002288 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <SystemInit+0x20>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <SystemInit+0x20>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:
 80022ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e4 <LoopFillZerobss+0x12>
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <LoopFillZerobss+0x16>)
 80022b2:	490e      	ldr	r1, [pc, #56]	; (80022ec <LoopFillZerobss+0x1a>)
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1e>)
 80022b6:	2300      	movs	r3, #0
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:
 80022ba:	58d4      	ldr	r4, [r2, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:
 80022c0:	18c4      	adds	r4, r0, r3
 80022c2:	428c      	cmp	r4, r1
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LoopFillZerobss+0x22>)
 80022c8:	4c0b      	ldr	r4, [pc, #44]	; (80022f8 <LoopFillZerobss+0x26>)
 80022ca:	2300      	movs	r3, #0
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>
 80022d6:	f7ff ffd7 	bl	8002288 <SystemInit>
 80022da:	f003 f9b3 	bl	8005644 <__libc_init_array>
 80022de:	f7fe fed3 	bl	8001088 <main>
 80022e2:	4770      	bx	lr
 80022e4:	20050000 	.word	0x20050000
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000208 	.word	0x20000208
 80022f0:	080088a4 	.word	0x080088a4
 80022f4:	20000208 	.word	0x20000208
 80022f8:	2000038c 	.word	0x2000038c

080022fc <ADC_IRQHandler>:
 80022fc:	e7fe      	b.n	80022fc <ADC_IRQHandler>

080022fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002302:	2003      	movs	r0, #3
 8002304:	f000 f8f9 	bl	80024fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff fe5f 	bl	8001fcc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800230e:	f7ff fd4b 	bl	8001da8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000034 	.word	0x20000034
 800233c:	20000378 	.word	0x20000378

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000378 	.word	0x20000378

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000034 	.word	0x20000034

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <__NVIC_SetPriorityGrouping+0x40>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <__NVIC_SetPriorityGrouping+0x40>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00
 80023e4:	05fa0000 	.word	0x05fa0000

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff4c 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002522:	f7ff ff61 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002526:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff ffb1 	bl	8002494 <NVIC_EncodePriority>
 8002532:	4602      	mov	r2, r0
 8002534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff80 	bl	8002440 <__NVIC_SetPriority>
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff54 	bl	8002404 <__NVIC_EnableIRQ>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e175      	b.n	8002870 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8164 	bne.w	800286a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00b      	beq.n	80025c2 <HAL_GPIO_Init+0x5e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b6:	2b11      	cmp	r3, #17
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x100>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d123      	bne.n	80026ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	08da      	lsrs	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3208      	adds	r2, #8
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80be 	beq.w	800286a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002706:	4a61      	ldr	r2, [pc, #388]	; (800288c <HAL_GPIO_Init+0x328>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_GPIO_Init+0x32c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d037      	beq.n	80027a2 <HAL_GPIO_Init+0x23e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_GPIO_Init+0x330>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_GPIO_Init+0x23a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_GPIO_Init+0x334>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02b      	beq.n	800279a <HAL_GPIO_Init+0x236>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_GPIO_Init+0x338>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x232>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a54      	ldr	r2, [pc, #336]	; (80028a0 <HAL_GPIO_Init+0x33c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x22e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a53      	ldr	r2, [pc, #332]	; (80028a4 <HAL_GPIO_Init+0x340>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x22a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a52      	ldr	r2, [pc, #328]	; (80028a8 <HAL_GPIO_Init+0x344>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x226>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_GPIO_Init+0x348>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x222>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <HAL_GPIO_Init+0x34c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x21e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	; (80028b4 <HAL_GPIO_Init+0x350>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x21a>
 800277a:	2309      	movs	r3, #9
 800277c:	e012      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800277e:	230a      	movs	r3, #10
 8002780:	e010      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002782:	2308      	movs	r3, #8
 8002784:	e00e      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002786:	2307      	movs	r3, #7
 8002788:	e00c      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800278a:	2306      	movs	r3, #6
 800278c:	e00a      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800278e:	2305      	movs	r3, #5
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002792:	2304      	movs	r3, #4
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 80027a2:	2300      	movs	r3, #0
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f002 0203 	and.w	r2, r2, #3
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	4093      	lsls	r3, r2
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027b4:	4935      	ldr	r1, [pc, #212]	; (800288c <HAL_GPIO_Init+0x328>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e6:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002810:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_GPIO_Init+0x354>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3301      	adds	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	f67f ae86 	bls.w	8002584 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40021800 	.word	0x40021800
 80028ac:	40021c00 	.word	0x40021c00
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40022400 	.word	0x40022400
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fa6e 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e006      	b.n	8002978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d104      	bne.n	800298a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_I2C_Init+0x11c>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	ea42 0103 	orr.w	r1, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	02008000 	.word	0x02008000

08002a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	4613      	mov	r3, r2
 8002a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	f040 80da 	bne.w	8002be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2C_Master_Transmit+0x30>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0d3      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a48:	f7ff fc7a 	bl	8002340 <HAL_GetTick>
 8002a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb80 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0be      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d90e      	bls.n	8002aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	4b51      	ldr	r3, [pc, #324]	; (8002bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc76 	bl	80033a4 <I2C_TransferConfig>
 8002ab8:	e06c      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fc65 	bl	80033a4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ada:	e05b      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6a39      	ldr	r1, [r7, #32]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fb7d 	bl	80031e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e07b      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d034      	beq.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d130      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fb0f 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04d      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2bff      	cmp	r3, #255	; 0xff
 8002b54:	d90e      	bls.n	8002b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	2300      	movs	r3, #0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fc19 	bl	80033a4 <I2C_TransferConfig>
 8002b72:	e00f      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fc08 	bl	80033a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d19e      	bne.n	8002adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fb5c 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e01a      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	80002000 	.word	0x80002000
 8002bf4:	fe00e800 	.word	0xfe00e800

08002bf8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	f040 80fd 	bne.w	8002e1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x34>
 8002c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0f1      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x4e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0ea      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c4e:	f7ff fb77 	bl	8002340 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fa7d 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d5      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2222      	movs	r2, #34	; 0x22
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c98:	88f8      	ldrh	r0, [r7, #6]
 8002c9a:	893a      	ldrh	r2, [r7, #8]
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f9e1 	bl	8003070 <I2C_RequestMemoryRead>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0ad      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bff      	cmp	r3, #255	; 0xff
 8002cc8:	d90e      	bls.n	8002ce8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_I2C_Mem_Read+0x22c>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fb5f 	bl	80033a4 <I2C_TransferConfig>
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_I2C_Mem_Read+0x22c>)
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fb4e 	bl	80033a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2104      	movs	r1, #4
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa24 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07c      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d034      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d130      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f9f5 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04d      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2bff      	cmp	r3, #255	; 0xff
 8002d88:	d90e      	bls.n	8002da8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 faff 	bl	80033a4 <I2C_TransferConfig>
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 faee 	bl	80033a4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d19a      	bne.n	8002d08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa42 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01a      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_I2C_Mem_Read+0x230>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	80002400 	.word	0x80002400
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	f040 80ef 	bne.w	800302c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0e5      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2C_IsDeviceReady+0x44>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0de      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_I2C_IsDeviceReady+0x6e>
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_I2C_IsDeviceReady+0x20c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	e004      	b.n	8002ea4 <HAL_I2C_IsDeviceReady+0x78>
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fa49 	bl	8002340 <HAL_GetTick>
 8002eae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002edc:	e034      	b.n	8002f48 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d01a      	beq.n	8002f1c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7ff fa2b 	bl	8002340 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <HAL_I2C_IsDeviceReady+0xd0>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e088      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_I2C_IsDeviceReady+0x128>
 8002f4e:	7fbb      	ldrb	r3, [r7, #30]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0c4      	beq.n	8002ede <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d01a      	beq.n	8002f98 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f8f7 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e058      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e04a      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8dc 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e03d      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d118      	bne.n	8002ffc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f8bb 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01c      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	f63f af3d 	bhi.w	8002e86 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	02002000 	.word	0x02002000

0800303c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
  }
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	817b      	strh	r3, [r7, #10]
 8003082:	460b      	mov	r3, r1
 8003084:	813b      	strh	r3, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <I2C_RequestMemoryRead+0xa4>)
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f984 	bl	80033a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f89d 	bl	80031e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e02c      	b.n	800310a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
 80030c0:	e015      	b.n	80030ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030c2:	893b      	ldrh	r3, [r7, #8]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f883 	bl	80031e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e012      	b.n	800310a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f831 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	80002000 	.word	0x80002000

08003118 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d103      	bne.n	8003136 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d007      	beq.n	8003154 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	619a      	str	r2, [r3, #24]
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e022      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d01e      	beq.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff f8e1 	bl	8002340 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d113      	bne.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00f      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d0cd      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ec:	e02c      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f870 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02a      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d01e      	beq.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7ff f899 	bl	8002340 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d113      	bne.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d1cb      	bne.n	80031ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326c:	e028      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f830 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e026      	b.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7ff f85d 	bl	8002340 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d1cf      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d151      	bne.n	8003396 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f2:	e022      	b.n	800333a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d01e      	beq.n	800333a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fc:	f7ff f820 	bl	8002340 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <I2C_IsAcknowledgeFailed+0x3a>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02e      	b.n	8003398 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d1d5      	bne.n	80032f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fedd 	bl	8003118 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <I2C_IsAcknowledgeFailed+0xc8>)
 800336a:	400b      	ands	r3, r1
 800336c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0204 	orr.w	r2, r3, #4
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	4613      	mov	r3, r2
 80033b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	0d5b      	lsrs	r3, r3, #21
 80033c0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <I2C_TransferConfig+0x58>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	43db      	mvns	r3, r3
 80033ca:	ea02 0103 	and.w	r1, r2, r3
 80033ce:	897b      	ldrh	r3, [r7, #10]
 80033d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033d4:	7a7b      	ldrb	r3, [r7, #9]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	03ff63ff 	.word	0x03ff63ff

08003400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b20      	cmp	r3, #32
 8003414:	d138      	bne.n	8003488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003420:	2302      	movs	r3, #2
 8003422:	e032      	b.n	800348a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d139      	bne.n	8003520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e033      	b.n	8003522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e000      	b.n	8003522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40007000 	.word	0x40007000

08003550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800357e:	f7fe fedf 	bl	8002340 <HAL_GetTick>
 8003582:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003584:	e009      	b.n	800359a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003586:	f7fe fedb 	bl	8002340 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003594:	d901      	bls.n	800359a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e022      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d1ee      	bne.n	8003586 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b4:	f7fe fec4 	bl	8002340 <HAL_GetTick>
 80035b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ba:	e009      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035bc:	f7fe fec0 	bl	8002340 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ca:	d901      	bls.n	80035d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e007      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035dc:	d1ee      	bne.n	80035bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40007000 	.word	0x40007000

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e291      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8087 	beq.w	8003722 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003614:	4b96      	ldr	r3, [pc, #600]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b04      	cmp	r3, #4
 800361e:	d00c      	beq.n	800363a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003620:	4b93      	ldr	r3, [pc, #588]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d112      	bne.n	8003652 <HAL_RCC_OscConfig+0x62>
 800362c:	4b90      	ldr	r3, [pc, #576]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003638:	d10b      	bne.n	8003652 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	4b8d      	ldr	r3, [pc, #564]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d06c      	beq.n	8003720 <HAL_RCC_OscConfig+0x130>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d168      	bne.n	8003720 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e26b      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x7a>
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a83      	ldr	r2, [pc, #524]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e02e      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x9c>
 8003672:	4b7f      	ldr	r3, [pc, #508]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b7c      	ldr	r3, [pc, #496]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7b      	ldr	r2, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e01d      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0xc0>
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a72      	ldr	r2, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 80036b0:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6b      	ldr	r2, [pc, #428]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fe36 	bl	8002340 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d8:	f7fe fe32 	bl	8002340 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e21f      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe8>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fe22 	bl	8002340 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fe fe1e 	bl	8002340 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e20b      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x110>
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d069      	beq.n	8003802 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372e:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373a:	4b4d      	ldr	r3, [pc, #308]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b08      	cmp	r3, #8
 8003744:	d11c      	bne.n	8003780 <HAL_RCC_OscConfig+0x190>
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_RCC_OscConfig+0x17a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1df      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	493d      	ldr	r1, [pc, #244]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	e040      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a38      	ldr	r2, [pc, #224]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fdd4 	bl	8002340 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	f7fe fdd0 	bl	8002340 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1bd      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4929      	ldr	r1, [pc, #164]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
 80037ce:	e018      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe fdb0 	bl	8002340 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fe fdac 	bl	8002340 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e199      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d038      	beq.n	8003880 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe fd8d 	bl	8002340 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7fe fd89 	bl	8002340 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e176      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800383e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x23a>
 8003848:	e01a      	b.n	8003880 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <HAL_RCC_OscConfig+0x280>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe fd73 	bl	8002340 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385e:	f7fe fd6f 	bl	8002340 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d903      	bls.n	8003874 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e15c      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
 8003870:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a4 	beq.w	80039d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a87      	ldr	r2, [pc, #540]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b85      	ldr	r3, [pc, #532]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b6:	4b82      	ldr	r3, [pc, #520]	; (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038c2:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7e      	ldr	r2, [pc, #504]	; (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fd37 	bl	8002340 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe fd33 	bl	8002340 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	; 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e120      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	4b75      	ldr	r3, [pc, #468]	; (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x31a>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a6e      	ldr	r2, [pc, #440]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e02d      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x33c>
 8003912:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a69      	ldr	r2, [pc, #420]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a66      	ldr	r2, [pc, #408]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	e01c      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d10c      	bne.n	800394e <HAL_RCC_OscConfig+0x35e>
 8003934:	4b61      	ldr	r3, [pc, #388]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	4b5e      	ldr	r3, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a5d      	ldr	r2, [pc, #372]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
 800394c:	e00b      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800394e:	4b5b      	ldr	r3, [pc, #364]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a5a      	ldr	r2, [pc, #360]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d015      	beq.n	800399a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fe fce7 	bl	8002340 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe fce3 	bl	8002340 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0ce      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCC_OscConfig+0x386>
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fe fcd1 	bl	8002340 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe fccd 	bl	8002340 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0b8      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ee      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a3b      	ldr	r2, [pc, #236]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a4 	beq.w	8003b28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e0:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d06b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d149      	bne.n	8003a88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b31      	ldr	r3, [pc, #196]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fc9e 	bl	8002340 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fc9a 	bl	8002340 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e087      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fc6e 	bl	8002340 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe fc6a 	bl	8002340 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e057      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x478>
 8003a86:	e04f      	b.n	8003b28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fc54 	bl	8002340 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fc50 	bl	8002340 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e03d      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4ac>
 8003aba:	e035      	b.n	8003b28 <HAL_RCC_OscConfig+0x538>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x544>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d0      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	4965      	ldr	r1, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d040      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e073      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4936      	ldr	r1, [pc, #216]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2c:	f7fe fb88 	bl	8002340 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe fb84 	bl	8002340 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e053      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d210      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	4922      	ldr	r1, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x1cc>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe f96e 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	080084a0 	.word	0x080084a0
 8003d08:	2000002c 	.word	0x2000002c
 8003d0c:	20000030 	.word	0x20000030

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b090      	sub	sp, #64	; 0x40
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	2300      	movs	r3, #0
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80a1 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e09b      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d48:	e09b      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4e:	e098      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d5a:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	627a      	str	r2, [r7, #36]	; 0x24
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7c:	fb03 f201 	mul.w	r2, r3, r1
 8003d80:	2300      	movs	r3, #0
 8003d82:	fb00 f303 	mul.w	r3, r0, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	460a      	mov	r2, r1
 8003d92:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	4413      	add	r3, r2
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003daa:	f7fc ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db6:	e053      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dca:	f04f 0b00 	mov.w	fp, #0
 8003dce:	4652      	mov	r2, sl
 8003dd0:	465b      	mov	r3, fp
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dea:	eb63 090b 	sbc.w	r9, r3, fp
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e02:	ebb2 0408 	subs.w	r4, r2, r8
 8003e06:	eb63 0509 	sbc.w	r5, r3, r9
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	00eb      	lsls	r3, r5, #3
 8003e14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e18:	00e2      	lsls	r2, r4, #3
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	eb14 030a 	adds.w	r3, r4, sl
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	eb45 030b 	adc.w	r3, r5, fp
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e36:	4629      	mov	r1, r5
 8003e38:	028b      	lsls	r3, r1, #10
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e40:	4621      	mov	r1, r4
 8003e42:	028a      	lsls	r2, r1, #10
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	f7fc ff18 	bl	8000c88 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	017d7840 	.word	0x017d7840

08003e9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000002c 	.word	0x2000002c

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080084b0 	.word	0x080084b0

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	080084b0 	.word	0x080084b0

08003f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	220f      	movs	r2, #15
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCC_GetClockConfig+0x5c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_RCC_GetClockConfig+0x5c>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	08db      	lsrs	r3, r3, #3
 8003f3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_RCC_GetClockConfig+0x60>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 020f 	and.w	r2, r3, #15
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40023c00 	.word	0x40023c00

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f90:	4b69      	ldr	r3, [pc, #420]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a68      	ldr	r2, [pc, #416]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	4b66      	ldr	r3, [pc, #408]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	4964      	ldr	r1, [pc, #400]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	4959      	ldr	r1, [pc, #356]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d017      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ffe:	4b4e      	ldr	r3, [pc, #312]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	494a      	ldr	r1, [pc, #296]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401c:	d101      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 808b 	beq.w	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	4a39      	ldr	r2, [pc, #228]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	; 0x40
 8004058:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004064:	4b35      	ldr	r3, [pc, #212]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a34      	ldr	r2, [pc, #208]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800406a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fe f966 	bl	8002340 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004078:	f7fe f962 	bl	8002340 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e357      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d035      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d02e      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d114      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe f92a 	bl	8002340 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ee:	e00a      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fe f926 	bl	8002340 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e319      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ee      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411e:	d111      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800412e:	400b      	ands	r3, r1
 8004130:	4901      	ldr	r1, [pc, #4]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	e00b      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004138:	40023800 	.word	0x40023800
 800413c:	40007000 	.word	0x40007000
 8004140:	0ffffcff 	.word	0x0ffffcff
 8004144:	4baa      	ldr	r3, [pc, #680]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4aa9      	ldr	r2, [pc, #676]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	49a4      	ldr	r1, [pc, #656]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415e:	4313      	orrs	r3, r2
 8004160:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800416e:	4ba0      	ldr	r3, [pc, #640]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004174:	4a9e      	ldr	r2, [pc, #632]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800417e:	4b9c      	ldr	r3, [pc, #624]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004180:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	4999      	ldr	r1, [pc, #612]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419c:	4b94      	ldr	r3, [pc, #592]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041aa:	4991      	ldr	r1, [pc, #580]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041be:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041cc:	4988      	ldr	r1, [pc, #544]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e0:	4b83      	ldr	r3, [pc, #524]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ee:	4980      	ldr	r1, [pc, #512]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4977      	ldr	r1, [pc, #476]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004224:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	496f      	ldr	r1, [pc, #444]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f023 020c 	bic.w	r2, r3, #12
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004254:	4966      	ldr	r1, [pc, #408]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004268:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	495e      	ldr	r1, [pc, #376]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800428a:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	4955      	ldr	r1, [pc, #340]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	494d      	ldr	r1, [pc, #308]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ce:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	4944      	ldr	r1, [pc, #272]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042f0:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	493c      	ldr	r1, [pc, #240]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	4933      	ldr	r1, [pc, #204]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004342:	492b      	ldr	r1, [pc, #172]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d011      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004356:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004364:	4922      	ldr	r1, [pc, #136]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	4912      	ldr	r1, [pc, #72]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043b8:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	4909      	ldr	r1, [pc, #36]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d006      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80d9 	beq.w	8004596 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043e4:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a01      	ldr	r2, [pc, #4]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ee:	e001      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fd ffa3 	bl	8002340 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043fe:	f7fd ff9f 	bl	8002340 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e194      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004410:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d021      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11d      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800443e:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	0e1b      	lsrs	r3, r3, #24
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	019a      	lsls	r2, r3, #6
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	071b      	lsls	r3, r3, #28
 8004464:	4957      	ldr	r1, [pc, #348]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800448a:	2b00      	cmp	r3, #0
 800448c:	d02e      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004496:	d129      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	0f1b      	lsrs	r3, r3, #28
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	019a      	lsls	r2, r3, #6
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	071b      	lsls	r3, r3, #28
 80044cc:	493d      	ldr	r1, [pc, #244]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044d4:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044da:	f023 021f 	bic.w	r2, r3, #31
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4937      	ldr	r1, [pc, #220]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01d      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044f8:	4b32      	ldr	r3, [pc, #200]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fe:	0e1b      	lsrs	r3, r3, #24
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004506:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	0f1b      	lsrs	r3, r3, #28
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	019a      	lsls	r2, r3, #6
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	431a      	orrs	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	071b      	lsls	r3, r3, #28
 800452c:	4925      	ldr	r1, [pc, #148]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d011      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	019a      	lsls	r2, r3, #6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	061b      	lsls	r3, r3, #24
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	071b      	lsls	r3, r3, #28
 800455c:	4919      	ldr	r1, [pc, #100]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fd fee6 	bl	8002340 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004578:	f7fd fee2 	bl	8002340 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e0d7      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 80cd 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fd fec9 	bl	8002340 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045b2:	f7fd fec5 	bl	8002340 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d903      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0ba      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d0ed      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045fe:	4b51      	ldr	r3, [pc, #324]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	0f1b      	lsrs	r3, r3, #28
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4944      	ldr	r1, [pc, #272]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800463a:	4b42      	ldr	r3, [pc, #264]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	493d      	ldr	r1, [pc, #244]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d022      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d11d      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	0f1b      	lsrs	r3, r3, #28
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	061b      	lsls	r3, r3, #24
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4929      	ldr	r1, [pc, #164]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d028      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	0e1b      	lsrs	r3, r3, #24
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	4917      	ldr	r1, [pc, #92]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4911      	ldr	r1, [pc, #68]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004710:	f7fd fe16 	bl	8002340 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004718:	f7fd fe12 	bl	8002340 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e007      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004736:	d1ef      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e049      	b.n	80047ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f841 	bl	80047f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fa00 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e054      	b.n	80048ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d01d      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIM_Base_Start_IT+0xe0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d115      	bne.n	80048b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_TIM_Base_Start_IT+0xec>)
 8004894:	4013      	ands	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d015      	beq.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d011      	beq.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	e008      	b.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e000      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800
 80048f8:	00010007 	.word	0x00010007

080048fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0202 	mvn.w	r2, #2
 8004928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f905 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8f7 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f908 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0204 	mvn.w	r2, #4
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8db 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8cd 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8de 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8b1 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8a3 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8b4 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d122      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d11b      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0210 	mvn.w	r2, #16
 8004a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f887 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004a40:	e005      	b.n	8004a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f879 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f88a 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0201 	mvn.w	r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd f97c 	bl	8001d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b80      	cmp	r3, #128	; 0x80
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f91a 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f90d 	bl	8004cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d10e      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f838 	bl	8004b76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0220 	mvn.w	r2, #32
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8cd 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a40      	ldr	r2, [pc, #256]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d00f      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3d      	ldr	r2, [pc, #244]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a3c      	ldr	r2, [pc, #240]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <TIM_Base_SetConfig+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d108      	bne.n	8004bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d027      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d023      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2b      	ldr	r2, [pc, #172]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01f      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2a      	ldr	r2, [pc, #168]	; (8004cac <TIM_Base_SetConfig+0x120>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d017      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <TIM_Base_SetConfig+0x128>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <TIM_Base_SetConfig+0x12c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <TIM_Base_SetConfig+0x130>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <TIM_Base_SetConfig+0x134>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <TIM_Base_SetConfig+0x138>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <TIM_Base_SetConfig+0x13c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0xf8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	615a      	str	r2, [r3, #20]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	40001800 	.word	0x40001800
 8004cc4:	40001c00 	.word	0x40001c00
 8004cc8:	40002000 	.word	0x40002000

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e040      	b.n	8004d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fd f8cc 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8c0 	bl	8004ecc <UART_SetConfig>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb18 	bl	8005394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb9f 	bl	80054d8 <UART_CheckIdleState>
 8004d9a:	4603      	mov	r3, r0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	f040 8081 	bne.w	8004ec0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_UART_Transmit+0x26>
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e079      	b.n	8004ec2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x38>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e072      	b.n	8004ec2 <HAL_UART_Transmit+0x11e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2221      	movs	r2, #33	; 0x21
 8004df0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df2:	f7fd faa5 	bl	8002340 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d108      	bne.n	8004e24 <HAL_UART_Transmit+0x80>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e003      	b.n	8004e2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e34:	e02c      	b.n	8004e90 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fb7c 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e038      	b.n	8004ec2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	3302      	adds	r3, #2
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e007      	b.n	8004e7e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1cc      	bne.n	8004e36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2140      	movs	r1, #64	; 0x40
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fb49 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e005      	b.n	8004ec2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4ba6      	ldr	r3, [pc, #664]	; (8005190 <UART_SetConfig+0x2c4>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a94      	ldr	r2, [pc, #592]	; (8005194 <UART_SetConfig+0x2c8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d120      	bne.n	8004f8a <UART_SetConfig+0xbe>
 8004f48:	4b93      	ldr	r3, [pc, #588]	; (8005198 <UART_SetConfig+0x2cc>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d816      	bhi.n	8004f84 <UART_SetConfig+0xb8>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0x90>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f79 	.word	0x08004f79
 8004f64:	08004f73 	.word	0x08004f73
 8004f68:	08004f7f 	.word	0x08004f7f
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e150      	b.n	8005214 <UART_SetConfig+0x348>
 8004f72:	2302      	movs	r3, #2
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e14d      	b.n	8005214 <UART_SetConfig+0x348>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e14a      	b.n	8005214 <UART_SetConfig+0x348>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e147      	b.n	8005214 <UART_SetConfig+0x348>
 8004f84:	2310      	movs	r3, #16
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e144      	b.n	8005214 <UART_SetConfig+0x348>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a83      	ldr	r2, [pc, #524]	; (800519c <UART_SetConfig+0x2d0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d132      	bne.n	8004ffa <UART_SetConfig+0x12e>
 8004f94:	4b80      	ldr	r3, [pc, #512]	; (8005198 <UART_SetConfig+0x2cc>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b0c      	cmp	r3, #12
 8004fa0:	d828      	bhi.n	8004ff4 <UART_SetConfig+0x128>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0xdc>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08004ff5 	.word	0x08004ff5
 8004fb0:	08004ff5 	.word	0x08004ff5
 8004fb4:	08004ff5 	.word	0x08004ff5
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004ff5 	.word	0x08004ff5
 8004fc0:	08004ff5 	.word	0x08004ff5
 8004fc4:	08004ff5 	.word	0x08004ff5
 8004fc8:	08004fe3 	.word	0x08004fe3
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08004ff5 	.word	0x08004ff5
 8004fd8:	08004fef 	.word	0x08004fef
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e118      	b.n	8005214 <UART_SetConfig+0x348>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e115      	b.n	8005214 <UART_SetConfig+0x348>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e112      	b.n	8005214 <UART_SetConfig+0x348>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e10f      	b.n	8005214 <UART_SetConfig+0x348>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e10c      	b.n	8005214 <UART_SetConfig+0x348>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <UART_SetConfig+0x2d4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d120      	bne.n	8005046 <UART_SetConfig+0x17a>
 8005004:	4b64      	ldr	r3, [pc, #400]	; (8005198 <UART_SetConfig+0x2cc>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800500e:	2b30      	cmp	r3, #48	; 0x30
 8005010:	d013      	beq.n	800503a <UART_SetConfig+0x16e>
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d814      	bhi.n	8005040 <UART_SetConfig+0x174>
 8005016:	2b20      	cmp	r3, #32
 8005018:	d009      	beq.n	800502e <UART_SetConfig+0x162>
 800501a:	2b20      	cmp	r3, #32
 800501c:	d810      	bhi.n	8005040 <UART_SetConfig+0x174>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <UART_SetConfig+0x15c>
 8005022:	2b10      	cmp	r3, #16
 8005024:	d006      	beq.n	8005034 <UART_SetConfig+0x168>
 8005026:	e00b      	b.n	8005040 <UART_SetConfig+0x174>
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e0f2      	b.n	8005214 <UART_SetConfig+0x348>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e0ef      	b.n	8005214 <UART_SetConfig+0x348>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e0ec      	b.n	8005214 <UART_SetConfig+0x348>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e0e9      	b.n	8005214 <UART_SetConfig+0x348>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e0e6      	b.n	8005214 <UART_SetConfig+0x348>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a56      	ldr	r2, [pc, #344]	; (80051a4 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d120      	bne.n	8005092 <UART_SetConfig+0x1c6>
 8005050:	4b51      	ldr	r3, [pc, #324]	; (8005198 <UART_SetConfig+0x2cc>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800505a:	2bc0      	cmp	r3, #192	; 0xc0
 800505c:	d013      	beq.n	8005086 <UART_SetConfig+0x1ba>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d814      	bhi.n	800508c <UART_SetConfig+0x1c0>
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d009      	beq.n	800507a <UART_SetConfig+0x1ae>
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d810      	bhi.n	800508c <UART_SetConfig+0x1c0>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x1a8>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d006      	beq.n	8005080 <UART_SetConfig+0x1b4>
 8005072:	e00b      	b.n	800508c <UART_SetConfig+0x1c0>
 8005074:	2300      	movs	r3, #0
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e0cc      	b.n	8005214 <UART_SetConfig+0x348>
 800507a:	2302      	movs	r3, #2
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e0c9      	b.n	8005214 <UART_SetConfig+0x348>
 8005080:	2304      	movs	r3, #4
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e0c6      	b.n	8005214 <UART_SetConfig+0x348>
 8005086:	2308      	movs	r3, #8
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e0c3      	b.n	8005214 <UART_SetConfig+0x348>
 800508c:	2310      	movs	r3, #16
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e0c0      	b.n	8005214 <UART_SetConfig+0x348>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a44      	ldr	r2, [pc, #272]	; (80051a8 <UART_SetConfig+0x2dc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d125      	bne.n	80050e8 <UART_SetConfig+0x21c>
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <UART_SetConfig+0x2cc>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050aa:	d017      	beq.n	80050dc <UART_SetConfig+0x210>
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d817      	bhi.n	80050e2 <UART_SetConfig+0x216>
 80050b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b6:	d00b      	beq.n	80050d0 <UART_SetConfig+0x204>
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050bc:	d811      	bhi.n	80050e2 <UART_SetConfig+0x216>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <UART_SetConfig+0x1fe>
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d006      	beq.n	80050d6 <UART_SetConfig+0x20a>
 80050c8:	e00b      	b.n	80050e2 <UART_SetConfig+0x216>
 80050ca:	2300      	movs	r3, #0
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e0a1      	b.n	8005214 <UART_SetConfig+0x348>
 80050d0:	2302      	movs	r3, #2
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e09e      	b.n	8005214 <UART_SetConfig+0x348>
 80050d6:	2304      	movs	r3, #4
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e09b      	b.n	8005214 <UART_SetConfig+0x348>
 80050dc:	2308      	movs	r3, #8
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e098      	b.n	8005214 <UART_SetConfig+0x348>
 80050e2:	2310      	movs	r3, #16
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e095      	b.n	8005214 <UART_SetConfig+0x348>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <UART_SetConfig+0x2e0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d125      	bne.n	800513e <UART_SetConfig+0x272>
 80050f2:	4b29      	ldr	r3, [pc, #164]	; (8005198 <UART_SetConfig+0x2cc>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005100:	d017      	beq.n	8005132 <UART_SetConfig+0x266>
 8005102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005106:	d817      	bhi.n	8005138 <UART_SetConfig+0x26c>
 8005108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510c:	d00b      	beq.n	8005126 <UART_SetConfig+0x25a>
 800510e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005112:	d811      	bhi.n	8005138 <UART_SetConfig+0x26c>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <UART_SetConfig+0x254>
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	d006      	beq.n	800512c <UART_SetConfig+0x260>
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0x26c>
 8005120:	2301      	movs	r3, #1
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e076      	b.n	8005214 <UART_SetConfig+0x348>
 8005126:	2302      	movs	r3, #2
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e073      	b.n	8005214 <UART_SetConfig+0x348>
 800512c:	2304      	movs	r3, #4
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e070      	b.n	8005214 <UART_SetConfig+0x348>
 8005132:	2308      	movs	r3, #8
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e06d      	b.n	8005214 <UART_SetConfig+0x348>
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e06a      	b.n	8005214 <UART_SetConfig+0x348>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <UART_SetConfig+0x2e4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d138      	bne.n	80051ba <UART_SetConfig+0x2ee>
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <UART_SetConfig+0x2cc>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005156:	d017      	beq.n	8005188 <UART_SetConfig+0x2bc>
 8005158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800515c:	d82a      	bhi.n	80051b4 <UART_SetConfig+0x2e8>
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d00b      	beq.n	800517c <UART_SetConfig+0x2b0>
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005168:	d824      	bhi.n	80051b4 <UART_SetConfig+0x2e8>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <UART_SetConfig+0x2aa>
 800516e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005172:	d006      	beq.n	8005182 <UART_SetConfig+0x2b6>
 8005174:	e01e      	b.n	80051b4 <UART_SetConfig+0x2e8>
 8005176:	2300      	movs	r3, #0
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e04b      	b.n	8005214 <UART_SetConfig+0x348>
 800517c:	2302      	movs	r3, #2
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e048      	b.n	8005214 <UART_SetConfig+0x348>
 8005182:	2304      	movs	r3, #4
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e045      	b.n	8005214 <UART_SetConfig+0x348>
 8005188:	2308      	movs	r3, #8
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e042      	b.n	8005214 <UART_SetConfig+0x348>
 800518e:	bf00      	nop
 8005190:	efff69f3 	.word	0xefff69f3
 8005194:	40011000 	.word	0x40011000
 8005198:	40023800 	.word	0x40023800
 800519c:	40004400 	.word	0x40004400
 80051a0:	40004800 	.word	0x40004800
 80051a4:	40004c00 	.word	0x40004c00
 80051a8:	40005000 	.word	0x40005000
 80051ac:	40011400 	.word	0x40011400
 80051b0:	40007800 	.word	0x40007800
 80051b4:	2310      	movs	r3, #16
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e02c      	b.n	8005214 <UART_SetConfig+0x348>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a72      	ldr	r2, [pc, #456]	; (8005388 <UART_SetConfig+0x4bc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d125      	bne.n	8005210 <UART_SetConfig+0x344>
 80051c4:	4b71      	ldr	r3, [pc, #452]	; (800538c <UART_SetConfig+0x4c0>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d2:	d017      	beq.n	8005204 <UART_SetConfig+0x338>
 80051d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051d8:	d817      	bhi.n	800520a <UART_SetConfig+0x33e>
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051de:	d00b      	beq.n	80051f8 <UART_SetConfig+0x32c>
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e4:	d811      	bhi.n	800520a <UART_SetConfig+0x33e>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <UART_SetConfig+0x326>
 80051ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ee:	d006      	beq.n	80051fe <UART_SetConfig+0x332>
 80051f0:	e00b      	b.n	800520a <UART_SetConfig+0x33e>
 80051f2:	2300      	movs	r3, #0
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e00d      	b.n	8005214 <UART_SetConfig+0x348>
 80051f8:	2302      	movs	r3, #2
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e00a      	b.n	8005214 <UART_SetConfig+0x348>
 80051fe:	2304      	movs	r3, #4
 8005200:	77fb      	strb	r3, [r7, #31]
 8005202:	e007      	b.n	8005214 <UART_SetConfig+0x348>
 8005204:	2308      	movs	r3, #8
 8005206:	77fb      	strb	r3, [r7, #31]
 8005208:	e004      	b.n	8005214 <UART_SetConfig+0x348>
 800520a:	2310      	movs	r3, #16
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e001      	b.n	8005214 <UART_SetConfig+0x348>
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521c:	d15c      	bne.n	80052d8 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d828      	bhi.n	8005276 <UART_SetConfig+0x3aa>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0x360>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005251 	.word	0x08005251
 8005230:	08005259 	.word	0x08005259
 8005234:	08005261 	.word	0x08005261
 8005238:	08005277 	.word	0x08005277
 800523c:	08005267 	.word	0x08005267
 8005240:	08005277 	.word	0x08005277
 8005244:	08005277 	.word	0x08005277
 8005248:	08005277 	.word	0x08005277
 800524c:	0800526f 	.word	0x0800526f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7fe fe30 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005254:	61b8      	str	r0, [r7, #24]
        break;
 8005256:	e013      	b.n	8005280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005258:	f7fe fe40 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 800525c:	61b8      	str	r0, [r7, #24]
        break;
 800525e:	e00f      	b.n	8005280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <UART_SetConfig+0x4c4>)
 8005262:	61bb      	str	r3, [r7, #24]
        break;
 8005264:	e00c      	b.n	8005280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005266:	f7fe fd53 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 800526a:	61b8      	str	r0, [r7, #24]
        break;
 800526c:	e008      	b.n	8005280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005272:	61bb      	str	r3, [r7, #24]
        break;
 8005274:	e004      	b.n	8005280 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	77bb      	strb	r3, [r7, #30]
        break;
 800527e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d074      	beq.n	8005370 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	005a      	lsls	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d916      	bls.n	80052d2 <UART_SetConfig+0x406>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052aa:	d212      	bcs.n	80052d2 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f023 030f 	bic.w	r3, r3, #15
 80052b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	89fa      	ldrh	r2, [r7, #14]
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	e04e      	b.n	8005370 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77bb      	strb	r3, [r7, #30]
 80052d6:	e04b      	b.n	8005370 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052d8:	7ffb      	ldrb	r3, [r7, #31]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d827      	bhi.n	800532e <UART_SetConfig+0x462>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x418>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005319 	.word	0x08005319
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	0800531f 	.word	0x0800531f
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe fdd4 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 800530c:	61b8      	str	r0, [r7, #24]
        break;
 800530e:	e013      	b.n	8005338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7fe fde4 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8005314:	61b8      	str	r0, [r7, #24]
        break;
 8005316:	e00f      	b.n	8005338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <UART_SetConfig+0x4c4>)
 800531a:	61bb      	str	r3, [r7, #24]
        break;
 800531c:	e00c      	b.n	8005338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7fe fcf7 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8005322:	61b8      	str	r0, [r7, #24]
        break;
 8005324:	e008      	b.n	8005338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532a:	61bb      	str	r3, [r7, #24]
        break;
 800532c:	e004      	b.n	8005338 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	77bb      	strb	r3, [r7, #30]
        break;
 8005336:	bf00      	nop
    }

    if (pclk != 0U)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	085a      	lsrs	r2, r3, #1
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	b29b      	uxth	r3, r3
 8005352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d908      	bls.n	800536c <UART_SetConfig+0x4a0>
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d204      	bcs.n	800536c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	e001      	b.n	8005370 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800537c:	7fbb      	ldrb	r3, [r7, #30]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40007c00 	.word	0x40007c00
 800538c:	40023800 	.word	0x40023800
 8005390:	00f42400 	.word	0x00f42400

08005394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01a      	beq.n	80054aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005492:	d10a      	bne.n	80054aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af02      	add	r7, sp, #8
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e8:	f7fc ff2a 	bl	8002340 <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d10e      	bne.n	800551a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f817 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e00d      	b.n	8005536 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554e:	e05e      	b.n	800560e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d05a      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005558:	f7fc fef2 	bl	8002340 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <UART_WaitOnFlagUntilTimeout+0x30>
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11b      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800557c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e043      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02c      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c2:	d124      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e00f      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	429a      	cmp	r2, r3
 800561c:	bf0c      	ite	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	2300      	movne	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	429a      	cmp	r2, r3
 800562a:	d091      	beq.n	8005550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	; (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000038 	.word	0x20000038

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	4d0d      	ldr	r5, [pc, #52]	; (800567c <__libc_init_array+0x38>)
 8005648:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <__libc_init_array+0x3c>)
 800564a:	1b64      	subs	r4, r4, r5
 800564c:	10a4      	asrs	r4, r4, #2
 800564e:	2600      	movs	r6, #0
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	4d0b      	ldr	r5, [pc, #44]	; (8005684 <__libc_init_array+0x40>)
 8005656:	4c0c      	ldr	r4, [pc, #48]	; (8005688 <__libc_init_array+0x44>)
 8005658:	f002 ff02 	bl	8008460 <_init>
 800565c:	1b64      	subs	r4, r4, r5
 800565e:	10a4      	asrs	r4, r4, #2
 8005660:	2600      	movs	r6, #0
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	0800889c 	.word	0x0800889c
 8005680:	0800889c 	.word	0x0800889c
 8005684:	0800889c 	.word	0x0800889c
 8005688:	080088a0 	.word	0x080088a0

0800568c <memset>:
 800568c:	4402      	add	r2, r0
 800568e:	4603      	mov	r3, r0
 8005690:	4293      	cmp	r3, r2
 8005692:	d100      	bne.n	8005696 <memset+0xa>
 8005694:	4770      	bx	lr
 8005696:	f803 1b01 	strb.w	r1, [r3], #1
 800569a:	e7f9      	b.n	8005690 <memset+0x4>

0800569c <__cvt>:
 800569c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	ec55 4b10 	vmov	r4, r5, d0
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	460e      	mov	r6, r1
 80056a8:	4619      	mov	r1, r3
 80056aa:	462b      	mov	r3, r5
 80056ac:	bfbb      	ittet	lt
 80056ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056b2:	461d      	movlt	r5, r3
 80056b4:	2300      	movge	r3, #0
 80056b6:	232d      	movlt	r3, #45	; 0x2d
 80056b8:	700b      	strb	r3, [r1, #0]
 80056ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056c0:	4691      	mov	r9, r2
 80056c2:	f023 0820 	bic.w	r8, r3, #32
 80056c6:	bfbc      	itt	lt
 80056c8:	4622      	movlt	r2, r4
 80056ca:	4614      	movlt	r4, r2
 80056cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056d0:	d005      	beq.n	80056de <__cvt+0x42>
 80056d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056d6:	d100      	bne.n	80056da <__cvt+0x3e>
 80056d8:	3601      	adds	r6, #1
 80056da:	2102      	movs	r1, #2
 80056dc:	e000      	b.n	80056e0 <__cvt+0x44>
 80056de:	2103      	movs	r1, #3
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	ab02      	add	r3, sp, #8
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	ec45 4b10 	vmov	d0, r4, r5
 80056ec:	4653      	mov	r3, sl
 80056ee:	4632      	mov	r2, r6
 80056f0:	f000 fcea 	bl	80060c8 <_dtoa_r>
 80056f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056f8:	4607      	mov	r7, r0
 80056fa:	d102      	bne.n	8005702 <__cvt+0x66>
 80056fc:	f019 0f01 	tst.w	r9, #1
 8005700:	d022      	beq.n	8005748 <__cvt+0xac>
 8005702:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005706:	eb07 0906 	add.w	r9, r7, r6
 800570a:	d110      	bne.n	800572e <__cvt+0x92>
 800570c:	783b      	ldrb	r3, [r7, #0]
 800570e:	2b30      	cmp	r3, #48	; 0x30
 8005710:	d10a      	bne.n	8005728 <__cvt+0x8c>
 8005712:	2200      	movs	r2, #0
 8005714:	2300      	movs	r3, #0
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	f7fb f9f5 	bl	8000b08 <__aeabi_dcmpeq>
 800571e:	b918      	cbnz	r0, 8005728 <__cvt+0x8c>
 8005720:	f1c6 0601 	rsb	r6, r6, #1
 8005724:	f8ca 6000 	str.w	r6, [sl]
 8005728:	f8da 3000 	ldr.w	r3, [sl]
 800572c:	4499      	add	r9, r3
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fb f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800573a:	b108      	cbz	r0, 8005740 <__cvt+0xa4>
 800573c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005740:	2230      	movs	r2, #48	; 0x30
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	454b      	cmp	r3, r9
 8005746:	d307      	bcc.n	8005758 <__cvt+0xbc>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800574c:	1bdb      	subs	r3, r3, r7
 800574e:	4638      	mov	r0, r7
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	b004      	add	sp, #16
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	9103      	str	r1, [sp, #12]
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e7f0      	b.n	8005742 <__cvt+0xa6>

08005760 <__exponent>:
 8005760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005762:	4603      	mov	r3, r0
 8005764:	2900      	cmp	r1, #0
 8005766:	bfb8      	it	lt
 8005768:	4249      	neglt	r1, r1
 800576a:	f803 2b02 	strb.w	r2, [r3], #2
 800576e:	bfb4      	ite	lt
 8005770:	222d      	movlt	r2, #45	; 0x2d
 8005772:	222b      	movge	r2, #43	; 0x2b
 8005774:	2909      	cmp	r1, #9
 8005776:	7042      	strb	r2, [r0, #1]
 8005778:	dd2a      	ble.n	80057d0 <__exponent+0x70>
 800577a:	f10d 0407 	add.w	r4, sp, #7
 800577e:	46a4      	mov	ip, r4
 8005780:	270a      	movs	r7, #10
 8005782:	46a6      	mov	lr, r4
 8005784:	460a      	mov	r2, r1
 8005786:	fb91 f6f7 	sdiv	r6, r1, r7
 800578a:	fb07 1516 	mls	r5, r7, r6, r1
 800578e:	3530      	adds	r5, #48	; 0x30
 8005790:	2a63      	cmp	r2, #99	; 0x63
 8005792:	f104 34ff 	add.w	r4, r4, #4294967295
 8005796:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800579a:	4631      	mov	r1, r6
 800579c:	dcf1      	bgt.n	8005782 <__exponent+0x22>
 800579e:	3130      	adds	r1, #48	; 0x30
 80057a0:	f1ae 0502 	sub.w	r5, lr, #2
 80057a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057a8:	1c44      	adds	r4, r0, #1
 80057aa:	4629      	mov	r1, r5
 80057ac:	4561      	cmp	r1, ip
 80057ae:	d30a      	bcc.n	80057c6 <__exponent+0x66>
 80057b0:	f10d 0209 	add.w	r2, sp, #9
 80057b4:	eba2 020e 	sub.w	r2, r2, lr
 80057b8:	4565      	cmp	r5, ip
 80057ba:	bf88      	it	hi
 80057bc:	2200      	movhi	r2, #0
 80057be:	4413      	add	r3, r2
 80057c0:	1a18      	subs	r0, r3, r0
 80057c2:	b003      	add	sp, #12
 80057c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057ce:	e7ed      	b.n	80057ac <__exponent+0x4c>
 80057d0:	2330      	movs	r3, #48	; 0x30
 80057d2:	3130      	adds	r1, #48	; 0x30
 80057d4:	7083      	strb	r3, [r0, #2]
 80057d6:	70c1      	strb	r1, [r0, #3]
 80057d8:	1d03      	adds	r3, r0, #4
 80057da:	e7f1      	b.n	80057c0 <__exponent+0x60>

080057dc <_printf_float>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	ed2d 8b02 	vpush	{d8}
 80057e4:	b08d      	sub	sp, #52	; 0x34
 80057e6:	460c      	mov	r4, r1
 80057e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057ec:	4616      	mov	r6, r2
 80057ee:	461f      	mov	r7, r3
 80057f0:	4605      	mov	r5, r0
 80057f2:	f001 fa57 	bl	8006ca4 <_localeconv_r>
 80057f6:	f8d0 a000 	ldr.w	sl, [r0]
 80057fa:	4650      	mov	r0, sl
 80057fc:	f7fa fd08 	bl	8000210 <strlen>
 8005800:	2300      	movs	r3, #0
 8005802:	930a      	str	r3, [sp, #40]	; 0x28
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	9305      	str	r3, [sp, #20]
 8005808:	f8d8 3000 	ldr.w	r3, [r8]
 800580c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005810:	3307      	adds	r3, #7
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	f103 0208 	add.w	r2, r3, #8
 800581a:	f8c8 2000 	str.w	r2, [r8]
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005826:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800582a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	f8cd 8018 	str.w	r8, [sp, #24]
 8005834:	ee08 0a10 	vmov	s16, r0
 8005838:	4b9f      	ldr	r3, [pc, #636]	; (8005ab8 <_printf_float+0x2dc>)
 800583a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	f7fb f993 	bl	8000b6c <__aeabi_dcmpun>
 8005846:	bb88      	cbnz	r0, 80058ac <_printf_float+0xd0>
 8005848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584c:	4b9a      	ldr	r3, [pc, #616]	; (8005ab8 <_printf_float+0x2dc>)
 800584e:	f04f 32ff 	mov.w	r2, #4294967295
 8005852:	f7fb f96d 	bl	8000b30 <__aeabi_dcmple>
 8005856:	bb48      	cbnz	r0, 80058ac <_printf_float+0xd0>
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	f7fb f95c 	bl	8000b1c <__aeabi_dcmplt>
 8005864:	b110      	cbz	r0, 800586c <_printf_float+0x90>
 8005866:	232d      	movs	r3, #45	; 0x2d
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	4b93      	ldr	r3, [pc, #588]	; (8005abc <_printf_float+0x2e0>)
 800586e:	4894      	ldr	r0, [pc, #592]	; (8005ac0 <_printf_float+0x2e4>)
 8005870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005874:	bf94      	ite	ls
 8005876:	4698      	movls	r8, r3
 8005878:	4680      	movhi	r8, r0
 800587a:	2303      	movs	r3, #3
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	9b05      	ldr	r3, [sp, #20]
 8005880:	f023 0204 	bic.w	r2, r3, #4
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	f04f 0900 	mov.w	r9, #0
 800588a:	9700      	str	r7, [sp, #0]
 800588c:	4633      	mov	r3, r6
 800588e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f000 f9d8 	bl	8005c48 <_printf_common>
 8005898:	3001      	adds	r0, #1
 800589a:	f040 8090 	bne.w	80059be <_printf_float+0x1e2>
 800589e:	f04f 30ff 	mov.w	r0, #4294967295
 80058a2:	b00d      	add	sp, #52	; 0x34
 80058a4:	ecbd 8b02 	vpop	{d8}
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fb f95a 	bl	8000b6c <__aeabi_dcmpun>
 80058b8:	b140      	cbz	r0, 80058cc <_printf_float+0xf0>
 80058ba:	464b      	mov	r3, r9
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfbc      	itt	lt
 80058c0:	232d      	movlt	r3, #45	; 0x2d
 80058c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058c6:	487f      	ldr	r0, [pc, #508]	; (8005ac4 <_printf_float+0x2e8>)
 80058c8:	4b7f      	ldr	r3, [pc, #508]	; (8005ac8 <_printf_float+0x2ec>)
 80058ca:	e7d1      	b.n	8005870 <_printf_float+0x94>
 80058cc:	6863      	ldr	r3, [r4, #4]
 80058ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058d2:	9206      	str	r2, [sp, #24]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	d13f      	bne.n	8005958 <_printf_float+0x17c>
 80058d8:	2306      	movs	r3, #6
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	9b05      	ldr	r3, [sp, #20]
 80058de:	6861      	ldr	r1, [r4, #4]
 80058e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058e4:	2300      	movs	r3, #0
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	ab0a      	add	r3, sp, #40	; 0x28
 80058ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058ee:	ab09      	add	r3, sp, #36	; 0x24
 80058f0:	ec49 8b10 	vmov	d0, r8, r9
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058fc:	4628      	mov	r0, r5
 80058fe:	f7ff fecd 	bl	800569c <__cvt>
 8005902:	9b06      	ldr	r3, [sp, #24]
 8005904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005906:	2b47      	cmp	r3, #71	; 0x47
 8005908:	4680      	mov	r8, r0
 800590a:	d108      	bne.n	800591e <_printf_float+0x142>
 800590c:	1cc8      	adds	r0, r1, #3
 800590e:	db02      	blt.n	8005916 <_printf_float+0x13a>
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	4299      	cmp	r1, r3
 8005914:	dd41      	ble.n	800599a <_printf_float+0x1be>
 8005916:	f1ab 0b02 	sub.w	fp, fp, #2
 800591a:	fa5f fb8b 	uxtb.w	fp, fp
 800591e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005922:	d820      	bhi.n	8005966 <_printf_float+0x18a>
 8005924:	3901      	subs	r1, #1
 8005926:	465a      	mov	r2, fp
 8005928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800592c:	9109      	str	r1, [sp, #36]	; 0x24
 800592e:	f7ff ff17 	bl	8005760 <__exponent>
 8005932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005934:	1813      	adds	r3, r2, r0
 8005936:	2a01      	cmp	r2, #1
 8005938:	4681      	mov	r9, r0
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	dc02      	bgt.n	8005944 <_printf_float+0x168>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d2      	lsls	r2, r2, #31
 8005942:	d501      	bpl.n	8005948 <_printf_float+0x16c>
 8005944:	3301      	adds	r3, #1
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800594c:	2b00      	cmp	r3, #0
 800594e:	d09c      	beq.n	800588a <_printf_float+0xae>
 8005950:	232d      	movs	r3, #45	; 0x2d
 8005952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005956:	e798      	b.n	800588a <_printf_float+0xae>
 8005958:	9a06      	ldr	r2, [sp, #24]
 800595a:	2a47      	cmp	r2, #71	; 0x47
 800595c:	d1be      	bne.n	80058dc <_printf_float+0x100>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1bc      	bne.n	80058dc <_printf_float+0x100>
 8005962:	2301      	movs	r3, #1
 8005964:	e7b9      	b.n	80058da <_printf_float+0xfe>
 8005966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800596a:	d118      	bne.n	800599e <_printf_float+0x1c2>
 800596c:	2900      	cmp	r1, #0
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	dd0b      	ble.n	800598a <_printf_float+0x1ae>
 8005972:	6121      	str	r1, [r4, #16]
 8005974:	b913      	cbnz	r3, 800597c <_printf_float+0x1a0>
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	07d0      	lsls	r0, r2, #31
 800597a:	d502      	bpl.n	8005982 <_printf_float+0x1a6>
 800597c:	3301      	adds	r3, #1
 800597e:	440b      	add	r3, r1
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	65a1      	str	r1, [r4, #88]	; 0x58
 8005984:	f04f 0900 	mov.w	r9, #0
 8005988:	e7de      	b.n	8005948 <_printf_float+0x16c>
 800598a:	b913      	cbnz	r3, 8005992 <_printf_float+0x1b6>
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	07d2      	lsls	r2, r2, #31
 8005990:	d501      	bpl.n	8005996 <_printf_float+0x1ba>
 8005992:	3302      	adds	r3, #2
 8005994:	e7f4      	b.n	8005980 <_printf_float+0x1a4>
 8005996:	2301      	movs	r3, #1
 8005998:	e7f2      	b.n	8005980 <_printf_float+0x1a4>
 800599a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	4299      	cmp	r1, r3
 80059a2:	db05      	blt.n	80059b0 <_printf_float+0x1d4>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	6121      	str	r1, [r4, #16]
 80059a8:	07d8      	lsls	r0, r3, #31
 80059aa:	d5ea      	bpl.n	8005982 <_printf_float+0x1a6>
 80059ac:	1c4b      	adds	r3, r1, #1
 80059ae:	e7e7      	b.n	8005980 <_printf_float+0x1a4>
 80059b0:	2900      	cmp	r1, #0
 80059b2:	bfd4      	ite	le
 80059b4:	f1c1 0202 	rsble	r2, r1, #2
 80059b8:	2201      	movgt	r2, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	e7e0      	b.n	8005980 <_printf_float+0x1a4>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	055a      	lsls	r2, r3, #21
 80059c2:	d407      	bmi.n	80059d4 <_printf_float+0x1f8>
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	4642      	mov	r2, r8
 80059c8:	4631      	mov	r1, r6
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	3001      	adds	r0, #1
 80059d0:	d12c      	bne.n	8005a2c <_printf_float+0x250>
 80059d2:	e764      	b.n	800589e <_printf_float+0xc2>
 80059d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059d8:	f240 80e0 	bls.w	8005b9c <_printf_float+0x3c0>
 80059dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	f7fb f890 	bl	8000b08 <__aeabi_dcmpeq>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d034      	beq.n	8005a56 <_printf_float+0x27a>
 80059ec:	4a37      	ldr	r2, [pc, #220]	; (8005acc <_printf_float+0x2f0>)
 80059ee:	2301      	movs	r3, #1
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	f43f af51 	beq.w	800589e <_printf_float+0xc2>
 80059fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a00:	429a      	cmp	r2, r3
 8005a02:	db02      	blt.n	8005a0a <_printf_float+0x22e>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07d8      	lsls	r0, r3, #31
 8005a08:	d510      	bpl.n	8005a2c <_printf_float+0x250>
 8005a0a:	ee18 3a10 	vmov	r3, s16
 8005a0e:	4652      	mov	r2, sl
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af41 	beq.w	800589e <_printf_float+0xc2>
 8005a1c:	f04f 0800 	mov.w	r8, #0
 8005a20:	f104 091a 	add.w	r9, r4, #26
 8005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	dc09      	bgt.n	8005a40 <_printf_float+0x264>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	079b      	lsls	r3, r3, #30
 8005a30:	f100 8105 	bmi.w	8005c3e <_printf_float+0x462>
 8005a34:	68e0      	ldr	r0, [r4, #12]
 8005a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a38:	4298      	cmp	r0, r3
 8005a3a:	bfb8      	it	lt
 8005a3c:	4618      	movlt	r0, r3
 8005a3e:	e730      	b.n	80058a2 <_printf_float+0xc6>
 8005a40:	2301      	movs	r3, #1
 8005a42:	464a      	mov	r2, r9
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af27 	beq.w	800589e <_printf_float+0xc2>
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	e7e6      	b.n	8005a24 <_printf_float+0x248>
 8005a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc39      	bgt.n	8005ad0 <_printf_float+0x2f4>
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <_printf_float+0x2f0>)
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f af19 	beq.w	800589e <_printf_float+0xc2>
 8005a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d102      	bne.n	8005a7a <_printf_float+0x29e>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d5d8      	bpl.n	8005a2c <_printf_float+0x250>
 8005a7a:	ee18 3a10 	vmov	r3, s16
 8005a7e:	4652      	mov	r2, sl
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b8      	blx	r7
 8005a86:	3001      	adds	r0, #1
 8005a88:	f43f af09 	beq.w	800589e <_printf_float+0xc2>
 8005a8c:	f04f 0900 	mov.w	r9, #0
 8005a90:	f104 0a1a 	add.w	sl, r4, #26
 8005a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a96:	425b      	negs	r3, r3
 8005a98:	454b      	cmp	r3, r9
 8005a9a:	dc01      	bgt.n	8005aa0 <_printf_float+0x2c4>
 8005a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9e:	e792      	b.n	80059c6 <_printf_float+0x1ea>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4652      	mov	r2, sl
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f43f aef7 	beq.w	800589e <_printf_float+0xc2>
 8005ab0:	f109 0901 	add.w	r9, r9, #1
 8005ab4:	e7ee      	b.n	8005a94 <_printf_float+0x2b8>
 8005ab6:	bf00      	nop
 8005ab8:	7fefffff 	.word	0x7fefffff
 8005abc:	080084bc 	.word	0x080084bc
 8005ac0:	080084c0 	.word	0x080084c0
 8005ac4:	080084c8 	.word	0x080084c8
 8005ac8:	080084c4 	.word	0x080084c4
 8005acc:	080084cc 	.word	0x080084cc
 8005ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bfa8      	it	ge
 8005ad8:	461a      	movge	r2, r3
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	4691      	mov	r9, r2
 8005ade:	dc37      	bgt.n	8005b50 <_printf_float+0x374>
 8005ae0:	f04f 0b00 	mov.w	fp, #0
 8005ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae8:	f104 021a 	add.w	r2, r4, #26
 8005aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	eba3 0309 	sub.w	r3, r3, r9
 8005af4:	455b      	cmp	r3, fp
 8005af6:	dc33      	bgt.n	8005b60 <_printf_float+0x384>
 8005af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005afc:	429a      	cmp	r2, r3
 8005afe:	db3b      	blt.n	8005b78 <_printf_float+0x39c>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	07da      	lsls	r2, r3, #31
 8005b04:	d438      	bmi.n	8005b78 <_printf_float+0x39c>
 8005b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b08:	9a05      	ldr	r2, [sp, #20]
 8005b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b0c:	1a9a      	subs	r2, r3, r2
 8005b0e:	eba3 0901 	sub.w	r9, r3, r1
 8005b12:	4591      	cmp	r9, r2
 8005b14:	bfa8      	it	ge
 8005b16:	4691      	movge	r9, r2
 8005b18:	f1b9 0f00 	cmp.w	r9, #0
 8005b1c:	dc35      	bgt.n	8005b8a <_printf_float+0x3ae>
 8005b1e:	f04f 0800 	mov.w	r8, #0
 8005b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b26:	f104 0a1a 	add.w	sl, r4, #26
 8005b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	eba3 0309 	sub.w	r3, r3, r9
 8005b34:	4543      	cmp	r3, r8
 8005b36:	f77f af79 	ble.w	8005a2c <_printf_float+0x250>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f aeaa 	beq.w	800589e <_printf_float+0xc2>
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	e7ec      	b.n	8005b2a <_printf_float+0x34e>
 8005b50:	4613      	mov	r3, r2
 8005b52:	4631      	mov	r1, r6
 8005b54:	4642      	mov	r2, r8
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d1c0      	bne.n	8005ae0 <_printf_float+0x304>
 8005b5e:	e69e      	b.n	800589e <_printf_float+0xc2>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	9205      	str	r2, [sp, #20]
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f ae97 	beq.w	800589e <_printf_float+0xc2>
 8005b70:	9a05      	ldr	r2, [sp, #20]
 8005b72:	f10b 0b01 	add.w	fp, fp, #1
 8005b76:	e7b9      	b.n	8005aec <_printf_float+0x310>
 8005b78:	ee18 3a10 	vmov	r3, s16
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1be      	bne.n	8005b06 <_printf_float+0x32a>
 8005b88:	e689      	b.n	800589e <_printf_float+0xc2>
 8005b8a:	9a05      	ldr	r2, [sp, #20]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4442      	add	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1c1      	bne.n	8005b1e <_printf_float+0x342>
 8005b9a:	e680      	b.n	800589e <_printf_float+0xc2>
 8005b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9e:	2a01      	cmp	r2, #1
 8005ba0:	dc01      	bgt.n	8005ba6 <_printf_float+0x3ca>
 8005ba2:	07db      	lsls	r3, r3, #31
 8005ba4:	d538      	bpl.n	8005c18 <_printf_float+0x43c>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4642      	mov	r2, r8
 8005baa:	4631      	mov	r1, r6
 8005bac:	4628      	mov	r0, r5
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f43f ae74 	beq.w	800589e <_printf_float+0xc2>
 8005bb6:	ee18 3a10 	vmov	r3, s16
 8005bba:	4652      	mov	r2, sl
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b8      	blx	r7
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f43f ae6b 	beq.w	800589e <_printf_float+0xc2>
 8005bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f7fa ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_printf_float+0x432>
 8005bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd8:	f108 0201 	add.w	r2, r8, #1
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	d10e      	bne.n	8005c06 <_printf_float+0x42a>
 8005be8:	e659      	b.n	800589e <_printf_float+0xc2>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4652      	mov	r2, sl
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	f43f ae52 	beq.w	800589e <_printf_float+0xc2>
 8005bfa:	f108 0801 	add.w	r8, r8, #1
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4543      	cmp	r3, r8
 8005c04:	dcf1      	bgt.n	8005bea <_printf_float+0x40e>
 8005c06:	464b      	mov	r3, r9
 8005c08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c0c:	e6dc      	b.n	80059c8 <_printf_float+0x1ec>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	f104 0a1a 	add.w	sl, r4, #26
 8005c16:	e7f2      	b.n	8005bfe <_printf_float+0x422>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	e7df      	b.n	8005bde <_printf_float+0x402>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae38 	beq.w	800589e <_printf_float+0xc2>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x442>
 8005c3c:	e6fa      	b.n	8005a34 <_printf_float+0x258>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x456>

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4699      	mov	r9, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c94:	1e13      	subs	r3, r2, #0
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	68e5      	ldr	r5, [r4, #12]
 8005cb2:	6832      	ldr	r2, [r6, #0]
 8005cb4:	f003 0306 	and.w	r3, r3, #6
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	bf08      	it	eq
 8005cbc:	1aad      	subeq	r5, r5, r2
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c0      	blx	r8
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	; 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4649      	mov	r1, r9
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	7e0f      	ldrb	r7, [r1, #24]
 8005d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d2c:	2f78      	cmp	r7, #120	; 0x78
 8005d2e:	4691      	mov	r9, r2
 8005d30:	4680      	mov	r8, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	469a      	mov	sl, r3
 8005d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	; 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d8 	beq.w	8005ef6 <_printf_i+0x1d2>
 8005d46:	2f58      	cmp	r7, #88	; 0x58
 8005d48:	f000 80a3 	beq.w	8005e92 <_printf_i+0x16e>
 8005d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a101      	add	r1, pc, #4	; (adr r1, 8005d64 <_printf_i+0x40>)
 8005d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005edd 	.word	0x08005edd
 8005d94:	08005e01 	.word	0x08005e01
 8005d98:	08005ebf 	.word	0x08005ebf
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005eff 	.word	0x08005eff
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005e01 	.word	0x08005e01
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005ec7 	.word	0x08005ec7
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	602a      	str	r2, [r5, #0]
 8005dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0a3      	b.n	8005f18 <_printf_i+0x1f4>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	6829      	ldr	r1, [r5, #0]
 8005dd4:	0606      	lsls	r6, r0, #24
 8005dd6:	f101 0304 	add.w	r3, r1, #4
 8005dda:	d50a      	bpl.n	8005df2 <_printf_i+0xce>
 8005ddc:	680e      	ldr	r6, [r1, #0]
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	da03      	bge.n	8005dec <_printf_i+0xc8>
 8005de4:	232d      	movs	r3, #45	; 0x2d
 8005de6:	4276      	negs	r6, r6
 8005de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dec:	485e      	ldr	r0, [pc, #376]	; (8005f68 <_printf_i+0x244>)
 8005dee:	230a      	movs	r3, #10
 8005df0:	e019      	b.n	8005e26 <_printf_i+0x102>
 8005df2:	680e      	ldr	r6, [r1, #0]
 8005df4:	602b      	str	r3, [r5, #0]
 8005df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dfa:	bf18      	it	ne
 8005dfc:	b236      	sxthne	r6, r6
 8005dfe:	e7ef      	b.n	8005de0 <_printf_i+0xbc>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	6820      	ldr	r0, [r4, #0]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	6029      	str	r1, [r5, #0]
 8005e08:	0601      	lsls	r1, r0, #24
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0xec>
 8005e0c:	681e      	ldr	r6, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <_printf_i+0xf2>
 8005e10:	0646      	lsls	r6, r0, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0xe8>
 8005e14:	881e      	ldrh	r6, [r3, #0]
 8005e16:	4854      	ldr	r0, [pc, #336]	; (8005f68 <_printf_i+0x244>)
 8005e18:	2f6f      	cmp	r7, #111	; 0x6f
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2308      	moveq	r3, #8
 8005e1e:	230a      	movne	r3, #10
 8005e20:	2100      	movs	r1, #0
 8005e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e26:	6865      	ldr	r5, [r4, #4]
 8005e28:	60a5      	str	r5, [r4, #8]
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	bfa2      	ittt	ge
 8005e2e:	6821      	ldrge	r1, [r4, #0]
 8005e30:	f021 0104 	bicge.w	r1, r1, #4
 8005e34:	6021      	strge	r1, [r4, #0]
 8005e36:	b90e      	cbnz	r6, 8005e3c <_printf_i+0x118>
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	d04d      	beq.n	8005ed8 <_printf_i+0x1b4>
 8005e3c:	4615      	mov	r5, r2
 8005e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e42:	fb03 6711 	mls	r7, r3, r1, r6
 8005e46:	5dc7      	ldrb	r7, [r0, r7]
 8005e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e4c:	4637      	mov	r7, r6
 8005e4e:	42bb      	cmp	r3, r7
 8005e50:	460e      	mov	r6, r1
 8005e52:	d9f4      	bls.n	8005e3e <_printf_i+0x11a>
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d10b      	bne.n	8005e70 <_printf_i+0x14c>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	07de      	lsls	r6, r3, #31
 8005e5c:	d508      	bpl.n	8005e70 <_printf_i+0x14c>
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	6861      	ldr	r1, [r4, #4]
 8005e62:	4299      	cmp	r1, r3
 8005e64:	bfde      	ittt	le
 8005e66:	2330      	movle	r3, #48	; 0x30
 8005e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e70:	1b52      	subs	r2, r2, r5
 8005e72:	6122      	str	r2, [r4, #16]
 8005e74:	f8cd a000 	str.w	sl, [sp]
 8005e78:	464b      	mov	r3, r9
 8005e7a:	aa03      	add	r2, sp, #12
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f7ff fee2 	bl	8005c48 <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	d14c      	bne.n	8005f22 <_printf_i+0x1fe>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	b004      	add	sp, #16
 8005e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e92:	4835      	ldr	r0, [pc, #212]	; (8005f68 <_printf_i+0x244>)
 8005e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e98:	6829      	ldr	r1, [r5, #0]
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ea0:	6029      	str	r1, [r5, #0]
 8005ea2:	061d      	lsls	r5, r3, #24
 8005ea4:	d514      	bpl.n	8005ed0 <_printf_i+0x1ac>
 8005ea6:	07df      	lsls	r7, r3, #31
 8005ea8:	bf44      	itt	mi
 8005eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8005eae:	6023      	strmi	r3, [r4, #0]
 8005eb0:	b91e      	cbnz	r6, 8005eba <_printf_i+0x196>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f023 0320 	bic.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e7b0      	b.n	8005e20 <_printf_i+0xfc>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	f043 0320 	orr.w	r3, r3, #32
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	2378      	movs	r3, #120	; 0x78
 8005ec8:	4828      	ldr	r0, [pc, #160]	; (8005f6c <_printf_i+0x248>)
 8005eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ece:	e7e3      	b.n	8005e98 <_printf_i+0x174>
 8005ed0:	0659      	lsls	r1, r3, #25
 8005ed2:	bf48      	it	mi
 8005ed4:	b2b6      	uxthmi	r6, r6
 8005ed6:	e7e6      	b.n	8005ea6 <_printf_i+0x182>
 8005ed8:	4615      	mov	r5, r2
 8005eda:	e7bb      	b.n	8005e54 <_printf_i+0x130>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	6826      	ldr	r6, [r4, #0]
 8005ee0:	6961      	ldr	r1, [r4, #20]
 8005ee2:	1d18      	adds	r0, r3, #4
 8005ee4:	6028      	str	r0, [r5, #0]
 8005ee6:	0635      	lsls	r5, r6, #24
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0x1cc>
 8005eec:	6019      	str	r1, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <_printf_i+0x1d2>
 8005ef0:	0670      	lsls	r0, r6, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0x1c8>
 8005ef4:	8019      	strh	r1, [r3, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	4615      	mov	r5, r2
 8005efc:	e7ba      	b.n	8005e74 <_printf_i+0x150>
 8005efe:	682b      	ldr	r3, [r5, #0]
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	602a      	str	r2, [r5, #0]
 8005f04:	681d      	ldr	r5, [r3, #0]
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7fa f988 	bl	8000220 <memchr>
 8005f10:	b108      	cbz	r0, 8005f16 <_printf_i+0x1f2>
 8005f12:	1b40      	subs	r0, r0, r5
 8005f14:	6060      	str	r0, [r4, #4]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f20:	e7a8      	b.n	8005e74 <_printf_i+0x150>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	47d0      	blx	sl
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d0ab      	beq.n	8005e88 <_printf_i+0x164>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	d413      	bmi.n	8005f5e <_printf_i+0x23a>
 8005f36:	68e0      	ldr	r0, [r4, #12]
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	bfb8      	it	lt
 8005f3e:	4618      	movlt	r0, r3
 8005f40:	e7a4      	b.n	8005e8c <_printf_i+0x168>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	47d0      	blx	sl
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d09b      	beq.n	8005e88 <_printf_i+0x164>
 8005f50:	3501      	adds	r5, #1
 8005f52:	68e3      	ldr	r3, [r4, #12]
 8005f54:	9903      	ldr	r1, [sp, #12]
 8005f56:	1a5b      	subs	r3, r3, r1
 8005f58:	42ab      	cmp	r3, r5
 8005f5a:	dcf2      	bgt.n	8005f42 <_printf_i+0x21e>
 8005f5c:	e7eb      	b.n	8005f36 <_printf_i+0x212>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	f104 0619 	add.w	r6, r4, #25
 8005f64:	e7f5      	b.n	8005f52 <_printf_i+0x22e>
 8005f66:	bf00      	nop
 8005f68:	080084ce 	.word	0x080084ce
 8005f6c:	080084df 	.word	0x080084df

08005f70 <siprintf>:
 8005f70:	b40e      	push	{r1, r2, r3}
 8005f72:	b500      	push	{lr}
 8005f74:	b09c      	sub	sp, #112	; 0x70
 8005f76:	ab1d      	add	r3, sp, #116	; 0x74
 8005f78:	9002      	str	r0, [sp, #8]
 8005f7a:	9006      	str	r0, [sp, #24]
 8005f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f80:	4809      	ldr	r0, [pc, #36]	; (8005fa8 <siprintf+0x38>)
 8005f82:	9107      	str	r1, [sp, #28]
 8005f84:	9104      	str	r1, [sp, #16]
 8005f86:	4909      	ldr	r1, [pc, #36]	; (8005fac <siprintf+0x3c>)
 8005f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	a902      	add	r1, sp, #8
 8005f94:	f001 fb76 	bl	8007684 <_svfiprintf_r>
 8005f98:	9b02      	ldr	r3, [sp, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	b01c      	add	sp, #112	; 0x70
 8005fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa4:	b003      	add	sp, #12
 8005fa6:	4770      	bx	lr
 8005fa8:	20000038 	.word	0x20000038
 8005fac:	ffff0208 	.word	0xffff0208

08005fb0 <quorem>:
 8005fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	6903      	ldr	r3, [r0, #16]
 8005fb6:	690c      	ldr	r4, [r1, #16]
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	4607      	mov	r7, r0
 8005fbc:	f2c0 8081 	blt.w	80060c2 <quorem+0x112>
 8005fc0:	3c01      	subs	r4, #1
 8005fc2:	f101 0814 	add.w	r8, r1, #20
 8005fc6:	f100 0514 	add.w	r5, r0, #20
 8005fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fe8:	d331      	bcc.n	800604e <quorem+0x9e>
 8005fea:	f04f 0e00 	mov.w	lr, #0
 8005fee:	4640      	mov	r0, r8
 8005ff0:	46ac      	mov	ip, r5
 8005ff2:	46f2      	mov	sl, lr
 8005ff4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ff8:	b293      	uxth	r3, r2
 8005ffa:	fb06 e303 	mla	r3, r6, r3, lr
 8005ffe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006002:	b29b      	uxth	r3, r3
 8006004:	ebaa 0303 	sub.w	r3, sl, r3
 8006008:	f8dc a000 	ldr.w	sl, [ip]
 800600c:	0c12      	lsrs	r2, r2, #16
 800600e:	fa13 f38a 	uxtah	r3, r3, sl
 8006012:	fb06 e202 	mla	r2, r6, r2, lr
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	9b00      	ldr	r3, [sp, #0]
 800601a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800601e:	b292      	uxth	r2, r2
 8006020:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006028:	f8bd 3000 	ldrh.w	r3, [sp]
 800602c:	4581      	cmp	r9, r0
 800602e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006032:	f84c 3b04 	str.w	r3, [ip], #4
 8006036:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800603a:	d2db      	bcs.n	8005ff4 <quorem+0x44>
 800603c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006040:	b92b      	cbnz	r3, 800604e <quorem+0x9e>
 8006042:	9b01      	ldr	r3, [sp, #4]
 8006044:	3b04      	subs	r3, #4
 8006046:	429d      	cmp	r5, r3
 8006048:	461a      	mov	r2, r3
 800604a:	d32e      	bcc.n	80060aa <quorem+0xfa>
 800604c:	613c      	str	r4, [r7, #16]
 800604e:	4638      	mov	r0, r7
 8006050:	f001 f8c4 	bl	80071dc <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	db24      	blt.n	80060a2 <quorem+0xf2>
 8006058:	3601      	adds	r6, #1
 800605a:	4628      	mov	r0, r5
 800605c:	f04f 0c00 	mov.w	ip, #0
 8006060:	f858 2b04 	ldr.w	r2, [r8], #4
 8006064:	f8d0 e000 	ldr.w	lr, [r0]
 8006068:	b293      	uxth	r3, r2
 800606a:	ebac 0303 	sub.w	r3, ip, r3
 800606e:	0c12      	lsrs	r2, r2, #16
 8006070:	fa13 f38e 	uxtah	r3, r3, lr
 8006074:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006082:	45c1      	cmp	r9, r8
 8006084:	f840 3b04 	str.w	r3, [r0], #4
 8006088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800608c:	d2e8      	bcs.n	8006060 <quorem+0xb0>
 800608e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006096:	b922      	cbnz	r2, 80060a2 <quorem+0xf2>
 8006098:	3b04      	subs	r3, #4
 800609a:	429d      	cmp	r5, r3
 800609c:	461a      	mov	r2, r3
 800609e:	d30a      	bcc.n	80060b6 <quorem+0x106>
 80060a0:	613c      	str	r4, [r7, #16]
 80060a2:	4630      	mov	r0, r6
 80060a4:	b003      	add	sp, #12
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	3b04      	subs	r3, #4
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	d1cc      	bne.n	800604c <quorem+0x9c>
 80060b2:	3c01      	subs	r4, #1
 80060b4:	e7c7      	b.n	8006046 <quorem+0x96>
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	3b04      	subs	r3, #4
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	d1f0      	bne.n	80060a0 <quorem+0xf0>
 80060be:	3c01      	subs	r4, #1
 80060c0:	e7eb      	b.n	800609a <quorem+0xea>
 80060c2:	2000      	movs	r0, #0
 80060c4:	e7ee      	b.n	80060a4 <quorem+0xf4>
	...

080060c8 <_dtoa_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	ed2d 8b04 	vpush	{d8-d9}
 80060d0:	ec57 6b10 	vmov	r6, r7, d0
 80060d4:	b093      	sub	sp, #76	; 0x4c
 80060d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060dc:	9106      	str	r1, [sp, #24]
 80060de:	ee10 aa10 	vmov	sl, s0
 80060e2:	4604      	mov	r4, r0
 80060e4:	9209      	str	r2, [sp, #36]	; 0x24
 80060e6:	930c      	str	r3, [sp, #48]	; 0x30
 80060e8:	46bb      	mov	fp, r7
 80060ea:	b975      	cbnz	r5, 800610a <_dtoa_r+0x42>
 80060ec:	2010      	movs	r0, #16
 80060ee:	f000 fddd 	bl	8006cac <malloc>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6260      	str	r0, [r4, #36]	; 0x24
 80060f6:	b920      	cbnz	r0, 8006102 <_dtoa_r+0x3a>
 80060f8:	4ba7      	ldr	r3, [pc, #668]	; (8006398 <_dtoa_r+0x2d0>)
 80060fa:	21ea      	movs	r1, #234	; 0xea
 80060fc:	48a7      	ldr	r0, [pc, #668]	; (800639c <_dtoa_r+0x2d4>)
 80060fe:	f001 fbd1 	bl	80078a4 <__assert_func>
 8006102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006106:	6005      	str	r5, [r0, #0]
 8006108:	60c5      	str	r5, [r0, #12]
 800610a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	b151      	cbz	r1, 8006126 <_dtoa_r+0x5e>
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	604a      	str	r2, [r1, #4]
 8006114:	2301      	movs	r3, #1
 8006116:	4093      	lsls	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
 800611a:	4620      	mov	r0, r4
 800611c:	f000 fe1c 	bl	8006d58 <_Bfree>
 8006120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	1e3b      	subs	r3, r7, #0
 8006128:	bfaa      	itet	ge
 800612a:	2300      	movge	r3, #0
 800612c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006130:	f8c8 3000 	strge.w	r3, [r8]
 8006134:	4b9a      	ldr	r3, [pc, #616]	; (80063a0 <_dtoa_r+0x2d8>)
 8006136:	bfbc      	itt	lt
 8006138:	2201      	movlt	r2, #1
 800613a:	f8c8 2000 	strlt.w	r2, [r8]
 800613e:	ea33 030b 	bics.w	r3, r3, fp
 8006142:	d11b      	bne.n	800617c <_dtoa_r+0xb4>
 8006144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006146:	f242 730f 	movw	r3, #9999	; 0x270f
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006150:	4333      	orrs	r3, r6
 8006152:	f000 8592 	beq.w	8006c7a <_dtoa_r+0xbb2>
 8006156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006158:	b963      	cbnz	r3, 8006174 <_dtoa_r+0xac>
 800615a:	4b92      	ldr	r3, [pc, #584]	; (80063a4 <_dtoa_r+0x2dc>)
 800615c:	e022      	b.n	80061a4 <_dtoa_r+0xdc>
 800615e:	4b92      	ldr	r3, [pc, #584]	; (80063a8 <_dtoa_r+0x2e0>)
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	3308      	adds	r3, #8
 8006164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	9801      	ldr	r0, [sp, #4]
 800616a:	b013      	add	sp, #76	; 0x4c
 800616c:	ecbd 8b04 	vpop	{d8-d9}
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	4b8b      	ldr	r3, [pc, #556]	; (80063a4 <_dtoa_r+0x2dc>)
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	3303      	adds	r3, #3
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x9c>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	4650      	mov	r0, sl
 8006182:	4659      	mov	r1, fp
 8006184:	f7fa fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 8006188:	ec4b ab19 	vmov	d9, sl, fp
 800618c:	4680      	mov	r8, r0
 800618e:	b158      	cbz	r0, 80061a8 <_dtoa_r+0xe0>
 8006190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006192:	2301      	movs	r3, #1
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 856b 	beq.w	8006c74 <_dtoa_r+0xbac>
 800619e:	4883      	ldr	r0, [pc, #524]	; (80063ac <_dtoa_r+0x2e4>)
 80061a0:	6018      	str	r0, [r3, #0]
 80061a2:	1e43      	subs	r3, r0, #1
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	e7df      	b.n	8006168 <_dtoa_r+0xa0>
 80061a8:	ec4b ab10 	vmov	d0, sl, fp
 80061ac:	aa10      	add	r2, sp, #64	; 0x40
 80061ae:	a911      	add	r1, sp, #68	; 0x44
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 f8b9 	bl	8007328 <__d2b>
 80061b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061ba:	ee08 0a10 	vmov	s16, r0
 80061be:	2d00      	cmp	r5, #0
 80061c0:	f000 8084 	beq.w	80062cc <_dtoa_r+0x204>
 80061c4:	ee19 3a90 	vmov	r3, s19
 80061c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061d0:	4656      	mov	r6, sl
 80061d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80061de:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <_dtoa_r+0x2e8>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa f86f 	bl	80002c8 <__aeabi_dsub>
 80061ea:	a365      	add	r3, pc, #404	; (adr r3, 8006380 <_dtoa_r+0x2b8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fa22 	bl	8000638 <__aeabi_dmul>
 80061f4:	a364      	add	r3, pc, #400	; (adr r3, 8006388 <_dtoa_r+0x2c0>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f867 	bl	80002cc <__adddf3>
 80061fe:	4606      	mov	r6, r0
 8006200:	4628      	mov	r0, r5
 8006202:	460f      	mov	r7, r1
 8006204:	f7fa f9ae 	bl	8000564 <__aeabi_i2d>
 8006208:	a361      	add	r3, pc, #388	; (adr r3, 8006390 <_dtoa_r+0x2c8>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa fa13 	bl	8000638 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	f7fa f857 	bl	80002cc <__adddf3>
 800621e:	4606      	mov	r6, r0
 8006220:	460f      	mov	r7, r1
 8006222:	f7fa fcb9 	bl	8000b98 <__aeabi_d2iz>
 8006226:	2200      	movs	r2, #0
 8006228:	9000      	str	r0, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa fc74 	bl	8000b1c <__aeabi_dcmplt>
 8006234:	b150      	cbz	r0, 800624c <_dtoa_r+0x184>
 8006236:	9800      	ldr	r0, [sp, #0]
 8006238:	f7fa f994 	bl	8000564 <__aeabi_i2d>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8006244:	b910      	cbnz	r0, 800624c <_dtoa_r+0x184>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	2b16      	cmp	r3, #22
 8006250:	d85a      	bhi.n	8006308 <_dtoa_r+0x240>
 8006252:	9a00      	ldr	r2, [sp, #0]
 8006254:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <_dtoa_r+0x2ec>)
 8006256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	ec51 0b19 	vmov	r0, r1, d9
 8006262:	f7fa fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	d050      	beq.n	800630c <_dtoa_r+0x244>
 800626a:	9b00      	ldr	r3, [sp, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	930b      	str	r3, [sp, #44]	; 0x2c
 8006274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006276:	1b5d      	subs	r5, r3, r5
 8006278:	1e6b      	subs	r3, r5, #1
 800627a:	9305      	str	r3, [sp, #20]
 800627c:	bf45      	ittet	mi
 800627e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006282:	9304      	strmi	r3, [sp, #16]
 8006284:	2300      	movpl	r3, #0
 8006286:	2300      	movmi	r3, #0
 8006288:	bf4c      	ite	mi
 800628a:	9305      	strmi	r3, [sp, #20]
 800628c:	9304      	strpl	r3, [sp, #16]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	db3d      	blt.n	8006310 <_dtoa_r+0x248>
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	9a00      	ldr	r2, [sp, #0]
 8006298:	920a      	str	r2, [sp, #40]	; 0x28
 800629a:	4413      	add	r3, r2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9307      	str	r3, [sp, #28]
 80062a2:	9b06      	ldr	r3, [sp, #24]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	f200 8089 	bhi.w	80063bc <_dtoa_r+0x2f4>
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	bfc4      	itt	gt
 80062ae:	3b04      	subgt	r3, #4
 80062b0:	9306      	strgt	r3, [sp, #24]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	f1a3 0302 	sub.w	r3, r3, #2
 80062b8:	bfcc      	ite	gt
 80062ba:	2500      	movgt	r5, #0
 80062bc:	2501      	movle	r5, #1
 80062be:	2b03      	cmp	r3, #3
 80062c0:	f200 8087 	bhi.w	80063d2 <_dtoa_r+0x30a>
 80062c4:	e8df f003 	tbb	[pc, r3]
 80062c8:	59383a2d 	.word	0x59383a2d
 80062cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062d0:	441d      	add	r5, r3
 80062d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	bfc1      	itttt	gt
 80062da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80062de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80062e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80062e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062ea:	bfda      	itte	le
 80062ec:	f1c3 0320 	rsble	r3, r3, #32
 80062f0:	fa06 f003 	lslle.w	r0, r6, r3
 80062f4:	4318      	orrgt	r0, r3
 80062f6:	f7fa f925 	bl	8000544 <__aeabi_ui2d>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4606      	mov	r6, r0
 80062fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006302:	3d01      	subs	r5, #1
 8006304:	930e      	str	r3, [sp, #56]	; 0x38
 8006306:	e76a      	b.n	80061de <_dtoa_r+0x116>
 8006308:	2301      	movs	r3, #1
 800630a:	e7b2      	b.n	8006272 <_dtoa_r+0x1aa>
 800630c:	900b      	str	r0, [sp, #44]	; 0x2c
 800630e:	e7b1      	b.n	8006274 <_dtoa_r+0x1ac>
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	9a00      	ldr	r2, [sp, #0]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	4253      	negs	r3, r2
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	2300      	movs	r3, #0
 800631e:	930a      	str	r3, [sp, #40]	; 0x28
 8006320:	e7bf      	b.n	80062a2 <_dtoa_r+0x1da>
 8006322:	2300      	movs	r3, #0
 8006324:	9308      	str	r3, [sp, #32]
 8006326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc55      	bgt.n	80063d8 <_dtoa_r+0x310>
 800632c:	2301      	movs	r3, #1
 800632e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006332:	461a      	mov	r2, r3
 8006334:	9209      	str	r2, [sp, #36]	; 0x24
 8006336:	e00c      	b.n	8006352 <_dtoa_r+0x28a>
 8006338:	2301      	movs	r3, #1
 800633a:	e7f3      	b.n	8006324 <_dtoa_r+0x25c>
 800633c:	2300      	movs	r3, #0
 800633e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	4413      	add	r3, r2
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	bfb8      	it	lt
 8006350:	2301      	movlt	r3, #1
 8006352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006354:	2200      	movs	r2, #0
 8006356:	6042      	str	r2, [r0, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	f102 0614 	add.w	r6, r2, #20
 800635e:	429e      	cmp	r6, r3
 8006360:	6841      	ldr	r1, [r0, #4]
 8006362:	d93d      	bls.n	80063e0 <_dtoa_r+0x318>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fcb7 	bl	8006cd8 <_Balloc>
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2800      	cmp	r0, #0
 800636e:	d13b      	bne.n	80063e8 <_dtoa_r+0x320>
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <_dtoa_r+0x2f0>)
 8006372:	4602      	mov	r2, r0
 8006374:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006378:	e6c0      	b.n	80060fc <_dtoa_r+0x34>
 800637a:	2301      	movs	r3, #1
 800637c:	e7df      	b.n	800633e <_dtoa_r+0x276>
 800637e:	bf00      	nop
 8006380:	636f4361 	.word	0x636f4361
 8006384:	3fd287a7 	.word	0x3fd287a7
 8006388:	8b60c8b3 	.word	0x8b60c8b3
 800638c:	3fc68a28 	.word	0x3fc68a28
 8006390:	509f79fb 	.word	0x509f79fb
 8006394:	3fd34413 	.word	0x3fd34413
 8006398:	080084fd 	.word	0x080084fd
 800639c:	08008514 	.word	0x08008514
 80063a0:	7ff00000 	.word	0x7ff00000
 80063a4:	080084f9 	.word	0x080084f9
 80063a8:	080084f0 	.word	0x080084f0
 80063ac:	080084cd 	.word	0x080084cd
 80063b0:	3ff80000 	.word	0x3ff80000
 80063b4:	08008608 	.word	0x08008608
 80063b8:	0800856f 	.word	0x0800856f
 80063bc:	2501      	movs	r5, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	9306      	str	r3, [sp, #24]
 80063c2:	9508      	str	r5, [sp, #32]
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2312      	movs	r3, #18
 80063d0:	e7b0      	b.n	8006334 <_dtoa_r+0x26c>
 80063d2:	2301      	movs	r3, #1
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	e7f5      	b.n	80063c4 <_dtoa_r+0x2fc>
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063de:	e7b8      	b.n	8006352 <_dtoa_r+0x28a>
 80063e0:	3101      	adds	r1, #1
 80063e2:	6041      	str	r1, [r0, #4]
 80063e4:	0052      	lsls	r2, r2, #1
 80063e6:	e7b8      	b.n	800635a <_dtoa_r+0x292>
 80063e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ea:	9a01      	ldr	r2, [sp, #4]
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b0e      	cmp	r3, #14
 80063f2:	f200 809d 	bhi.w	8006530 <_dtoa_r+0x468>
 80063f6:	2d00      	cmp	r5, #0
 80063f8:	f000 809a 	beq.w	8006530 <_dtoa_r+0x468>
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd32      	ble.n	8006468 <_dtoa_r+0x3a0>
 8006402:	4ab7      	ldr	r2, [pc, #732]	; (80066e0 <_dtoa_r+0x618>)
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800640c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	05d8      	lsls	r0, r3, #23
 8006414:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006418:	d516      	bpl.n	8006448 <_dtoa_r+0x380>
 800641a:	4bb2      	ldr	r3, [pc, #712]	; (80066e4 <_dtoa_r+0x61c>)
 800641c:	ec51 0b19 	vmov	r0, r1, d9
 8006420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006424:	f7fa fa32 	bl	800088c <__aeabi_ddiv>
 8006428:	f007 070f 	and.w	r7, r7, #15
 800642c:	4682      	mov	sl, r0
 800642e:	468b      	mov	fp, r1
 8006430:	2503      	movs	r5, #3
 8006432:	4eac      	ldr	r6, [pc, #688]	; (80066e4 <_dtoa_r+0x61c>)
 8006434:	b957      	cbnz	r7, 800644c <_dtoa_r+0x384>
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	4650      	mov	r0, sl
 800643c:	4659      	mov	r1, fp
 800643e:	f7fa fa25 	bl	800088c <__aeabi_ddiv>
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	e028      	b.n	800649a <_dtoa_r+0x3d2>
 8006448:	2502      	movs	r5, #2
 800644a:	e7f2      	b.n	8006432 <_dtoa_r+0x36a>
 800644c:	07f9      	lsls	r1, r7, #31
 800644e:	d508      	bpl.n	8006462 <_dtoa_r+0x39a>
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006458:	f7fa f8ee 	bl	8000638 <__aeabi_dmul>
 800645c:	3501      	adds	r5, #1
 800645e:	4680      	mov	r8, r0
 8006460:	4689      	mov	r9, r1
 8006462:	107f      	asrs	r7, r7, #1
 8006464:	3608      	adds	r6, #8
 8006466:	e7e5      	b.n	8006434 <_dtoa_r+0x36c>
 8006468:	f000 809b 	beq.w	80065a2 <_dtoa_r+0x4da>
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	4f9d      	ldr	r7, [pc, #628]	; (80066e4 <_dtoa_r+0x61c>)
 8006470:	425e      	negs	r6, r3
 8006472:	4b9b      	ldr	r3, [pc, #620]	; (80066e0 <_dtoa_r+0x618>)
 8006474:	f006 020f 	and.w	r2, r6, #15
 8006478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	ec51 0b19 	vmov	r0, r1, d9
 8006484:	f7fa f8d8 	bl	8000638 <__aeabi_dmul>
 8006488:	1136      	asrs	r6, r6, #4
 800648a:	4682      	mov	sl, r0
 800648c:	468b      	mov	fp, r1
 800648e:	2300      	movs	r3, #0
 8006490:	2502      	movs	r5, #2
 8006492:	2e00      	cmp	r6, #0
 8006494:	d17a      	bne.n	800658c <_dtoa_r+0x4c4>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d3      	bne.n	8006442 <_dtoa_r+0x37a>
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8082 	beq.w	80065a6 <_dtoa_r+0x4de>
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <_dtoa_r+0x620>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	4650      	mov	r0, sl
 80064a8:	4659      	mov	r1, fp
 80064aa:	f7fa fb37 	bl	8000b1c <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d079      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d076      	beq.n	80065a6 <_dtoa_r+0x4de>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd36      	ble.n	800652c <_dtoa_r+0x464>
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	1e5f      	subs	r7, r3, #1
 80064c6:	2200      	movs	r2, #0
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <_dtoa_r+0x624>)
 80064ca:	f7fa f8b5 	bl	8000638 <__aeabi_dmul>
 80064ce:	9e02      	ldr	r6, [sp, #8]
 80064d0:	4682      	mov	sl, r0
 80064d2:	468b      	mov	fp, r1
 80064d4:	3501      	adds	r5, #1
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7fa f844 	bl	8000564 <__aeabi_i2d>
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	f7fa f8aa 	bl	8000638 <__aeabi_dmul>
 80064e4:	4b82      	ldr	r3, [pc, #520]	; (80066f0 <_dtoa_r+0x628>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	f7f9 fef0 	bl	80002cc <__adddf3>
 80064ec:	46d0      	mov	r8, sl
 80064ee:	46d9      	mov	r9, fp
 80064f0:	4682      	mov	sl, r0
 80064f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d158      	bne.n	80065ac <_dtoa_r+0x4e4>
 80064fa:	4b7e      	ldr	r3, [pc, #504]	; (80066f4 <_dtoa_r+0x62c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fee1 	bl	80002c8 <__aeabi_dsub>
 8006506:	4652      	mov	r2, sl
 8006508:	465b      	mov	r3, fp
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f7fa fb23 	bl	8000b58 <__aeabi_dcmpgt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 8295 	bne.w	8006a42 <_dtoa_r+0x97a>
 8006518:	4652      	mov	r2, sl
 800651a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800651e:	4640      	mov	r0, r8
 8006520:	4649      	mov	r1, r9
 8006522:	f7fa fafb 	bl	8000b1c <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8289 	bne.w	8006a3e <_dtoa_r+0x976>
 800652c:	ec5b ab19 	vmov	sl, fp, d9
 8006530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006532:	2b00      	cmp	r3, #0
 8006534:	f2c0 8148 	blt.w	80067c8 <_dtoa_r+0x700>
 8006538:	9a00      	ldr	r2, [sp, #0]
 800653a:	2a0e      	cmp	r2, #14
 800653c:	f300 8144 	bgt.w	80067c8 <_dtoa_r+0x700>
 8006540:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <_dtoa_r+0x618>)
 8006542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	f280 80d5 	bge.w	80066fc <_dtoa_r+0x634>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f300 80d1 	bgt.w	80066fc <_dtoa_r+0x634>
 800655a:	f040 826f 	bne.w	8006a3c <_dtoa_r+0x974>
 800655e:	4b65      	ldr	r3, [pc, #404]	; (80066f4 <_dtoa_r+0x62c>)
 8006560:	2200      	movs	r2, #0
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7fa f867 	bl	8000638 <__aeabi_dmul>
 800656a:	4652      	mov	r2, sl
 800656c:	465b      	mov	r3, fp
 800656e:	f7fa fae9 	bl	8000b44 <__aeabi_dcmpge>
 8006572:	9e03      	ldr	r6, [sp, #12]
 8006574:	4637      	mov	r7, r6
 8006576:	2800      	cmp	r0, #0
 8006578:	f040 8245 	bne.w	8006a06 <_dtoa_r+0x93e>
 800657c:	9d01      	ldr	r5, [sp, #4]
 800657e:	2331      	movs	r3, #49	; 0x31
 8006580:	f805 3b01 	strb.w	r3, [r5], #1
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	e240      	b.n	8006a0e <_dtoa_r+0x946>
 800658c:	07f2      	lsls	r2, r6, #31
 800658e:	d505      	bpl.n	800659c <_dtoa_r+0x4d4>
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f7fa f850 	bl	8000638 <__aeabi_dmul>
 8006598:	3501      	adds	r5, #1
 800659a:	2301      	movs	r3, #1
 800659c:	1076      	asrs	r6, r6, #1
 800659e:	3708      	adds	r7, #8
 80065a0:	e777      	b.n	8006492 <_dtoa_r+0x3ca>
 80065a2:	2502      	movs	r5, #2
 80065a4:	e779      	b.n	800649a <_dtoa_r+0x3d2>
 80065a6:	9f00      	ldr	r7, [sp, #0]
 80065a8:	9e03      	ldr	r6, [sp, #12]
 80065aa:	e794      	b.n	80064d6 <_dtoa_r+0x40e>
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <_dtoa_r+0x618>)
 80065b0:	4431      	add	r1, r6
 80065b2:	910d      	str	r1, [sp, #52]	; 0x34
 80065b4:	9908      	ldr	r1, [sp, #32]
 80065b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065be:	2900      	cmp	r1, #0
 80065c0:	d043      	beq.n	800664a <_dtoa_r+0x582>
 80065c2:	494d      	ldr	r1, [pc, #308]	; (80066f8 <_dtoa_r+0x630>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7fa f961 	bl	800088c <__aeabi_ddiv>
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f7f9 fe7b 	bl	80002c8 <__aeabi_dsub>
 80065d2:	9d01      	ldr	r5, [sp, #4]
 80065d4:	4682      	mov	sl, r0
 80065d6:	468b      	mov	fp, r1
 80065d8:	4649      	mov	r1, r9
 80065da:	4640      	mov	r0, r8
 80065dc:	f7fa fadc 	bl	8000b98 <__aeabi_d2iz>
 80065e0:	4606      	mov	r6, r0
 80065e2:	f7f9 ffbf 	bl	8000564 <__aeabi_i2d>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7f9 fe6b 	bl	80002c8 <__aeabi_dsub>
 80065f2:	3630      	adds	r6, #48	; 0x30
 80065f4:	f805 6b01 	strb.w	r6, [r5], #1
 80065f8:	4652      	mov	r2, sl
 80065fa:	465b      	mov	r3, fp
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	f7fa fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d163      	bne.n	80066d0 <_dtoa_r+0x608>
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	4936      	ldr	r1, [pc, #216]	; (80066e8 <_dtoa_r+0x620>)
 800660e:	2000      	movs	r0, #0
 8006610:	f7f9 fe5a 	bl	80002c8 <__aeabi_dsub>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	f7fa fa80 	bl	8000b1c <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 80b5 	bne.w	800678c <_dtoa_r+0x6c4>
 8006622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006624:	429d      	cmp	r5, r3
 8006626:	d081      	beq.n	800652c <_dtoa_r+0x464>
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <_dtoa_r+0x624>)
 800662a:	2200      	movs	r2, #0
 800662c:	4650      	mov	r0, sl
 800662e:	4659      	mov	r1, fp
 8006630:	f7fa f802 	bl	8000638 <__aeabi_dmul>
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <_dtoa_r+0x624>)
 8006636:	4682      	mov	sl, r0
 8006638:	468b      	mov	fp, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	2200      	movs	r2, #0
 8006640:	f7f9 fffa 	bl	8000638 <__aeabi_dmul>
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	e7c6      	b.n	80065d8 <_dtoa_r+0x510>
 800664a:	4650      	mov	r0, sl
 800664c:	4659      	mov	r1, fp
 800664e:	f7f9 fff3 	bl	8000638 <__aeabi_dmul>
 8006652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006654:	9d01      	ldr	r5, [sp, #4]
 8006656:	930f      	str	r3, [sp, #60]	; 0x3c
 8006658:	4682      	mov	sl, r0
 800665a:	468b      	mov	fp, r1
 800665c:	4649      	mov	r1, r9
 800665e:	4640      	mov	r0, r8
 8006660:	f7fa fa9a 	bl	8000b98 <__aeabi_d2iz>
 8006664:	4606      	mov	r6, r0
 8006666:	f7f9 ff7d 	bl	8000564 <__aeabi_i2d>
 800666a:	3630      	adds	r6, #48	; 0x30
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7f9 fe28 	bl	80002c8 <__aeabi_dsub>
 8006678:	f805 6b01 	strb.w	r6, [r5], #1
 800667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667e:	429d      	cmp	r5, r3
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	d124      	bne.n	80066d4 <_dtoa_r+0x60c>
 800668a:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <_dtoa_r+0x630>)
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 fe1c 	bl	80002cc <__adddf3>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7fa fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d173      	bne.n	800678c <_dtoa_r+0x6c4>
 80066a4:	4652      	mov	r2, sl
 80066a6:	465b      	mov	r3, fp
 80066a8:	4913      	ldr	r1, [pc, #76]	; (80066f8 <_dtoa_r+0x630>)
 80066aa:	2000      	movs	r0, #0
 80066ac:	f7f9 fe0c 	bl	80002c8 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7fa fa30 	bl	8000b1c <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f af35 	beq.w	800652c <_dtoa_r+0x464>
 80066c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066c4:	1e6b      	subs	r3, r5, #1
 80066c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d0f8      	beq.n	80066c2 <_dtoa_r+0x5fa>
 80066d0:	9700      	str	r7, [sp, #0]
 80066d2:	e049      	b.n	8006768 <_dtoa_r+0x6a0>
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <_dtoa_r+0x624>)
 80066d6:	f7f9 ffaf 	bl	8000638 <__aeabi_dmul>
 80066da:	4680      	mov	r8, r0
 80066dc:	4689      	mov	r9, r1
 80066de:	e7bd      	b.n	800665c <_dtoa_r+0x594>
 80066e0:	08008608 	.word	0x08008608
 80066e4:	080085e0 	.word	0x080085e0
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	40240000 	.word	0x40240000
 80066f0:	401c0000 	.word	0x401c0000
 80066f4:	40140000 	.word	0x40140000
 80066f8:	3fe00000 	.word	0x3fe00000
 80066fc:	9d01      	ldr	r5, [sp, #4]
 80066fe:	4656      	mov	r6, sl
 8006700:	465f      	mov	r7, fp
 8006702:	4642      	mov	r2, r8
 8006704:	464b      	mov	r3, r9
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f8bf 	bl	800088c <__aeabi_ddiv>
 800670e:	f7fa fa43 	bl	8000b98 <__aeabi_d2iz>
 8006712:	4682      	mov	sl, r0
 8006714:	f7f9 ff26 	bl	8000564 <__aeabi_i2d>
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	f7f9 ff8c 	bl	8000638 <__aeabi_dmul>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800672c:	f7f9 fdcc 	bl	80002c8 <__aeabi_dsub>
 8006730:	f805 6b01 	strb.w	r6, [r5], #1
 8006734:	9e01      	ldr	r6, [sp, #4]
 8006736:	9f03      	ldr	r7, [sp, #12]
 8006738:	1bae      	subs	r6, r5, r6
 800673a:	42b7      	cmp	r7, r6
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	d135      	bne.n	80067ae <_dtoa_r+0x6e6>
 8006742:	f7f9 fdc3 	bl	80002cc <__adddf3>
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	f7fa fa03 	bl	8000b58 <__aeabi_dcmpgt>
 8006752:	b9d0      	cbnz	r0, 800678a <_dtoa_r+0x6c2>
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 8006760:	b110      	cbz	r0, 8006768 <_dtoa_r+0x6a0>
 8006762:	f01a 0f01 	tst.w	sl, #1
 8006766:	d110      	bne.n	800678a <_dtoa_r+0x6c2>
 8006768:	4620      	mov	r0, r4
 800676a:	ee18 1a10 	vmov	r1, s16
 800676e:	f000 faf3 	bl	8006d58 <_Bfree>
 8006772:	2300      	movs	r3, #0
 8006774:	9800      	ldr	r0, [sp, #0]
 8006776:	702b      	strb	r3, [r5, #0]
 8006778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800677a:	3001      	adds	r0, #1
 800677c:	6018      	str	r0, [r3, #0]
 800677e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006780:	2b00      	cmp	r3, #0
 8006782:	f43f acf1 	beq.w	8006168 <_dtoa_r+0xa0>
 8006786:	601d      	str	r5, [r3, #0]
 8006788:	e4ee      	b.n	8006168 <_dtoa_r+0xa0>
 800678a:	9f00      	ldr	r7, [sp, #0]
 800678c:	462b      	mov	r3, r5
 800678e:	461d      	mov	r5, r3
 8006790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006794:	2a39      	cmp	r2, #57	; 0x39
 8006796:	d106      	bne.n	80067a6 <_dtoa_r+0x6de>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d1f7      	bne.n	800678e <_dtoa_r+0x6c6>
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	2230      	movs	r2, #48	; 0x30
 80067a2:	3701      	adds	r7, #1
 80067a4:	700a      	strb	r2, [r1, #0]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	3201      	adds	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e790      	b.n	80066d0 <_dtoa_r+0x608>
 80067ae:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <_dtoa_r+0x980>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	f7f9 ff41 	bl	8000638 <__aeabi_dmul>
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	f7fa f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d09d      	beq.n	8006702 <_dtoa_r+0x63a>
 80067c6:	e7cf      	b.n	8006768 <_dtoa_r+0x6a0>
 80067c8:	9a08      	ldr	r2, [sp, #32]
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	f000 80d7 	beq.w	800697e <_dtoa_r+0x8b6>
 80067d0:	9a06      	ldr	r2, [sp, #24]
 80067d2:	2a01      	cmp	r2, #1
 80067d4:	f300 80ba 	bgt.w	800694c <_dtoa_r+0x884>
 80067d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067da:	2a00      	cmp	r2, #0
 80067dc:	f000 80b2 	beq.w	8006944 <_dtoa_r+0x87c>
 80067e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067e4:	9e07      	ldr	r6, [sp, #28]
 80067e6:	9d04      	ldr	r5, [sp, #16]
 80067e8:	9a04      	ldr	r2, [sp, #16]
 80067ea:	441a      	add	r2, r3
 80067ec:	9204      	str	r2, [sp, #16]
 80067ee:	9a05      	ldr	r2, [sp, #20]
 80067f0:	2101      	movs	r1, #1
 80067f2:	441a      	add	r2, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	9205      	str	r2, [sp, #20]
 80067f8:	f000 fb66 	bl	8006ec8 <__i2b>
 80067fc:	4607      	mov	r7, r0
 80067fe:	2d00      	cmp	r5, #0
 8006800:	dd0c      	ble.n	800681c <_dtoa_r+0x754>
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	dd09      	ble.n	800681c <_dtoa_r+0x754>
 8006808:	42ab      	cmp	r3, r5
 800680a:	9a04      	ldr	r2, [sp, #16]
 800680c:	bfa8      	it	ge
 800680e:	462b      	movge	r3, r5
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	9204      	str	r2, [sp, #16]
 8006814:	9a05      	ldr	r2, [sp, #20]
 8006816:	1aed      	subs	r5, r5, r3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	9305      	str	r3, [sp, #20]
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	b31b      	cbz	r3, 8006868 <_dtoa_r+0x7a0>
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80af 	beq.w	8006986 <_dtoa_r+0x8be>
 8006828:	2e00      	cmp	r6, #0
 800682a:	dd13      	ble.n	8006854 <_dtoa_r+0x78c>
 800682c:	4639      	mov	r1, r7
 800682e:	4632      	mov	r2, r6
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fc09 	bl	8007048 <__pow5mult>
 8006836:	ee18 2a10 	vmov	r2, s16
 800683a:	4601      	mov	r1, r0
 800683c:	4607      	mov	r7, r0
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fb58 	bl	8006ef4 <__multiply>
 8006844:	ee18 1a10 	vmov	r1, s16
 8006848:	4680      	mov	r8, r0
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fa84 	bl	8006d58 <_Bfree>
 8006850:	ee08 8a10 	vmov	s16, r8
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	1b9a      	subs	r2, r3, r6
 8006858:	d006      	beq.n	8006868 <_dtoa_r+0x7a0>
 800685a:	ee18 1a10 	vmov	r1, s16
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fbf2 	bl	8007048 <__pow5mult>
 8006864:	ee08 0a10 	vmov	s16, r0
 8006868:	2101      	movs	r1, #1
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fb2c 	bl	8006ec8 <__i2b>
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	4606      	mov	r6, r0
 8006876:	f340 8088 	ble.w	800698a <_dtoa_r+0x8c2>
 800687a:	461a      	mov	r2, r3
 800687c:	4601      	mov	r1, r0
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fbe2 	bl	8007048 <__pow5mult>
 8006884:	9b06      	ldr	r3, [sp, #24]
 8006886:	2b01      	cmp	r3, #1
 8006888:	4606      	mov	r6, r0
 800688a:	f340 8081 	ble.w	8006990 <_dtoa_r+0x8c8>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	6933      	ldr	r3, [r6, #16]
 8006894:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f000 fac5 	bl	8006e28 <__hi0bits>
 800689e:	f1c0 0020 	rsb	r0, r0, #32
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	4418      	add	r0, r3
 80068a6:	f010 001f 	ands.w	r0, r0, #31
 80068aa:	f000 8092 	beq.w	80069d2 <_dtoa_r+0x90a>
 80068ae:	f1c0 0320 	rsb	r3, r0, #32
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	f340 808a 	ble.w	80069cc <_dtoa_r+0x904>
 80068b8:	f1c0 001c 	rsb	r0, r0, #28
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4403      	add	r3, r0
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	4403      	add	r3, r0
 80068c6:	4405      	add	r5, r0
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	9b04      	ldr	r3, [sp, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dd07      	ble.n	80068e0 <_dtoa_r+0x818>
 80068d0:	ee18 1a10 	vmov	r1, s16
 80068d4:	461a      	mov	r2, r3
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fc10 	bl	80070fc <__lshift>
 80068dc:	ee08 0a10 	vmov	s16, r0
 80068e0:	9b05      	ldr	r3, [sp, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd05      	ble.n	80068f2 <_dtoa_r+0x82a>
 80068e6:	4631      	mov	r1, r6
 80068e8:	461a      	mov	r2, r3
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fc06 	bl	80070fc <__lshift>
 80068f0:	4606      	mov	r6, r0
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d06e      	beq.n	80069d6 <_dtoa_r+0x90e>
 80068f8:	ee18 0a10 	vmov	r0, s16
 80068fc:	4631      	mov	r1, r6
 80068fe:	f000 fc6d 	bl	80071dc <__mcmp>
 8006902:	2800      	cmp	r0, #0
 8006904:	da67      	bge.n	80069d6 <_dtoa_r+0x90e>
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	3b01      	subs	r3, #1
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	220a      	movs	r2, #10
 8006912:	2300      	movs	r3, #0
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fa41 	bl	8006d9c <__multadd>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 81b1 	beq.w	8006c88 <_dtoa_r+0xbc0>
 8006926:	2300      	movs	r3, #0
 8006928:	4639      	mov	r1, r7
 800692a:	220a      	movs	r2, #10
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fa35 	bl	8006d9c <__multadd>
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	4607      	mov	r7, r0
 8006938:	f300 808e 	bgt.w	8006a58 <_dtoa_r+0x990>
 800693c:	9b06      	ldr	r3, [sp, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dc51      	bgt.n	80069e6 <_dtoa_r+0x91e>
 8006942:	e089      	b.n	8006a58 <_dtoa_r+0x990>
 8006944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694a:	e74b      	b.n	80067e4 <_dtoa_r+0x71c>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1e5e      	subs	r6, r3, #1
 8006950:	9b07      	ldr	r3, [sp, #28]
 8006952:	42b3      	cmp	r3, r6
 8006954:	bfbf      	itttt	lt
 8006956:	9b07      	ldrlt	r3, [sp, #28]
 8006958:	9607      	strlt	r6, [sp, #28]
 800695a:	1af2      	sublt	r2, r6, r3
 800695c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800695e:	bfb6      	itet	lt
 8006960:	189b      	addlt	r3, r3, r2
 8006962:	1b9e      	subge	r6, r3, r6
 8006964:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	bfb8      	it	lt
 800696a:	2600      	movlt	r6, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bfb7      	itett	lt
 8006970:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006974:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006978:	1a9d      	sublt	r5, r3, r2
 800697a:	2300      	movlt	r3, #0
 800697c:	e734      	b.n	80067e8 <_dtoa_r+0x720>
 800697e:	9e07      	ldr	r6, [sp, #28]
 8006980:	9d04      	ldr	r5, [sp, #16]
 8006982:	9f08      	ldr	r7, [sp, #32]
 8006984:	e73b      	b.n	80067fe <_dtoa_r+0x736>
 8006986:	9a07      	ldr	r2, [sp, #28]
 8006988:	e767      	b.n	800685a <_dtoa_r+0x792>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	2b01      	cmp	r3, #1
 800698e:	dc18      	bgt.n	80069c2 <_dtoa_r+0x8fa>
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d115      	bne.n	80069c2 <_dtoa_r+0x8fa>
 8006996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800699a:	b993      	cbnz	r3, 80069c2 <_dtoa_r+0x8fa>
 800699c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	b183      	cbz	r3, 80069c8 <_dtoa_r+0x900>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	3301      	adds	r3, #1
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f04f 0801 	mov.w	r8, #1
 80069b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f47f af6a 	bne.w	8006892 <_dtoa_r+0x7ca>
 80069be:	2001      	movs	r0, #1
 80069c0:	e76f      	b.n	80068a2 <_dtoa_r+0x7da>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	e7f6      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069c8:	4698      	mov	r8, r3
 80069ca:	e7f4      	b.n	80069b6 <_dtoa_r+0x8ee>
 80069cc:	f43f af7d 	beq.w	80068ca <_dtoa_r+0x802>
 80069d0:	4618      	mov	r0, r3
 80069d2:	301c      	adds	r0, #28
 80069d4:	e772      	b.n	80068bc <_dtoa_r+0x7f4>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc37      	bgt.n	8006a4c <_dtoa_r+0x984>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	dd34      	ble.n	8006a4c <_dtoa_r+0x984>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	b96b      	cbnz	r3, 8006a06 <_dtoa_r+0x93e>
 80069ea:	4631      	mov	r1, r6
 80069ec:	2205      	movs	r2, #5
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 f9d4 	bl	8006d9c <__multadd>
 80069f4:	4601      	mov	r1, r0
 80069f6:	4606      	mov	r6, r0
 80069f8:	ee18 0a10 	vmov	r0, s16
 80069fc:	f000 fbee 	bl	80071dc <__mcmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f73f adbb 	bgt.w	800657c <_dtoa_r+0x4b4>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	9d01      	ldr	r5, [sp, #4]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	4631      	mov	r1, r6
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f99f 	bl	8006d58 <_Bfree>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	f43f aea4 	beq.w	8006768 <_dtoa_r+0x6a0>
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d005      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a26:	45b8      	cmp	r8, r7
 8006a28:	d003      	beq.n	8006a32 <_dtoa_r+0x96a>
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 f993 	bl	8006d58 <_Bfree>
 8006a32:	4639      	mov	r1, r7
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 f98f 	bl	8006d58 <_Bfree>
 8006a3a:	e695      	b.n	8006768 <_dtoa_r+0x6a0>
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	4637      	mov	r7, r6
 8006a40:	e7e1      	b.n	8006a06 <_dtoa_r+0x93e>
 8006a42:	9700      	str	r7, [sp, #0]
 8006a44:	4637      	mov	r7, r6
 8006a46:	e599      	b.n	800657c <_dtoa_r+0x4b4>
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80ca 	beq.w	8006be8 <_dtoa_r+0xb20>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	9302      	str	r3, [sp, #8]
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x9a0>
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fb4b 	bl	80070fc <__lshift>
 8006a66:	4607      	mov	r7, r0
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d05b      	beq.n	8006b26 <_dtoa_r+0xa5e>
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 f931 	bl	8006cd8 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <_dtoa_r+0x9be>
 8006a7a:	4b87      	ldr	r3, [pc, #540]	; (8006c98 <_dtoa_r+0xbd0>)
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a82:	f7ff bb3b 	b.w	80060fc <_dtoa_r+0x34>
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	3202      	adds	r2, #2
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	f107 010c 	add.w	r1, r7, #12
 8006a90:	300c      	adds	r0, #12
 8006a92:	f000 f913 	bl	8006cbc <memcpy>
 8006a96:	2201      	movs	r2, #1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fb2e 	bl	80070fc <__lshift>
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	f103 0901 	add.w	r9, r3, #1
 8006aa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	f00a 0301 	and.w	r3, sl, #1
 8006ab2:	46b8      	mov	r8, r7
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	4631      	mov	r1, r6
 8006aba:	ee18 0a10 	vmov	r0, s16
 8006abe:	f7ff fa77 	bl	8005fb0 <quorem>
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	9002      	str	r0, [sp, #8]
 8006ac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006aca:	ee18 0a10 	vmov	r0, s16
 8006ace:	f000 fb85 	bl	80071dc <__mcmp>
 8006ad2:	463a      	mov	r2, r7
 8006ad4:	9003      	str	r0, [sp, #12]
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fb9b 	bl	8007214 <__mdiff>
 8006ade:	68c2      	ldr	r2, [r0, #12]
 8006ae0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	bb02      	cbnz	r2, 8006b2a <_dtoa_r+0xa62>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	ee18 0a10 	vmov	r0, s16
 8006aee:	f000 fb75 	bl	80071dc <__mcmp>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4629      	mov	r1, r5
 8006af6:	4620      	mov	r0, r4
 8006af8:	9207      	str	r2, [sp, #28]
 8006afa:	f000 f92d 	bl	8006d58 <_Bfree>
 8006afe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b02:	ea43 0102 	orr.w	r1, r3, r2
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	464d      	mov	r5, r9
 8006b0c:	d10f      	bne.n	8006b2e <_dtoa_r+0xa66>
 8006b0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b12:	d02a      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd02      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b20:	f88b a000 	strb.w	sl, [fp]
 8006b24:	e775      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b26:	4638      	mov	r0, r7
 8006b28:	e7ba      	b.n	8006aa0 <_dtoa_r+0x9d8>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	e7e2      	b.n	8006af4 <_dtoa_r+0xa2c>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db04      	blt.n	8006b3e <_dtoa_r+0xa76>
 8006b34:	9906      	ldr	r1, [sp, #24]
 8006b36:	430b      	orrs	r3, r1
 8006b38:	9904      	ldr	r1, [sp, #16]
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	d122      	bne.n	8006b84 <_dtoa_r+0xabc>
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	ddee      	ble.n	8006b20 <_dtoa_r+0xa58>
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	2201      	movs	r2, #1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fad7 	bl	80070fc <__lshift>
 8006b4e:	4631      	mov	r1, r6
 8006b50:	ee08 0a10 	vmov	s16, r0
 8006b54:	f000 fb42 	bl	80071dc <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	dc03      	bgt.n	8006b64 <_dtoa_r+0xa9c>
 8006b5c:	d1e0      	bne.n	8006b20 <_dtoa_r+0xa58>
 8006b5e:	f01a 0f01 	tst.w	sl, #1
 8006b62:	d0dd      	beq.n	8006b20 <_dtoa_r+0xa58>
 8006b64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b68:	d1d7      	bne.n	8006b1a <_dtoa_r+0xa52>
 8006b6a:	2339      	movs	r3, #57	; 0x39
 8006b6c:	f88b 3000 	strb.w	r3, [fp]
 8006b70:	462b      	mov	r3, r5
 8006b72:	461d      	mov	r5, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b7a:	2a39      	cmp	r2, #57	; 0x39
 8006b7c:	d071      	beq.n	8006c62 <_dtoa_r+0xb9a>
 8006b7e:	3201      	adds	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e746      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	dd07      	ble.n	8006b98 <_dtoa_r+0xad0>
 8006b88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b8c:	d0ed      	beq.n	8006b6a <_dtoa_r+0xaa2>
 8006b8e:	f10a 0301 	add.w	r3, sl, #1
 8006b92:	f88b 3000 	strb.w	r3, [fp]
 8006b96:	e73c      	b.n	8006a12 <_dtoa_r+0x94a>
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b9e:	4599      	cmp	r9, r3
 8006ba0:	d047      	beq.n	8006c32 <_dtoa_r+0xb6a>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	220a      	movs	r2, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f8f6 	bl	8006d9c <__multadd>
 8006bb0:	45b8      	cmp	r8, r7
 8006bb2:	ee08 0a10 	vmov	s16, r0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 020a 	mov.w	r2, #10
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	d106      	bne.n	8006bd2 <_dtoa_r+0xb0a>
 8006bc4:	f000 f8ea 	bl	8006d9c <__multadd>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4607      	mov	r7, r0
 8006bcc:	f109 0901 	add.w	r9, r9, #1
 8006bd0:	e772      	b.n	8006ab8 <_dtoa_r+0x9f0>
 8006bd2:	f000 f8e3 	bl	8006d9c <__multadd>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4680      	mov	r8, r0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f8dc 	bl	8006d9c <__multadd>
 8006be4:	4607      	mov	r7, r0
 8006be6:	e7f1      	b.n	8006bcc <_dtoa_r+0xb04>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	9d01      	ldr	r5, [sp, #4]
 8006bee:	ee18 0a10 	vmov	r0, s16
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	f7ff f9dc 	bl	8005fb0 <quorem>
 8006bf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	f805 ab01 	strb.w	sl, [r5], #1
 8006c02:	1aea      	subs	r2, r5, r3
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dd09      	ble.n	8006c1e <_dtoa_r+0xb56>
 8006c0a:	ee18 1a10 	vmov	r1, s16
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f8c2 	bl	8006d9c <__multadd>
 8006c18:	ee08 0a10 	vmov	s16, r0
 8006c1c:	e7e7      	b.n	8006bee <_dtoa_r+0xb26>
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bfc8      	it	gt
 8006c24:	461d      	movgt	r5, r3
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	bfd8      	it	le
 8006c2a:	2501      	movle	r5, #1
 8006c2c:	441d      	add	r5, r3
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	2201      	movs	r2, #1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fa5f 	bl	80070fc <__lshift>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	ee08 0a10 	vmov	s16, r0
 8006c44:	f000 faca 	bl	80071dc <__mcmp>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	dc91      	bgt.n	8006b70 <_dtoa_r+0xaa8>
 8006c4c:	d102      	bne.n	8006c54 <_dtoa_r+0xb8c>
 8006c4e:	f01a 0f01 	tst.w	sl, #1
 8006c52:	d18d      	bne.n	8006b70 <_dtoa_r+0xaa8>
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a30      	cmp	r2, #48	; 0x30
 8006c5e:	d0fa      	beq.n	8006c56 <_dtoa_r+0xb8e>
 8006c60:	e6d7      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d184      	bne.n	8006b72 <_dtoa_r+0xaaa>
 8006c68:	9b00      	ldr	r3, [sp, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	2331      	movs	r3, #49	; 0x31
 8006c70:	7013      	strb	r3, [r2, #0]
 8006c72:	e6ce      	b.n	8006a12 <_dtoa_r+0x94a>
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <_dtoa_r+0xbd4>)
 8006c76:	f7ff ba95 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f47f aa6e 	bne.w	800615e <_dtoa_r+0x96>
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <_dtoa_r+0xbd8>)
 8006c84:	f7ff ba8e 	b.w	80061a4 <_dtoa_r+0xdc>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dcae      	bgt.n	8006bec <_dtoa_r+0xb24>
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f73f aea8 	bgt.w	80069e6 <_dtoa_r+0x91e>
 8006c96:	e7a9      	b.n	8006bec <_dtoa_r+0xb24>
 8006c98:	0800856f 	.word	0x0800856f
 8006c9c:	080084cc 	.word	0x080084cc
 8006ca0:	080084f0 	.word	0x080084f0

08006ca4 <_localeconv_r>:
 8006ca4:	4800      	ldr	r0, [pc, #0]	; (8006ca8 <_localeconv_r+0x4>)
 8006ca6:	4770      	bx	lr
 8006ca8:	2000018c 	.word	0x2000018c

08006cac <malloc>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <malloc+0xc>)
 8006cae:	4601      	mov	r1, r0
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f000 bc17 	b.w	80074e4 <_malloc_r>
 8006cb6:	bf00      	nop
 8006cb8:	20000038 	.word	0x20000038

08006cbc <memcpy>:
 8006cbc:	440a      	add	r2, r1
 8006cbe:	4291      	cmp	r1, r2
 8006cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc4:	d100      	bne.n	8006cc8 <memcpy+0xc>
 8006cc6:	4770      	bx	lr
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d1f9      	bne.n	8006cca <memcpy+0xe>
 8006cd6:	bd10      	pop	{r4, pc}

08006cd8 <_Balloc>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	b976      	cbnz	r6, 8006d00 <_Balloc+0x28>
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	f7ff ffe2 	bl	8006cac <malloc>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6260      	str	r0, [r4, #36]	; 0x24
 8006cec:	b920      	cbnz	r0, 8006cf8 <_Balloc+0x20>
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <_Balloc+0x78>)
 8006cf0:	4818      	ldr	r0, [pc, #96]	; (8006d54 <_Balloc+0x7c>)
 8006cf2:	2166      	movs	r1, #102	; 0x66
 8006cf4:	f000 fdd6 	bl	80078a4 <__assert_func>
 8006cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cfc:	6006      	str	r6, [r0, #0]
 8006cfe:	60c6      	str	r6, [r0, #12]
 8006d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d02:	68f3      	ldr	r3, [r6, #12]
 8006d04:	b183      	cbz	r3, 8006d28 <_Balloc+0x50>
 8006d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d0e:	b9b8      	cbnz	r0, 8006d40 <_Balloc+0x68>
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f605 	lsl.w	r6, r1, r5
 8006d16:	1d72      	adds	r2, r6, #5
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb60 	bl	80073e0 <_calloc_r>
 8006d20:	b160      	cbz	r0, 8006d3c <_Balloc+0x64>
 8006d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d26:	e00e      	b.n	8006d46 <_Balloc+0x6e>
 8006d28:	2221      	movs	r2, #33	; 0x21
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 fb57 	bl	80073e0 <_calloc_r>
 8006d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d34:	60f0      	str	r0, [r6, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e4      	bne.n	8006d06 <_Balloc+0x2e>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	6802      	ldr	r2, [r0, #0]
 8006d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d46:	2300      	movs	r3, #0
 8006d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d4c:	e7f7      	b.n	8006d3e <_Balloc+0x66>
 8006d4e:	bf00      	nop
 8006d50:	080084fd 	.word	0x080084fd
 8006d54:	08008580 	.word	0x08008580

08006d58 <_Bfree>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	b976      	cbnz	r6, 8006d80 <_Bfree+0x28>
 8006d62:	2010      	movs	r0, #16
 8006d64:	f7ff ffa2 	bl	8006cac <malloc>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8006d6c:	b920      	cbnz	r0, 8006d78 <_Bfree+0x20>
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <_Bfree+0x3c>)
 8006d70:	4809      	ldr	r0, [pc, #36]	; (8006d98 <_Bfree+0x40>)
 8006d72:	218a      	movs	r1, #138	; 0x8a
 8006d74:	f000 fd96 	bl	80078a4 <__assert_func>
 8006d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d7c:	6006      	str	r6, [r0, #0]
 8006d7e:	60c6      	str	r6, [r0, #12]
 8006d80:	b13c      	cbz	r4, 8006d92 <_Bfree+0x3a>
 8006d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d84:	6862      	ldr	r2, [r4, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d8c:	6021      	str	r1, [r4, #0]
 8006d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	080084fd 	.word	0x080084fd
 8006d98:	08008580 	.word	0x08008580

08006d9c <__multadd>:
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	690d      	ldr	r5, [r1, #16]
 8006da2:	4607      	mov	r7, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	461e      	mov	r6, r3
 8006da8:	f101 0c14 	add.w	ip, r1, #20
 8006dac:	2000      	movs	r0, #0
 8006dae:	f8dc 3000 	ldr.w	r3, [ip]
 8006db2:	b299      	uxth	r1, r3
 8006db4:	fb02 6101 	mla	r1, r2, r1, r6
 8006db8:	0c1e      	lsrs	r6, r3, #16
 8006dba:	0c0b      	lsrs	r3, r1, #16
 8006dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8006dc0:	b289      	uxth	r1, r1
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dc8:	4285      	cmp	r5, r0
 8006dca:	f84c 1b04 	str.w	r1, [ip], #4
 8006dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dd2:	dcec      	bgt.n	8006dae <__multadd+0x12>
 8006dd4:	b30e      	cbz	r6, 8006e1a <__multadd+0x7e>
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dc19      	bgt.n	8006e10 <__multadd+0x74>
 8006ddc:	6861      	ldr	r1, [r4, #4]
 8006dde:	4638      	mov	r0, r7
 8006de0:	3101      	adds	r1, #1
 8006de2:	f7ff ff79 	bl	8006cd8 <_Balloc>
 8006de6:	4680      	mov	r8, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <__multadd+0x5a>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <__multadd+0x84>)
 8006dee:	480d      	ldr	r0, [pc, #52]	; (8006e24 <__multadd+0x88>)
 8006df0:	21b5      	movs	r1, #181	; 0xb5
 8006df2:	f000 fd57 	bl	80078a4 <__assert_func>
 8006df6:	6922      	ldr	r2, [r4, #16]
 8006df8:	3202      	adds	r2, #2
 8006dfa:	f104 010c 	add.w	r1, r4, #12
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	300c      	adds	r0, #12
 8006e02:	f7ff ff5b 	bl	8006cbc <memcpy>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ffa5 	bl	8006d58 <_Bfree>
 8006e0e:	4644      	mov	r4, r8
 8006e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e14:	3501      	adds	r5, #1
 8006e16:	615e      	str	r6, [r3, #20]
 8006e18:	6125      	str	r5, [r4, #16]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	0800856f 	.word	0x0800856f
 8006e24:	08008580 	.word	0x08008580

08006e28 <__hi0bits>:
 8006e28:	0c03      	lsrs	r3, r0, #16
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	b9d3      	cbnz	r3, 8006e64 <__hi0bits+0x3c>
 8006e2e:	0400      	lsls	r0, r0, #16
 8006e30:	2310      	movs	r3, #16
 8006e32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e36:	bf04      	itt	eq
 8006e38:	0200      	lsleq	r0, r0, #8
 8006e3a:	3308      	addeq	r3, #8
 8006e3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e40:	bf04      	itt	eq
 8006e42:	0100      	lsleq	r0, r0, #4
 8006e44:	3304      	addeq	r3, #4
 8006e46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e4a:	bf04      	itt	eq
 8006e4c:	0080      	lsleq	r0, r0, #2
 8006e4e:	3302      	addeq	r3, #2
 8006e50:	2800      	cmp	r0, #0
 8006e52:	db05      	blt.n	8006e60 <__hi0bits+0x38>
 8006e54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e58:	f103 0301 	add.w	r3, r3, #1
 8006e5c:	bf08      	it	eq
 8006e5e:	2320      	moveq	r3, #32
 8006e60:	4618      	mov	r0, r3
 8006e62:	4770      	bx	lr
 8006e64:	2300      	movs	r3, #0
 8006e66:	e7e4      	b.n	8006e32 <__hi0bits+0xa>

08006e68 <__lo0bits>:
 8006e68:	6803      	ldr	r3, [r0, #0]
 8006e6a:	f013 0207 	ands.w	r2, r3, #7
 8006e6e:	4601      	mov	r1, r0
 8006e70:	d00b      	beq.n	8006e8a <__lo0bits+0x22>
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d423      	bmi.n	8006ebe <__lo0bits+0x56>
 8006e76:	0798      	lsls	r0, r3, #30
 8006e78:	bf49      	itett	mi
 8006e7a:	085b      	lsrmi	r3, r3, #1
 8006e7c:	089b      	lsrpl	r3, r3, #2
 8006e7e:	2001      	movmi	r0, #1
 8006e80:	600b      	strmi	r3, [r1, #0]
 8006e82:	bf5c      	itt	pl
 8006e84:	600b      	strpl	r3, [r1, #0]
 8006e86:	2002      	movpl	r0, #2
 8006e88:	4770      	bx	lr
 8006e8a:	b298      	uxth	r0, r3
 8006e8c:	b9a8      	cbnz	r0, 8006eba <__lo0bits+0x52>
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	2010      	movs	r0, #16
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	b90a      	cbnz	r2, 8006e9a <__lo0bits+0x32>
 8006e96:	3008      	adds	r0, #8
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	071a      	lsls	r2, r3, #28
 8006e9c:	bf04      	itt	eq
 8006e9e:	091b      	lsreq	r3, r3, #4
 8006ea0:	3004      	addeq	r0, #4
 8006ea2:	079a      	lsls	r2, r3, #30
 8006ea4:	bf04      	itt	eq
 8006ea6:	089b      	lsreq	r3, r3, #2
 8006ea8:	3002      	addeq	r0, #2
 8006eaa:	07da      	lsls	r2, r3, #31
 8006eac:	d403      	bmi.n	8006eb6 <__lo0bits+0x4e>
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	f100 0001 	add.w	r0, r0, #1
 8006eb4:	d005      	beq.n	8006ec2 <__lo0bits+0x5a>
 8006eb6:	600b      	str	r3, [r1, #0]
 8006eb8:	4770      	bx	lr
 8006eba:	4610      	mov	r0, r2
 8006ebc:	e7e9      	b.n	8006e92 <__lo0bits+0x2a>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	4770      	bx	lr
 8006ec2:	2020      	movs	r0, #32
 8006ec4:	4770      	bx	lr
	...

08006ec8 <__i2b>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	2101      	movs	r1, #1
 8006ece:	f7ff ff03 	bl	8006cd8 <_Balloc>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	b928      	cbnz	r0, 8006ee2 <__i2b+0x1a>
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <__i2b+0x24>)
 8006ed8:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <__i2b+0x28>)
 8006eda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ede:	f000 fce1 	bl	80078a4 <__assert_func>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	6144      	str	r4, [r0, #20]
 8006ee6:	6103      	str	r3, [r0, #16]
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	bf00      	nop
 8006eec:	0800856f 	.word	0x0800856f
 8006ef0:	08008580 	.word	0x08008580

08006ef4 <__multiply>:
 8006ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	4691      	mov	r9, r2
 8006efa:	690a      	ldr	r2, [r1, #16]
 8006efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	bfb8      	it	lt
 8006f04:	460b      	movlt	r3, r1
 8006f06:	460c      	mov	r4, r1
 8006f08:	bfbc      	itt	lt
 8006f0a:	464c      	movlt	r4, r9
 8006f0c:	4699      	movlt	r9, r3
 8006f0e:	6927      	ldr	r7, [r4, #16]
 8006f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	6861      	ldr	r1, [r4, #4]
 8006f18:	eb07 060a 	add.w	r6, r7, sl
 8006f1c:	42b3      	cmp	r3, r6
 8006f1e:	b085      	sub	sp, #20
 8006f20:	bfb8      	it	lt
 8006f22:	3101      	addlt	r1, #1
 8006f24:	f7ff fed8 	bl	8006cd8 <_Balloc>
 8006f28:	b930      	cbnz	r0, 8006f38 <__multiply+0x44>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	4b44      	ldr	r3, [pc, #272]	; (8007040 <__multiply+0x14c>)
 8006f2e:	4845      	ldr	r0, [pc, #276]	; (8007044 <__multiply+0x150>)
 8006f30:	f240 115d 	movw	r1, #349	; 0x15d
 8006f34:	f000 fcb6 	bl	80078a4 <__assert_func>
 8006f38:	f100 0514 	add.w	r5, r0, #20
 8006f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f40:	462b      	mov	r3, r5
 8006f42:	2200      	movs	r2, #0
 8006f44:	4543      	cmp	r3, r8
 8006f46:	d321      	bcc.n	8006f8c <__multiply+0x98>
 8006f48:	f104 0314 	add.w	r3, r4, #20
 8006f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f50:	f109 0314 	add.w	r3, r9, #20
 8006f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f58:	9202      	str	r2, [sp, #8]
 8006f5a:	1b3a      	subs	r2, r7, r4
 8006f5c:	3a15      	subs	r2, #21
 8006f5e:	f022 0203 	bic.w	r2, r2, #3
 8006f62:	3204      	adds	r2, #4
 8006f64:	f104 0115 	add.w	r1, r4, #21
 8006f68:	428f      	cmp	r7, r1
 8006f6a:	bf38      	it	cc
 8006f6c:	2204      	movcc	r2, #4
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	9a02      	ldr	r2, [sp, #8]
 8006f72:	9303      	str	r3, [sp, #12]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d80c      	bhi.n	8006f92 <__multiply+0x9e>
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	dd03      	ble.n	8006f84 <__multiply+0x90>
 8006f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d05a      	beq.n	800703a <__multiply+0x146>
 8006f84:	6106      	str	r6, [r0, #16]
 8006f86:	b005      	add	sp, #20
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	f843 2b04 	str.w	r2, [r3], #4
 8006f90:	e7d8      	b.n	8006f44 <__multiply+0x50>
 8006f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f96:	f1ba 0f00 	cmp.w	sl, #0
 8006f9a:	d024      	beq.n	8006fe6 <__multiply+0xf2>
 8006f9c:	f104 0e14 	add.w	lr, r4, #20
 8006fa0:	46a9      	mov	r9, r5
 8006fa2:	f04f 0c00 	mov.w	ip, #0
 8006fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006faa:	f8d9 1000 	ldr.w	r1, [r9]
 8006fae:	fa1f fb82 	uxth.w	fp, r2
 8006fb2:	b289      	uxth	r1, r1
 8006fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fc0:	4461      	add	r1, ip
 8006fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fce:	b289      	uxth	r1, r1
 8006fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fd4:	4577      	cmp	r7, lr
 8006fd6:	f849 1b04 	str.w	r1, [r9], #4
 8006fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fde:	d8e2      	bhi.n	8006fa6 <__multiply+0xb2>
 8006fe0:	9a01      	ldr	r2, [sp, #4]
 8006fe2:	f845 c002 	str.w	ip, [r5, r2]
 8006fe6:	9a03      	ldr	r2, [sp, #12]
 8006fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fec:	3304      	adds	r3, #4
 8006fee:	f1b9 0f00 	cmp.w	r9, #0
 8006ff2:	d020      	beq.n	8007036 <__multiply+0x142>
 8006ff4:	6829      	ldr	r1, [r5, #0]
 8006ff6:	f104 0c14 	add.w	ip, r4, #20
 8006ffa:	46ae      	mov	lr, r5
 8006ffc:	f04f 0a00 	mov.w	sl, #0
 8007000:	f8bc b000 	ldrh.w	fp, [ip]
 8007004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007008:	fb09 220b 	mla	r2, r9, fp, r2
 800700c:	4492      	add	sl, r2
 800700e:	b289      	uxth	r1, r1
 8007010:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007014:	f84e 1b04 	str.w	r1, [lr], #4
 8007018:	f85c 2b04 	ldr.w	r2, [ip], #4
 800701c:	f8be 1000 	ldrh.w	r1, [lr]
 8007020:	0c12      	lsrs	r2, r2, #16
 8007022:	fb09 1102 	mla	r1, r9, r2, r1
 8007026:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800702a:	4567      	cmp	r7, ip
 800702c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007030:	d8e6      	bhi.n	8007000 <__multiply+0x10c>
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	50a9      	str	r1, [r5, r2]
 8007036:	3504      	adds	r5, #4
 8007038:	e79a      	b.n	8006f70 <__multiply+0x7c>
 800703a:	3e01      	subs	r6, #1
 800703c:	e79c      	b.n	8006f78 <__multiply+0x84>
 800703e:	bf00      	nop
 8007040:	0800856f 	.word	0x0800856f
 8007044:	08008580 	.word	0x08008580

08007048 <__pow5mult>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4615      	mov	r5, r2
 800704e:	f012 0203 	ands.w	r2, r2, #3
 8007052:	4606      	mov	r6, r0
 8007054:	460f      	mov	r7, r1
 8007056:	d007      	beq.n	8007068 <__pow5mult+0x20>
 8007058:	4c25      	ldr	r4, [pc, #148]	; (80070f0 <__pow5mult+0xa8>)
 800705a:	3a01      	subs	r2, #1
 800705c:	2300      	movs	r3, #0
 800705e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007062:	f7ff fe9b 	bl	8006d9c <__multadd>
 8007066:	4607      	mov	r7, r0
 8007068:	10ad      	asrs	r5, r5, #2
 800706a:	d03d      	beq.n	80070e8 <__pow5mult+0xa0>
 800706c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800706e:	b97c      	cbnz	r4, 8007090 <__pow5mult+0x48>
 8007070:	2010      	movs	r0, #16
 8007072:	f7ff fe1b 	bl	8006cac <malloc>
 8007076:	4602      	mov	r2, r0
 8007078:	6270      	str	r0, [r6, #36]	; 0x24
 800707a:	b928      	cbnz	r0, 8007088 <__pow5mult+0x40>
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <__pow5mult+0xac>)
 800707e:	481e      	ldr	r0, [pc, #120]	; (80070f8 <__pow5mult+0xb0>)
 8007080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007084:	f000 fc0e 	bl	80078a4 <__assert_func>
 8007088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800708c:	6004      	str	r4, [r0, #0]
 800708e:	60c4      	str	r4, [r0, #12]
 8007090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007098:	b94c      	cbnz	r4, 80070ae <__pow5mult+0x66>
 800709a:	f240 2171 	movw	r1, #625	; 0x271
 800709e:	4630      	mov	r0, r6
 80070a0:	f7ff ff12 	bl	8006ec8 <__i2b>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070aa:	4604      	mov	r4, r0
 80070ac:	6003      	str	r3, [r0, #0]
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	07eb      	lsls	r3, r5, #31
 80070b4:	d50a      	bpl.n	80070cc <__pow5mult+0x84>
 80070b6:	4639      	mov	r1, r7
 80070b8:	4622      	mov	r2, r4
 80070ba:	4630      	mov	r0, r6
 80070bc:	f7ff ff1a 	bl	8006ef4 <__multiply>
 80070c0:	4639      	mov	r1, r7
 80070c2:	4680      	mov	r8, r0
 80070c4:	4630      	mov	r0, r6
 80070c6:	f7ff fe47 	bl	8006d58 <_Bfree>
 80070ca:	4647      	mov	r7, r8
 80070cc:	106d      	asrs	r5, r5, #1
 80070ce:	d00b      	beq.n	80070e8 <__pow5mult+0xa0>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	b938      	cbnz	r0, 80070e4 <__pow5mult+0x9c>
 80070d4:	4622      	mov	r2, r4
 80070d6:	4621      	mov	r1, r4
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff ff0b 	bl	8006ef4 <__multiply>
 80070de:	6020      	str	r0, [r4, #0]
 80070e0:	f8c0 9000 	str.w	r9, [r0]
 80070e4:	4604      	mov	r4, r0
 80070e6:	e7e4      	b.n	80070b2 <__pow5mult+0x6a>
 80070e8:	4638      	mov	r0, r7
 80070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ee:	bf00      	nop
 80070f0:	080086d0 	.word	0x080086d0
 80070f4:	080084fd 	.word	0x080084fd
 80070f8:	08008580 	.word	0x08008580

080070fc <__lshift>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	460c      	mov	r4, r1
 8007102:	6849      	ldr	r1, [r1, #4]
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800710a:	68a3      	ldr	r3, [r4, #8]
 800710c:	4607      	mov	r7, r0
 800710e:	4691      	mov	r9, r2
 8007110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007114:	f108 0601 	add.w	r6, r8, #1
 8007118:	42b3      	cmp	r3, r6
 800711a:	db0b      	blt.n	8007134 <__lshift+0x38>
 800711c:	4638      	mov	r0, r7
 800711e:	f7ff fddb 	bl	8006cd8 <_Balloc>
 8007122:	4605      	mov	r5, r0
 8007124:	b948      	cbnz	r0, 800713a <__lshift+0x3e>
 8007126:	4602      	mov	r2, r0
 8007128:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <__lshift+0xd8>)
 800712a:	482b      	ldr	r0, [pc, #172]	; (80071d8 <__lshift+0xdc>)
 800712c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007130:	f000 fbb8 	bl	80078a4 <__assert_func>
 8007134:	3101      	adds	r1, #1
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	e7ee      	b.n	8007118 <__lshift+0x1c>
 800713a:	2300      	movs	r3, #0
 800713c:	f100 0114 	add.w	r1, r0, #20
 8007140:	f100 0210 	add.w	r2, r0, #16
 8007144:	4618      	mov	r0, r3
 8007146:	4553      	cmp	r3, sl
 8007148:	db37      	blt.n	80071ba <__lshift+0xbe>
 800714a:	6920      	ldr	r0, [r4, #16]
 800714c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007150:	f104 0314 	add.w	r3, r4, #20
 8007154:	f019 091f 	ands.w	r9, r9, #31
 8007158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800715c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007160:	d02f      	beq.n	80071c2 <__lshift+0xc6>
 8007162:	f1c9 0e20 	rsb	lr, r9, #32
 8007166:	468a      	mov	sl, r1
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	fa02 f209 	lsl.w	r2, r2, r9
 8007172:	ea42 020c 	orr.w	r2, r2, ip
 8007176:	f84a 2b04 	str.w	r2, [sl], #4
 800717a:	f853 2b04 	ldr.w	r2, [r3], #4
 800717e:	4298      	cmp	r0, r3
 8007180:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007184:	d8f2      	bhi.n	800716c <__lshift+0x70>
 8007186:	1b03      	subs	r3, r0, r4
 8007188:	3b15      	subs	r3, #21
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	3304      	adds	r3, #4
 8007190:	f104 0215 	add.w	r2, r4, #21
 8007194:	4290      	cmp	r0, r2
 8007196:	bf38      	it	cc
 8007198:	2304      	movcc	r3, #4
 800719a:	f841 c003 	str.w	ip, [r1, r3]
 800719e:	f1bc 0f00 	cmp.w	ip, #0
 80071a2:	d001      	beq.n	80071a8 <__lshift+0xac>
 80071a4:	f108 0602 	add.w	r6, r8, #2
 80071a8:	3e01      	subs	r6, #1
 80071aa:	4638      	mov	r0, r7
 80071ac:	612e      	str	r6, [r5, #16]
 80071ae:	4621      	mov	r1, r4
 80071b0:	f7ff fdd2 	bl	8006d58 <_Bfree>
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80071be:	3301      	adds	r3, #1
 80071c0:	e7c1      	b.n	8007146 <__lshift+0x4a>
 80071c2:	3904      	subs	r1, #4
 80071c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071cc:	4298      	cmp	r0, r3
 80071ce:	d8f9      	bhi.n	80071c4 <__lshift+0xc8>
 80071d0:	e7ea      	b.n	80071a8 <__lshift+0xac>
 80071d2:	bf00      	nop
 80071d4:	0800856f 	.word	0x0800856f
 80071d8:	08008580 	.word	0x08008580

080071dc <__mcmp>:
 80071dc:	b530      	push	{r4, r5, lr}
 80071de:	6902      	ldr	r2, [r0, #16]
 80071e0:	690c      	ldr	r4, [r1, #16]
 80071e2:	1b12      	subs	r2, r2, r4
 80071e4:	d10e      	bne.n	8007204 <__mcmp+0x28>
 80071e6:	f100 0314 	add.w	r3, r0, #20
 80071ea:	3114      	adds	r1, #20
 80071ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071fc:	42a5      	cmp	r5, r4
 80071fe:	d003      	beq.n	8007208 <__mcmp+0x2c>
 8007200:	d305      	bcc.n	800720e <__mcmp+0x32>
 8007202:	2201      	movs	r2, #1
 8007204:	4610      	mov	r0, r2
 8007206:	bd30      	pop	{r4, r5, pc}
 8007208:	4283      	cmp	r3, r0
 800720a:	d3f3      	bcc.n	80071f4 <__mcmp+0x18>
 800720c:	e7fa      	b.n	8007204 <__mcmp+0x28>
 800720e:	f04f 32ff 	mov.w	r2, #4294967295
 8007212:	e7f7      	b.n	8007204 <__mcmp+0x28>

08007214 <__mdiff>:
 8007214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	4606      	mov	r6, r0
 800721c:	4611      	mov	r1, r2
 800721e:	4620      	mov	r0, r4
 8007220:	4690      	mov	r8, r2
 8007222:	f7ff ffdb 	bl	80071dc <__mcmp>
 8007226:	1e05      	subs	r5, r0, #0
 8007228:	d110      	bne.n	800724c <__mdiff+0x38>
 800722a:	4629      	mov	r1, r5
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff fd53 	bl	8006cd8 <_Balloc>
 8007232:	b930      	cbnz	r0, 8007242 <__mdiff+0x2e>
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <__mdiff+0x10c>)
 8007236:	4602      	mov	r2, r0
 8007238:	f240 2132 	movw	r1, #562	; 0x232
 800723c:	4839      	ldr	r0, [pc, #228]	; (8007324 <__mdiff+0x110>)
 800723e:	f000 fb31 	bl	80078a4 <__assert_func>
 8007242:	2301      	movs	r3, #1
 8007244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	bfa4      	itt	ge
 800724e:	4643      	movge	r3, r8
 8007250:	46a0      	movge	r8, r4
 8007252:	4630      	mov	r0, r6
 8007254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007258:	bfa6      	itte	ge
 800725a:	461c      	movge	r4, r3
 800725c:	2500      	movge	r5, #0
 800725e:	2501      	movlt	r5, #1
 8007260:	f7ff fd3a 	bl	8006cd8 <_Balloc>
 8007264:	b920      	cbnz	r0, 8007270 <__mdiff+0x5c>
 8007266:	4b2e      	ldr	r3, [pc, #184]	; (8007320 <__mdiff+0x10c>)
 8007268:	4602      	mov	r2, r0
 800726a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800726e:	e7e5      	b.n	800723c <__mdiff+0x28>
 8007270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007274:	6926      	ldr	r6, [r4, #16]
 8007276:	60c5      	str	r5, [r0, #12]
 8007278:	f104 0914 	add.w	r9, r4, #20
 800727c:	f108 0514 	add.w	r5, r8, #20
 8007280:	f100 0e14 	add.w	lr, r0, #20
 8007284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800728c:	f108 0210 	add.w	r2, r8, #16
 8007290:	46f2      	mov	sl, lr
 8007292:	2100      	movs	r1, #0
 8007294:	f859 3b04 	ldr.w	r3, [r9], #4
 8007298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800729c:	fa1f f883 	uxth.w	r8, r3
 80072a0:	fa11 f18b 	uxtah	r1, r1, fp
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	eba1 0808 	sub.w	r8, r1, r8
 80072aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072b2:	fa1f f888 	uxth.w	r8, r8
 80072b6:	1419      	asrs	r1, r3, #16
 80072b8:	454e      	cmp	r6, r9
 80072ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072be:	f84a 3b04 	str.w	r3, [sl], #4
 80072c2:	d8e7      	bhi.n	8007294 <__mdiff+0x80>
 80072c4:	1b33      	subs	r3, r6, r4
 80072c6:	3b15      	subs	r3, #21
 80072c8:	f023 0303 	bic.w	r3, r3, #3
 80072cc:	3304      	adds	r3, #4
 80072ce:	3415      	adds	r4, #21
 80072d0:	42a6      	cmp	r6, r4
 80072d2:	bf38      	it	cc
 80072d4:	2304      	movcc	r3, #4
 80072d6:	441d      	add	r5, r3
 80072d8:	4473      	add	r3, lr
 80072da:	469e      	mov	lr, r3
 80072dc:	462e      	mov	r6, r5
 80072de:	4566      	cmp	r6, ip
 80072e0:	d30e      	bcc.n	8007300 <__mdiff+0xec>
 80072e2:	f10c 0203 	add.w	r2, ip, #3
 80072e6:	1b52      	subs	r2, r2, r5
 80072e8:	f022 0203 	bic.w	r2, r2, #3
 80072ec:	3d03      	subs	r5, #3
 80072ee:	45ac      	cmp	ip, r5
 80072f0:	bf38      	it	cc
 80072f2:	2200      	movcc	r2, #0
 80072f4:	441a      	add	r2, r3
 80072f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072fa:	b17b      	cbz	r3, 800731c <__mdiff+0x108>
 80072fc:	6107      	str	r7, [r0, #16]
 80072fe:	e7a3      	b.n	8007248 <__mdiff+0x34>
 8007300:	f856 8b04 	ldr.w	r8, [r6], #4
 8007304:	fa11 f288 	uxtah	r2, r1, r8
 8007308:	1414      	asrs	r4, r2, #16
 800730a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800730e:	b292      	uxth	r2, r2
 8007310:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007314:	f84e 2b04 	str.w	r2, [lr], #4
 8007318:	1421      	asrs	r1, r4, #16
 800731a:	e7e0      	b.n	80072de <__mdiff+0xca>
 800731c:	3f01      	subs	r7, #1
 800731e:	e7ea      	b.n	80072f6 <__mdiff+0xe2>
 8007320:	0800856f 	.word	0x0800856f
 8007324:	08008580 	.word	0x08008580

08007328 <__d2b>:
 8007328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800732c:	4689      	mov	r9, r1
 800732e:	2101      	movs	r1, #1
 8007330:	ec57 6b10 	vmov	r6, r7, d0
 8007334:	4690      	mov	r8, r2
 8007336:	f7ff fccf 	bl	8006cd8 <_Balloc>
 800733a:	4604      	mov	r4, r0
 800733c:	b930      	cbnz	r0, 800734c <__d2b+0x24>
 800733e:	4602      	mov	r2, r0
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <__d2b+0xb0>)
 8007342:	4826      	ldr	r0, [pc, #152]	; (80073dc <__d2b+0xb4>)
 8007344:	f240 310a 	movw	r1, #778	; 0x30a
 8007348:	f000 faac 	bl	80078a4 <__assert_func>
 800734c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007354:	bb35      	cbnz	r5, 80073a4 <__d2b+0x7c>
 8007356:	2e00      	cmp	r6, #0
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	d028      	beq.n	80073ae <__d2b+0x86>
 800735c:	4668      	mov	r0, sp
 800735e:	9600      	str	r6, [sp, #0]
 8007360:	f7ff fd82 	bl	8006e68 <__lo0bits>
 8007364:	9900      	ldr	r1, [sp, #0]
 8007366:	b300      	cbz	r0, 80073aa <__d2b+0x82>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	f1c0 0320 	rsb	r3, r0, #32
 800736e:	fa02 f303 	lsl.w	r3, r2, r3
 8007372:	430b      	orrs	r3, r1
 8007374:	40c2      	lsrs	r2, r0
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	9201      	str	r2, [sp, #4]
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	61a3      	str	r3, [r4, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	bf14      	ite	ne
 8007382:	2202      	movne	r2, #2
 8007384:	2201      	moveq	r2, #1
 8007386:	6122      	str	r2, [r4, #16]
 8007388:	b1d5      	cbz	r5, 80073c0 <__d2b+0x98>
 800738a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800738e:	4405      	add	r5, r0
 8007390:	f8c9 5000 	str.w	r5, [r9]
 8007394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007398:	f8c8 0000 	str.w	r0, [r8]
 800739c:	4620      	mov	r0, r4
 800739e:	b003      	add	sp, #12
 80073a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a8:	e7d5      	b.n	8007356 <__d2b+0x2e>
 80073aa:	6161      	str	r1, [r4, #20]
 80073ac:	e7e5      	b.n	800737a <__d2b+0x52>
 80073ae:	a801      	add	r0, sp, #4
 80073b0:	f7ff fd5a 	bl	8006e68 <__lo0bits>
 80073b4:	9b01      	ldr	r3, [sp, #4]
 80073b6:	6163      	str	r3, [r4, #20]
 80073b8:	2201      	movs	r2, #1
 80073ba:	6122      	str	r2, [r4, #16]
 80073bc:	3020      	adds	r0, #32
 80073be:	e7e3      	b.n	8007388 <__d2b+0x60>
 80073c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073c8:	f8c9 0000 	str.w	r0, [r9]
 80073cc:	6918      	ldr	r0, [r3, #16]
 80073ce:	f7ff fd2b 	bl	8006e28 <__hi0bits>
 80073d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d6:	e7df      	b.n	8007398 <__d2b+0x70>
 80073d8:	0800856f 	.word	0x0800856f
 80073dc:	08008580 	.word	0x08008580

080073e0 <_calloc_r>:
 80073e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073e2:	fba1 2402 	umull	r2, r4, r1, r2
 80073e6:	b94c      	cbnz	r4, 80073fc <_calloc_r+0x1c>
 80073e8:	4611      	mov	r1, r2
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	f000 f87a 	bl	80074e4 <_malloc_r>
 80073f0:	9a01      	ldr	r2, [sp, #4]
 80073f2:	4605      	mov	r5, r0
 80073f4:	b930      	cbnz	r0, 8007404 <_calloc_r+0x24>
 80073f6:	4628      	mov	r0, r5
 80073f8:	b003      	add	sp, #12
 80073fa:	bd30      	pop	{r4, r5, pc}
 80073fc:	220c      	movs	r2, #12
 80073fe:	6002      	str	r2, [r0, #0]
 8007400:	2500      	movs	r5, #0
 8007402:	e7f8      	b.n	80073f6 <_calloc_r+0x16>
 8007404:	4621      	mov	r1, r4
 8007406:	f7fe f941 	bl	800568c <memset>
 800740a:	e7f4      	b.n	80073f6 <_calloc_r+0x16>

0800740c <_free_r>:
 800740c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800740e:	2900      	cmp	r1, #0
 8007410:	d044      	beq.n	800749c <_free_r+0x90>
 8007412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007416:	9001      	str	r0, [sp, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f1a1 0404 	sub.w	r4, r1, #4
 800741e:	bfb8      	it	lt
 8007420:	18e4      	addlt	r4, r4, r3
 8007422:	f000 fa9b 	bl	800795c <__malloc_lock>
 8007426:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <_free_r+0x94>)
 8007428:	9801      	ldr	r0, [sp, #4]
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	b933      	cbnz	r3, 800743c <_free_r+0x30>
 800742e:	6063      	str	r3, [r4, #4]
 8007430:	6014      	str	r4, [r2, #0]
 8007432:	b003      	add	sp, #12
 8007434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007438:	f000 ba96 	b.w	8007968 <__malloc_unlock>
 800743c:	42a3      	cmp	r3, r4
 800743e:	d908      	bls.n	8007452 <_free_r+0x46>
 8007440:	6825      	ldr	r5, [r4, #0]
 8007442:	1961      	adds	r1, r4, r5
 8007444:	428b      	cmp	r3, r1
 8007446:	bf01      	itttt	eq
 8007448:	6819      	ldreq	r1, [r3, #0]
 800744a:	685b      	ldreq	r3, [r3, #4]
 800744c:	1949      	addeq	r1, r1, r5
 800744e:	6021      	streq	r1, [r4, #0]
 8007450:	e7ed      	b.n	800742e <_free_r+0x22>
 8007452:	461a      	mov	r2, r3
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	b10b      	cbz	r3, 800745c <_free_r+0x50>
 8007458:	42a3      	cmp	r3, r4
 800745a:	d9fa      	bls.n	8007452 <_free_r+0x46>
 800745c:	6811      	ldr	r1, [r2, #0]
 800745e:	1855      	adds	r5, r2, r1
 8007460:	42a5      	cmp	r5, r4
 8007462:	d10b      	bne.n	800747c <_free_r+0x70>
 8007464:	6824      	ldr	r4, [r4, #0]
 8007466:	4421      	add	r1, r4
 8007468:	1854      	adds	r4, r2, r1
 800746a:	42a3      	cmp	r3, r4
 800746c:	6011      	str	r1, [r2, #0]
 800746e:	d1e0      	bne.n	8007432 <_free_r+0x26>
 8007470:	681c      	ldr	r4, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	6053      	str	r3, [r2, #4]
 8007476:	4421      	add	r1, r4
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	e7da      	b.n	8007432 <_free_r+0x26>
 800747c:	d902      	bls.n	8007484 <_free_r+0x78>
 800747e:	230c      	movs	r3, #12
 8007480:	6003      	str	r3, [r0, #0]
 8007482:	e7d6      	b.n	8007432 <_free_r+0x26>
 8007484:	6825      	ldr	r5, [r4, #0]
 8007486:	1961      	adds	r1, r4, r5
 8007488:	428b      	cmp	r3, r1
 800748a:	bf04      	itt	eq
 800748c:	6819      	ldreq	r1, [r3, #0]
 800748e:	685b      	ldreq	r3, [r3, #4]
 8007490:	6063      	str	r3, [r4, #4]
 8007492:	bf04      	itt	eq
 8007494:	1949      	addeq	r1, r1, r5
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	6054      	str	r4, [r2, #4]
 800749a:	e7ca      	b.n	8007432 <_free_r+0x26>
 800749c:	b003      	add	sp, #12
 800749e:	bd30      	pop	{r4, r5, pc}
 80074a0:	2000037c 	.word	0x2000037c

080074a4 <sbrk_aligned>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4e0e      	ldr	r6, [pc, #56]	; (80074e0 <sbrk_aligned+0x3c>)
 80074a8:	460c      	mov	r4, r1
 80074aa:	6831      	ldr	r1, [r6, #0]
 80074ac:	4605      	mov	r5, r0
 80074ae:	b911      	cbnz	r1, 80074b6 <sbrk_aligned+0x12>
 80074b0:	f000 f9e8 	bl	8007884 <_sbrk_r>
 80074b4:	6030      	str	r0, [r6, #0]
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f9e3 	bl	8007884 <_sbrk_r>
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	d00a      	beq.n	80074d8 <sbrk_aligned+0x34>
 80074c2:	1cc4      	adds	r4, r0, #3
 80074c4:	f024 0403 	bic.w	r4, r4, #3
 80074c8:	42a0      	cmp	r0, r4
 80074ca:	d007      	beq.n	80074dc <sbrk_aligned+0x38>
 80074cc:	1a21      	subs	r1, r4, r0
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f9d8 	bl	8007884 <_sbrk_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d101      	bne.n	80074dc <sbrk_aligned+0x38>
 80074d8:	f04f 34ff 	mov.w	r4, #4294967295
 80074dc:	4620      	mov	r0, r4
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	20000380 	.word	0x20000380

080074e4 <_malloc_r>:
 80074e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4607      	mov	r7, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d905      	bls.n	800750c <_malloc_r+0x28>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	2600      	movs	r6, #0
 8007506:	4630      	mov	r0, r6
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750c:	4e2e      	ldr	r6, [pc, #184]	; (80075c8 <_malloc_r+0xe4>)
 800750e:	f000 fa25 	bl	800795c <__malloc_lock>
 8007512:	6833      	ldr	r3, [r6, #0]
 8007514:	461c      	mov	r4, r3
 8007516:	bb34      	cbnz	r4, 8007566 <_malloc_r+0x82>
 8007518:	4629      	mov	r1, r5
 800751a:	4638      	mov	r0, r7
 800751c:	f7ff ffc2 	bl	80074a4 <sbrk_aligned>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	4604      	mov	r4, r0
 8007524:	d14d      	bne.n	80075c2 <_malloc_r+0xde>
 8007526:	6834      	ldr	r4, [r6, #0]
 8007528:	4626      	mov	r6, r4
 800752a:	2e00      	cmp	r6, #0
 800752c:	d140      	bne.n	80075b0 <_malloc_r+0xcc>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	4631      	mov	r1, r6
 8007532:	4638      	mov	r0, r7
 8007534:	eb04 0803 	add.w	r8, r4, r3
 8007538:	f000 f9a4 	bl	8007884 <_sbrk_r>
 800753c:	4580      	cmp	r8, r0
 800753e:	d13a      	bne.n	80075b6 <_malloc_r+0xd2>
 8007540:	6821      	ldr	r1, [r4, #0]
 8007542:	3503      	adds	r5, #3
 8007544:	1a6d      	subs	r5, r5, r1
 8007546:	f025 0503 	bic.w	r5, r5, #3
 800754a:	3508      	adds	r5, #8
 800754c:	2d0c      	cmp	r5, #12
 800754e:	bf38      	it	cc
 8007550:	250c      	movcc	r5, #12
 8007552:	4629      	mov	r1, r5
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ffa5 	bl	80074a4 <sbrk_aligned>
 800755a:	3001      	adds	r0, #1
 800755c:	d02b      	beq.n	80075b6 <_malloc_r+0xd2>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	442b      	add	r3, r5
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	e00e      	b.n	8007584 <_malloc_r+0xa0>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	1b52      	subs	r2, r2, r5
 800756a:	d41e      	bmi.n	80075aa <_malloc_r+0xc6>
 800756c:	2a0b      	cmp	r2, #11
 800756e:	d916      	bls.n	800759e <_malloc_r+0xba>
 8007570:	1961      	adds	r1, r4, r5
 8007572:	42a3      	cmp	r3, r4
 8007574:	6025      	str	r5, [r4, #0]
 8007576:	bf18      	it	ne
 8007578:	6059      	strne	r1, [r3, #4]
 800757a:	6863      	ldr	r3, [r4, #4]
 800757c:	bf08      	it	eq
 800757e:	6031      	streq	r1, [r6, #0]
 8007580:	5162      	str	r2, [r4, r5]
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	4638      	mov	r0, r7
 8007586:	f104 060b 	add.w	r6, r4, #11
 800758a:	f000 f9ed 	bl	8007968 <__malloc_unlock>
 800758e:	f026 0607 	bic.w	r6, r6, #7
 8007592:	1d23      	adds	r3, r4, #4
 8007594:	1af2      	subs	r2, r6, r3
 8007596:	d0b6      	beq.n	8007506 <_malloc_r+0x22>
 8007598:	1b9b      	subs	r3, r3, r6
 800759a:	50a3      	str	r3, [r4, r2]
 800759c:	e7b3      	b.n	8007506 <_malloc_r+0x22>
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	bf0c      	ite	eq
 80075a4:	6032      	streq	r2, [r6, #0]
 80075a6:	605a      	strne	r2, [r3, #4]
 80075a8:	e7ec      	b.n	8007584 <_malloc_r+0xa0>
 80075aa:	4623      	mov	r3, r4
 80075ac:	6864      	ldr	r4, [r4, #4]
 80075ae:	e7b2      	b.n	8007516 <_malloc_r+0x32>
 80075b0:	4634      	mov	r4, r6
 80075b2:	6876      	ldr	r6, [r6, #4]
 80075b4:	e7b9      	b.n	800752a <_malloc_r+0x46>
 80075b6:	230c      	movs	r3, #12
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4638      	mov	r0, r7
 80075bc:	f000 f9d4 	bl	8007968 <__malloc_unlock>
 80075c0:	e7a1      	b.n	8007506 <_malloc_r+0x22>
 80075c2:	6025      	str	r5, [r4, #0]
 80075c4:	e7de      	b.n	8007584 <_malloc_r+0xa0>
 80075c6:	bf00      	nop
 80075c8:	2000037c 	.word	0x2000037c

080075cc <__ssputs_r>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	688e      	ldr	r6, [r1, #8]
 80075d2:	429e      	cmp	r6, r3
 80075d4:	4682      	mov	sl, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	4690      	mov	r8, r2
 80075da:	461f      	mov	r7, r3
 80075dc:	d838      	bhi.n	8007650 <__ssputs_r+0x84>
 80075de:	898a      	ldrh	r2, [r1, #12]
 80075e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075e4:	d032      	beq.n	800764c <__ssputs_r+0x80>
 80075e6:	6825      	ldr	r5, [r4, #0]
 80075e8:	6909      	ldr	r1, [r1, #16]
 80075ea:	eba5 0901 	sub.w	r9, r5, r1
 80075ee:	6965      	ldr	r5, [r4, #20]
 80075f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075f8:	3301      	adds	r3, #1
 80075fa:	444b      	add	r3, r9
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	429d      	cmp	r5, r3
 8007600:	bf38      	it	cc
 8007602:	461d      	movcc	r5, r3
 8007604:	0553      	lsls	r3, r2, #21
 8007606:	d531      	bpl.n	800766c <__ssputs_r+0xa0>
 8007608:	4629      	mov	r1, r5
 800760a:	f7ff ff6b 	bl	80074e4 <_malloc_r>
 800760e:	4606      	mov	r6, r0
 8007610:	b950      	cbnz	r0, 8007628 <__ssputs_r+0x5c>
 8007612:	230c      	movs	r3, #12
 8007614:	f8ca 3000 	str.w	r3, [sl]
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761e:	81a3      	strh	r3, [r4, #12]
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007628:	6921      	ldr	r1, [r4, #16]
 800762a:	464a      	mov	r2, r9
 800762c:	f7ff fb46 	bl	8006cbc <memcpy>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	6126      	str	r6, [r4, #16]
 800763e:	6165      	str	r5, [r4, #20]
 8007640:	444e      	add	r6, r9
 8007642:	eba5 0509 	sub.w	r5, r5, r9
 8007646:	6026      	str	r6, [r4, #0]
 8007648:	60a5      	str	r5, [r4, #8]
 800764a:	463e      	mov	r6, r7
 800764c:	42be      	cmp	r6, r7
 800764e:	d900      	bls.n	8007652 <__ssputs_r+0x86>
 8007650:	463e      	mov	r6, r7
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	4632      	mov	r2, r6
 8007656:	4641      	mov	r1, r8
 8007658:	f000 f966 	bl	8007928 <memmove>
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	1b9b      	subs	r3, r3, r6
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	4433      	add	r3, r6
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	2000      	movs	r0, #0
 800766a:	e7db      	b.n	8007624 <__ssputs_r+0x58>
 800766c:	462a      	mov	r2, r5
 800766e:	f000 f981 	bl	8007974 <_realloc_r>
 8007672:	4606      	mov	r6, r0
 8007674:	2800      	cmp	r0, #0
 8007676:	d1e1      	bne.n	800763c <__ssputs_r+0x70>
 8007678:	6921      	ldr	r1, [r4, #16]
 800767a:	4650      	mov	r0, sl
 800767c:	f7ff fec6 	bl	800740c <_free_r>
 8007680:	e7c7      	b.n	8007612 <__ssputs_r+0x46>
	...

08007684 <_svfiprintf_r>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4698      	mov	r8, r3
 800768a:	898b      	ldrh	r3, [r1, #12]
 800768c:	061b      	lsls	r3, r3, #24
 800768e:	b09d      	sub	sp, #116	; 0x74
 8007690:	4607      	mov	r7, r0
 8007692:	460d      	mov	r5, r1
 8007694:	4614      	mov	r4, r2
 8007696:	d50e      	bpl.n	80076b6 <_svfiprintf_r+0x32>
 8007698:	690b      	ldr	r3, [r1, #16]
 800769a:	b963      	cbnz	r3, 80076b6 <_svfiprintf_r+0x32>
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	f7ff ff21 	bl	80074e4 <_malloc_r>
 80076a2:	6028      	str	r0, [r5, #0]
 80076a4:	6128      	str	r0, [r5, #16]
 80076a6:	b920      	cbnz	r0, 80076b2 <_svfiprintf_r+0x2e>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e0d1      	b.n	8007856 <_svfiprintf_r+0x1d2>
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	616b      	str	r3, [r5, #20]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ba:	2320      	movs	r3, #32
 80076bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c4:	2330      	movs	r3, #48	; 0x30
 80076c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007870 <_svfiprintf_r+0x1ec>
 80076ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ce:	f04f 0901 	mov.w	r9, #1
 80076d2:	4623      	mov	r3, r4
 80076d4:	469a      	mov	sl, r3
 80076d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076da:	b10a      	cbz	r2, 80076e0 <_svfiprintf_r+0x5c>
 80076dc:	2a25      	cmp	r2, #37	; 0x25
 80076de:	d1f9      	bne.n	80076d4 <_svfiprintf_r+0x50>
 80076e0:	ebba 0b04 	subs.w	fp, sl, r4
 80076e4:	d00b      	beq.n	80076fe <_svfiprintf_r+0x7a>
 80076e6:	465b      	mov	r3, fp
 80076e8:	4622      	mov	r2, r4
 80076ea:	4629      	mov	r1, r5
 80076ec:	4638      	mov	r0, r7
 80076ee:	f7ff ff6d 	bl	80075cc <__ssputs_r>
 80076f2:	3001      	adds	r0, #1
 80076f4:	f000 80aa 	beq.w	800784c <_svfiprintf_r+0x1c8>
 80076f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fa:	445a      	add	r2, fp
 80076fc:	9209      	str	r2, [sp, #36]	; 0x24
 80076fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80a2 	beq.w	800784c <_svfiprintf_r+0x1c8>
 8007708:	2300      	movs	r3, #0
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007712:	f10a 0a01 	add.w	sl, sl, #1
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771e:	931a      	str	r3, [sp, #104]	; 0x68
 8007720:	4654      	mov	r4, sl
 8007722:	2205      	movs	r2, #5
 8007724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007728:	4851      	ldr	r0, [pc, #324]	; (8007870 <_svfiprintf_r+0x1ec>)
 800772a:	f7f8 fd79 	bl	8000220 <memchr>
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	b9d8      	cbnz	r0, 800776a <_svfiprintf_r+0xe6>
 8007732:	06d0      	lsls	r0, r2, #27
 8007734:	bf44      	itt	mi
 8007736:	2320      	movmi	r3, #32
 8007738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773c:	0711      	lsls	r1, r2, #28
 800773e:	bf44      	itt	mi
 8007740:	232b      	movmi	r3, #43	; 0x2b
 8007742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007746:	f89a 3000 	ldrb.w	r3, [sl]
 800774a:	2b2a      	cmp	r3, #42	; 0x2a
 800774c:	d015      	beq.n	800777a <_svfiprintf_r+0xf6>
 800774e:	9a07      	ldr	r2, [sp, #28]
 8007750:	4654      	mov	r4, sl
 8007752:	2000      	movs	r0, #0
 8007754:	f04f 0c0a 	mov.w	ip, #10
 8007758:	4621      	mov	r1, r4
 800775a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775e:	3b30      	subs	r3, #48	; 0x30
 8007760:	2b09      	cmp	r3, #9
 8007762:	d94e      	bls.n	8007802 <_svfiprintf_r+0x17e>
 8007764:	b1b0      	cbz	r0, 8007794 <_svfiprintf_r+0x110>
 8007766:	9207      	str	r2, [sp, #28]
 8007768:	e014      	b.n	8007794 <_svfiprintf_r+0x110>
 800776a:	eba0 0308 	sub.w	r3, r0, r8
 800776e:	fa09 f303 	lsl.w	r3, r9, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	46a2      	mov	sl, r4
 8007778:	e7d2      	b.n	8007720 <_svfiprintf_r+0x9c>
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	1d19      	adds	r1, r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	bfbb      	ittet	lt
 8007786:	425b      	neglt	r3, r3
 8007788:	f042 0202 	orrlt.w	r2, r2, #2
 800778c:	9307      	strge	r3, [sp, #28]
 800778e:	9307      	strlt	r3, [sp, #28]
 8007790:	bfb8      	it	lt
 8007792:	9204      	strlt	r2, [sp, #16]
 8007794:	7823      	ldrb	r3, [r4, #0]
 8007796:	2b2e      	cmp	r3, #46	; 0x2e
 8007798:	d10c      	bne.n	80077b4 <_svfiprintf_r+0x130>
 800779a:	7863      	ldrb	r3, [r4, #1]
 800779c:	2b2a      	cmp	r3, #42	; 0x2a
 800779e:	d135      	bne.n	800780c <_svfiprintf_r+0x188>
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	9203      	str	r2, [sp, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bfb8      	it	lt
 80077ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80077b0:	3402      	adds	r4, #2
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007880 <_svfiprintf_r+0x1fc>
 80077b8:	7821      	ldrb	r1, [r4, #0]
 80077ba:	2203      	movs	r2, #3
 80077bc:	4650      	mov	r0, sl
 80077be:	f7f8 fd2f 	bl	8000220 <memchr>
 80077c2:	b140      	cbz	r0, 80077d6 <_svfiprintf_r+0x152>
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	eba0 000a 	sub.w	r0, r0, sl
 80077ca:	fa03 f000 	lsl.w	r0, r3, r0
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	4303      	orrs	r3, r0
 80077d2:	3401      	adds	r4, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	4826      	ldr	r0, [pc, #152]	; (8007874 <_svfiprintf_r+0x1f0>)
 80077dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e0:	2206      	movs	r2, #6
 80077e2:	f7f8 fd1d 	bl	8000220 <memchr>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d038      	beq.n	800785c <_svfiprintf_r+0x1d8>
 80077ea:	4b23      	ldr	r3, [pc, #140]	; (8007878 <_svfiprintf_r+0x1f4>)
 80077ec:	bb1b      	cbnz	r3, 8007836 <_svfiprintf_r+0x1b2>
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	3307      	adds	r3, #7
 80077f2:	f023 0307 	bic.w	r3, r3, #7
 80077f6:	3308      	adds	r3, #8
 80077f8:	9303      	str	r3, [sp, #12]
 80077fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fc:	4433      	add	r3, r6
 80077fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007800:	e767      	b.n	80076d2 <_svfiprintf_r+0x4e>
 8007802:	fb0c 3202 	mla	r2, ip, r2, r3
 8007806:	460c      	mov	r4, r1
 8007808:	2001      	movs	r0, #1
 800780a:	e7a5      	b.n	8007758 <_svfiprintf_r+0xd4>
 800780c:	2300      	movs	r3, #0
 800780e:	3401      	adds	r4, #1
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	4619      	mov	r1, r3
 8007814:	f04f 0c0a 	mov.w	ip, #10
 8007818:	4620      	mov	r0, r4
 800781a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800781e:	3a30      	subs	r2, #48	; 0x30
 8007820:	2a09      	cmp	r2, #9
 8007822:	d903      	bls.n	800782c <_svfiprintf_r+0x1a8>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0c5      	beq.n	80077b4 <_svfiprintf_r+0x130>
 8007828:	9105      	str	r1, [sp, #20]
 800782a:	e7c3      	b.n	80077b4 <_svfiprintf_r+0x130>
 800782c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007830:	4604      	mov	r4, r0
 8007832:	2301      	movs	r3, #1
 8007834:	e7f0      	b.n	8007818 <_svfiprintf_r+0x194>
 8007836:	ab03      	add	r3, sp, #12
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	462a      	mov	r2, r5
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <_svfiprintf_r+0x1f8>)
 800783e:	a904      	add	r1, sp, #16
 8007840:	4638      	mov	r0, r7
 8007842:	f7fd ffcb 	bl	80057dc <_printf_float>
 8007846:	1c42      	adds	r2, r0, #1
 8007848:	4606      	mov	r6, r0
 800784a:	d1d6      	bne.n	80077fa <_svfiprintf_r+0x176>
 800784c:	89ab      	ldrh	r3, [r5, #12]
 800784e:	065b      	lsls	r3, r3, #25
 8007850:	f53f af2c 	bmi.w	80076ac <_svfiprintf_r+0x28>
 8007854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007856:	b01d      	add	sp, #116	; 0x74
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	ab03      	add	r3, sp, #12
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	462a      	mov	r2, r5
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <_svfiprintf_r+0x1f8>)
 8007864:	a904      	add	r1, sp, #16
 8007866:	4638      	mov	r0, r7
 8007868:	f7fe fa5c 	bl	8005d24 <_printf_i>
 800786c:	e7eb      	b.n	8007846 <_svfiprintf_r+0x1c2>
 800786e:	bf00      	nop
 8007870:	080086dc 	.word	0x080086dc
 8007874:	080086e6 	.word	0x080086e6
 8007878:	080057dd 	.word	0x080057dd
 800787c:	080075cd 	.word	0x080075cd
 8007880:	080086e2 	.word	0x080086e2

08007884 <_sbrk_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d06      	ldr	r5, [pc, #24]	; (80078a0 <_sbrk_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7fa fcc4 	bl	800221c <_sbrk>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_sbrk_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_sbrk_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000384 	.word	0x20000384

080078a4 <__assert_func>:
 80078a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078a6:	4614      	mov	r4, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <__assert_func+0x2c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4605      	mov	r5, r0
 80078b0:	68d8      	ldr	r0, [r3, #12]
 80078b2:	b14c      	cbz	r4, 80078c8 <__assert_func+0x24>
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <__assert_func+0x30>)
 80078b6:	9100      	str	r1, [sp, #0]
 80078b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078bc:	4906      	ldr	r1, [pc, #24]	; (80078d8 <__assert_func+0x34>)
 80078be:	462b      	mov	r3, r5
 80078c0:	f000 f80e 	bl	80078e0 <fiprintf>
 80078c4:	f000 faac 	bl	8007e20 <abort>
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__assert_func+0x38>)
 80078ca:	461c      	mov	r4, r3
 80078cc:	e7f3      	b.n	80078b6 <__assert_func+0x12>
 80078ce:	bf00      	nop
 80078d0:	20000038 	.word	0x20000038
 80078d4:	080086ed 	.word	0x080086ed
 80078d8:	080086fa 	.word	0x080086fa
 80078dc:	08008728 	.word	0x08008728

080078e0 <fiprintf>:
 80078e0:	b40e      	push	{r1, r2, r3}
 80078e2:	b503      	push	{r0, r1, lr}
 80078e4:	4601      	mov	r1, r0
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <fiprintf+0x20>)
 80078ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	f000 f897 	bl	8007a24 <_vfiprintf_r>
 80078f6:	b002      	add	sp, #8
 80078f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078fc:	b003      	add	sp, #12
 80078fe:	4770      	bx	lr
 8007900:	20000038 	.word	0x20000038

08007904 <__ascii_mbtowc>:
 8007904:	b082      	sub	sp, #8
 8007906:	b901      	cbnz	r1, 800790a <__ascii_mbtowc+0x6>
 8007908:	a901      	add	r1, sp, #4
 800790a:	b142      	cbz	r2, 800791e <__ascii_mbtowc+0x1a>
 800790c:	b14b      	cbz	r3, 8007922 <__ascii_mbtowc+0x1e>
 800790e:	7813      	ldrb	r3, [r2, #0]
 8007910:	600b      	str	r3, [r1, #0]
 8007912:	7812      	ldrb	r2, [r2, #0]
 8007914:	1e10      	subs	r0, r2, #0
 8007916:	bf18      	it	ne
 8007918:	2001      	movne	r0, #1
 800791a:	b002      	add	sp, #8
 800791c:	4770      	bx	lr
 800791e:	4610      	mov	r0, r2
 8007920:	e7fb      	b.n	800791a <__ascii_mbtowc+0x16>
 8007922:	f06f 0001 	mvn.w	r0, #1
 8007926:	e7f8      	b.n	800791a <__ascii_mbtowc+0x16>

08007928 <memmove>:
 8007928:	4288      	cmp	r0, r1
 800792a:	b510      	push	{r4, lr}
 800792c:	eb01 0402 	add.w	r4, r1, r2
 8007930:	d902      	bls.n	8007938 <memmove+0x10>
 8007932:	4284      	cmp	r4, r0
 8007934:	4623      	mov	r3, r4
 8007936:	d807      	bhi.n	8007948 <memmove+0x20>
 8007938:	1e43      	subs	r3, r0, #1
 800793a:	42a1      	cmp	r1, r4
 800793c:	d008      	beq.n	8007950 <memmove+0x28>
 800793e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007946:	e7f8      	b.n	800793a <memmove+0x12>
 8007948:	4402      	add	r2, r0
 800794a:	4601      	mov	r1, r0
 800794c:	428a      	cmp	r2, r1
 800794e:	d100      	bne.n	8007952 <memmove+0x2a>
 8007950:	bd10      	pop	{r4, pc}
 8007952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800795a:	e7f7      	b.n	800794c <memmove+0x24>

0800795c <__malloc_lock>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__malloc_lock+0x8>)
 800795e:	f000 bc1f 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8007962:	bf00      	nop
 8007964:	20000388 	.word	0x20000388

08007968 <__malloc_unlock>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__malloc_unlock+0x8>)
 800796a:	f000 bc1a 	b.w	80081a2 <__retarget_lock_release_recursive>
 800796e:	bf00      	nop
 8007970:	20000388 	.word	0x20000388

08007974 <_realloc_r>:
 8007974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007978:	4680      	mov	r8, r0
 800797a:	4614      	mov	r4, r2
 800797c:	460e      	mov	r6, r1
 800797e:	b921      	cbnz	r1, 800798a <_realloc_r+0x16>
 8007980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007984:	4611      	mov	r1, r2
 8007986:	f7ff bdad 	b.w	80074e4 <_malloc_r>
 800798a:	b92a      	cbnz	r2, 8007998 <_realloc_r+0x24>
 800798c:	f7ff fd3e 	bl	800740c <_free_r>
 8007990:	4625      	mov	r5, r4
 8007992:	4628      	mov	r0, r5
 8007994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007998:	f000 fc6a 	bl	8008270 <_malloc_usable_size_r>
 800799c:	4284      	cmp	r4, r0
 800799e:	4607      	mov	r7, r0
 80079a0:	d802      	bhi.n	80079a8 <_realloc_r+0x34>
 80079a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079a6:	d812      	bhi.n	80079ce <_realloc_r+0x5a>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7ff fd9a 	bl	80074e4 <_malloc_r>
 80079b0:	4605      	mov	r5, r0
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0ed      	beq.n	8007992 <_realloc_r+0x1e>
 80079b6:	42bc      	cmp	r4, r7
 80079b8:	4622      	mov	r2, r4
 80079ba:	4631      	mov	r1, r6
 80079bc:	bf28      	it	cs
 80079be:	463a      	movcs	r2, r7
 80079c0:	f7ff f97c 	bl	8006cbc <memcpy>
 80079c4:	4631      	mov	r1, r6
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7ff fd20 	bl	800740c <_free_r>
 80079cc:	e7e1      	b.n	8007992 <_realloc_r+0x1e>
 80079ce:	4635      	mov	r5, r6
 80079d0:	e7df      	b.n	8007992 <_realloc_r+0x1e>

080079d2 <__sfputc_r>:
 80079d2:	6893      	ldr	r3, [r2, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	b410      	push	{r4}
 80079da:	6093      	str	r3, [r2, #8]
 80079dc:	da08      	bge.n	80079f0 <__sfputc_r+0x1e>
 80079de:	6994      	ldr	r4, [r2, #24]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	db01      	blt.n	80079e8 <__sfputc_r+0x16>
 80079e4:	290a      	cmp	r1, #10
 80079e6:	d103      	bne.n	80079f0 <__sfputc_r+0x1e>
 80079e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ec:	f000 b94a 	b.w	8007c84 <__swbuf_r>
 80079f0:	6813      	ldr	r3, [r2, #0]
 80079f2:	1c58      	adds	r0, r3, #1
 80079f4:	6010      	str	r0, [r2, #0]
 80079f6:	7019      	strb	r1, [r3, #0]
 80079f8:	4608      	mov	r0, r1
 80079fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <__sfputs_r>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	4606      	mov	r6, r0
 8007a04:	460f      	mov	r7, r1
 8007a06:	4614      	mov	r4, r2
 8007a08:	18d5      	adds	r5, r2, r3
 8007a0a:	42ac      	cmp	r4, r5
 8007a0c:	d101      	bne.n	8007a12 <__sfputs_r+0x12>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e007      	b.n	8007a22 <__sfputs_r+0x22>
 8007a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a16:	463a      	mov	r2, r7
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff ffda 	bl	80079d2 <__sfputc_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d1f3      	bne.n	8007a0a <__sfputs_r+0xa>
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a24 <_vfiprintf_r>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	460d      	mov	r5, r1
 8007a2a:	b09d      	sub	sp, #116	; 0x74
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	4698      	mov	r8, r3
 8007a30:	4606      	mov	r6, r0
 8007a32:	b118      	cbz	r0, 8007a3c <_vfiprintf_r+0x18>
 8007a34:	6983      	ldr	r3, [r0, #24]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x18>
 8007a38:	f000 fb14 	bl	8008064 <__sinit>
 8007a3c:	4b89      	ldr	r3, [pc, #548]	; (8007c64 <_vfiprintf_r+0x240>)
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	d11b      	bne.n	8007a7a <_vfiprintf_r+0x56>
 8007a42:	6875      	ldr	r5, [r6, #4]
 8007a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a46:	07d9      	lsls	r1, r3, #31
 8007a48:	d405      	bmi.n	8007a56 <_vfiprintf_r+0x32>
 8007a4a:	89ab      	ldrh	r3, [r5, #12]
 8007a4c:	059a      	lsls	r2, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_vfiprintf_r+0x32>
 8007a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a52:	f000 fba5 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007a56:	89ab      	ldrh	r3, [r5, #12]
 8007a58:	071b      	lsls	r3, r3, #28
 8007a5a:	d501      	bpl.n	8007a60 <_vfiprintf_r+0x3c>
 8007a5c:	692b      	ldr	r3, [r5, #16]
 8007a5e:	b9eb      	cbnz	r3, 8007a9c <_vfiprintf_r+0x78>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f96e 	bl	8007d44 <__swsetup_r>
 8007a68:	b1c0      	cbz	r0, 8007a9c <_vfiprintf_r+0x78>
 8007a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a6c:	07dc      	lsls	r4, r3, #31
 8007a6e:	d50e      	bpl.n	8007a8e <_vfiprintf_r+0x6a>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	b01d      	add	sp, #116	; 0x74
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	4b7b      	ldr	r3, [pc, #492]	; (8007c68 <_vfiprintf_r+0x244>)
 8007a7c:	429d      	cmp	r5, r3
 8007a7e:	d101      	bne.n	8007a84 <_vfiprintf_r+0x60>
 8007a80:	68b5      	ldr	r5, [r6, #8]
 8007a82:	e7df      	b.n	8007a44 <_vfiprintf_r+0x20>
 8007a84:	4b79      	ldr	r3, [pc, #484]	; (8007c6c <_vfiprintf_r+0x248>)
 8007a86:	429d      	cmp	r5, r3
 8007a88:	bf08      	it	eq
 8007a8a:	68f5      	ldreq	r5, [r6, #12]
 8007a8c:	e7da      	b.n	8007a44 <_vfiprintf_r+0x20>
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	0598      	lsls	r0, r3, #22
 8007a92:	d4ed      	bmi.n	8007a70 <_vfiprintf_r+0x4c>
 8007a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a96:	f000 fb84 	bl	80081a2 <__retarget_lock_release_recursive>
 8007a9a:	e7e9      	b.n	8007a70 <_vfiprintf_r+0x4c>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	2320      	movs	r3, #32
 8007aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aaa:	2330      	movs	r3, #48	; 0x30
 8007aac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c70 <_vfiprintf_r+0x24c>
 8007ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab4:	f04f 0901 	mov.w	r9, #1
 8007ab8:	4623      	mov	r3, r4
 8007aba:	469a      	mov	sl, r3
 8007abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac0:	b10a      	cbz	r2, 8007ac6 <_vfiprintf_r+0xa2>
 8007ac2:	2a25      	cmp	r2, #37	; 0x25
 8007ac4:	d1f9      	bne.n	8007aba <_vfiprintf_r+0x96>
 8007ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8007aca:	d00b      	beq.n	8007ae4 <_vfiprintf_r+0xc0>
 8007acc:	465b      	mov	r3, fp
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff ff94 	bl	8007a00 <__sfputs_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f000 80aa 	beq.w	8007c32 <_vfiprintf_r+0x20e>
 8007ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae0:	445a      	add	r2, fp
 8007ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80a2 	beq.w	8007c32 <_vfiprintf_r+0x20e>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af8:	f10a 0a01 	add.w	sl, sl, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b04:	931a      	str	r3, [sp, #104]	; 0x68
 8007b06:	4654      	mov	r4, sl
 8007b08:	2205      	movs	r2, #5
 8007b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0e:	4858      	ldr	r0, [pc, #352]	; (8007c70 <_vfiprintf_r+0x24c>)
 8007b10:	f7f8 fb86 	bl	8000220 <memchr>
 8007b14:	9a04      	ldr	r2, [sp, #16]
 8007b16:	b9d8      	cbnz	r0, 8007b50 <_vfiprintf_r+0x12c>
 8007b18:	06d1      	lsls	r1, r2, #27
 8007b1a:	bf44      	itt	mi
 8007b1c:	2320      	movmi	r3, #32
 8007b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b22:	0713      	lsls	r3, r2, #28
 8007b24:	bf44      	itt	mi
 8007b26:	232b      	movmi	r3, #43	; 0x2b
 8007b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b30:	2b2a      	cmp	r3, #42	; 0x2a
 8007b32:	d015      	beq.n	8007b60 <_vfiprintf_r+0x13c>
 8007b34:	9a07      	ldr	r2, [sp, #28]
 8007b36:	4654      	mov	r4, sl
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f04f 0c0a 	mov.w	ip, #10
 8007b3e:	4621      	mov	r1, r4
 8007b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b44:	3b30      	subs	r3, #48	; 0x30
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d94e      	bls.n	8007be8 <_vfiprintf_r+0x1c4>
 8007b4a:	b1b0      	cbz	r0, 8007b7a <_vfiprintf_r+0x156>
 8007b4c:	9207      	str	r2, [sp, #28]
 8007b4e:	e014      	b.n	8007b7a <_vfiprintf_r+0x156>
 8007b50:	eba0 0308 	sub.w	r3, r0, r8
 8007b54:	fa09 f303 	lsl.w	r3, r9, r3
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	46a2      	mov	sl, r4
 8007b5e:	e7d2      	b.n	8007b06 <_vfiprintf_r+0xe2>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	1d19      	adds	r1, r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	9103      	str	r1, [sp, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfbb      	ittet	lt
 8007b6c:	425b      	neglt	r3, r3
 8007b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b72:	9307      	strge	r3, [sp, #28]
 8007b74:	9307      	strlt	r3, [sp, #28]
 8007b76:	bfb8      	it	lt
 8007b78:	9204      	strlt	r2, [sp, #16]
 8007b7a:	7823      	ldrb	r3, [r4, #0]
 8007b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b7e:	d10c      	bne.n	8007b9a <_vfiprintf_r+0x176>
 8007b80:	7863      	ldrb	r3, [r4, #1]
 8007b82:	2b2a      	cmp	r3, #42	; 0x2a
 8007b84:	d135      	bne.n	8007bf2 <_vfiprintf_r+0x1ce>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	1d1a      	adds	r2, r3, #4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	9203      	str	r2, [sp, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfb8      	it	lt
 8007b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b96:	3402      	adds	r4, #2
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c80 <_vfiprintf_r+0x25c>
 8007b9e:	7821      	ldrb	r1, [r4, #0]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	f7f8 fb3c 	bl	8000220 <memchr>
 8007ba8:	b140      	cbz	r0, 8007bbc <_vfiprintf_r+0x198>
 8007baa:	2340      	movs	r3, #64	; 0x40
 8007bac:	eba0 000a 	sub.w	r0, r0, sl
 8007bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb4:	9b04      	ldr	r3, [sp, #16]
 8007bb6:	4303      	orrs	r3, r0
 8007bb8:	3401      	adds	r4, #1
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc0:	482c      	ldr	r0, [pc, #176]	; (8007c74 <_vfiprintf_r+0x250>)
 8007bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc6:	2206      	movs	r2, #6
 8007bc8:	f7f8 fb2a 	bl	8000220 <memchr>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d03f      	beq.n	8007c50 <_vfiprintf_r+0x22c>
 8007bd0:	4b29      	ldr	r3, [pc, #164]	; (8007c78 <_vfiprintf_r+0x254>)
 8007bd2:	bb1b      	cbnz	r3, 8007c1c <_vfiprintf_r+0x1f8>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	3307      	adds	r3, #7
 8007bd8:	f023 0307 	bic.w	r3, r3, #7
 8007bdc:	3308      	adds	r3, #8
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be2:	443b      	add	r3, r7
 8007be4:	9309      	str	r3, [sp, #36]	; 0x24
 8007be6:	e767      	b.n	8007ab8 <_vfiprintf_r+0x94>
 8007be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bec:	460c      	mov	r4, r1
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e7a5      	b.n	8007b3e <_vfiprintf_r+0x11a>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	9305      	str	r3, [sp, #20]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f04f 0c0a 	mov.w	ip, #10
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c04:	3a30      	subs	r2, #48	; 0x30
 8007c06:	2a09      	cmp	r2, #9
 8007c08:	d903      	bls.n	8007c12 <_vfiprintf_r+0x1ee>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0c5      	beq.n	8007b9a <_vfiprintf_r+0x176>
 8007c0e:	9105      	str	r1, [sp, #20]
 8007c10:	e7c3      	b.n	8007b9a <_vfiprintf_r+0x176>
 8007c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c16:	4604      	mov	r4, r0
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e7f0      	b.n	8007bfe <_vfiprintf_r+0x1da>
 8007c1c:	ab03      	add	r3, sp, #12
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	462a      	mov	r2, r5
 8007c22:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <_vfiprintf_r+0x258>)
 8007c24:	a904      	add	r1, sp, #16
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7fd fdd8 	bl	80057dc <_printf_float>
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	1c78      	adds	r0, r7, #1
 8007c30:	d1d6      	bne.n	8007be0 <_vfiprintf_r+0x1bc>
 8007c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c34:	07d9      	lsls	r1, r3, #31
 8007c36:	d405      	bmi.n	8007c44 <_vfiprintf_r+0x220>
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	059a      	lsls	r2, r3, #22
 8007c3c:	d402      	bmi.n	8007c44 <_vfiprintf_r+0x220>
 8007c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c40:	f000 faaf 	bl	80081a2 <__retarget_lock_release_recursive>
 8007c44:	89ab      	ldrh	r3, [r5, #12]
 8007c46:	065b      	lsls	r3, r3, #25
 8007c48:	f53f af12 	bmi.w	8007a70 <_vfiprintf_r+0x4c>
 8007c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c4e:	e711      	b.n	8007a74 <_vfiprintf_r+0x50>
 8007c50:	ab03      	add	r3, sp, #12
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <_vfiprintf_r+0x258>)
 8007c58:	a904      	add	r1, sp, #16
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7fe f862 	bl	8005d24 <_printf_i>
 8007c60:	e7e4      	b.n	8007c2c <_vfiprintf_r+0x208>
 8007c62:	bf00      	nop
 8007c64:	08008854 	.word	0x08008854
 8007c68:	08008874 	.word	0x08008874
 8007c6c:	08008834 	.word	0x08008834
 8007c70:	080086dc 	.word	0x080086dc
 8007c74:	080086e6 	.word	0x080086e6
 8007c78:	080057dd 	.word	0x080057dd
 8007c7c:	08007a01 	.word	0x08007a01
 8007c80:	080086e2 	.word	0x080086e2

08007c84 <__swbuf_r>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	460e      	mov	r6, r1
 8007c88:	4614      	mov	r4, r2
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	b118      	cbz	r0, 8007c96 <__swbuf_r+0x12>
 8007c8e:	6983      	ldr	r3, [r0, #24]
 8007c90:	b90b      	cbnz	r3, 8007c96 <__swbuf_r+0x12>
 8007c92:	f000 f9e7 	bl	8008064 <__sinit>
 8007c96:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <__swbuf_r+0x98>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	d12b      	bne.n	8007cf4 <__swbuf_r+0x70>
 8007c9c:	686c      	ldr	r4, [r5, #4]
 8007c9e:	69a3      	ldr	r3, [r4, #24]
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	071a      	lsls	r2, r3, #28
 8007ca6:	d52f      	bpl.n	8007d08 <__swbuf_r+0x84>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	b36b      	cbz	r3, 8007d08 <__swbuf_r+0x84>
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	6820      	ldr	r0, [r4, #0]
 8007cb0:	1ac0      	subs	r0, r0, r3
 8007cb2:	6963      	ldr	r3, [r4, #20]
 8007cb4:	b2f6      	uxtb	r6, r6
 8007cb6:	4283      	cmp	r3, r0
 8007cb8:	4637      	mov	r7, r6
 8007cba:	dc04      	bgt.n	8007cc6 <__swbuf_r+0x42>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f93c 	bl	8007f3c <_fflush_r>
 8007cc4:	bb30      	cbnz	r0, 8007d14 <__swbuf_r+0x90>
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	701e      	strb	r6, [r3, #0]
 8007cd4:	6963      	ldr	r3, [r4, #20]
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	4283      	cmp	r3, r0
 8007cda:	d004      	beq.n	8007ce6 <__swbuf_r+0x62>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d506      	bpl.n	8007cf0 <__swbuf_r+0x6c>
 8007ce2:	2e0a      	cmp	r6, #10
 8007ce4:	d104      	bne.n	8007cf0 <__swbuf_r+0x6c>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 f927 	bl	8007f3c <_fflush_r>
 8007cee:	b988      	cbnz	r0, 8007d14 <__swbuf_r+0x90>
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <__swbuf_r+0x9c>)
 8007cf6:	429c      	cmp	r4, r3
 8007cf8:	d101      	bne.n	8007cfe <__swbuf_r+0x7a>
 8007cfa:	68ac      	ldr	r4, [r5, #8]
 8007cfc:	e7cf      	b.n	8007c9e <__swbuf_r+0x1a>
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <__swbuf_r+0xa0>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	bf08      	it	eq
 8007d04:	68ec      	ldreq	r4, [r5, #12]
 8007d06:	e7ca      	b.n	8007c9e <__swbuf_r+0x1a>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f81a 	bl	8007d44 <__swsetup_r>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d0cb      	beq.n	8007cac <__swbuf_r+0x28>
 8007d14:	f04f 37ff 	mov.w	r7, #4294967295
 8007d18:	e7ea      	b.n	8007cf0 <__swbuf_r+0x6c>
 8007d1a:	bf00      	nop
 8007d1c:	08008854 	.word	0x08008854
 8007d20:	08008874 	.word	0x08008874
 8007d24:	08008834 	.word	0x08008834

08007d28 <__ascii_wctomb>:
 8007d28:	b149      	cbz	r1, 8007d3e <__ascii_wctomb+0x16>
 8007d2a:	2aff      	cmp	r2, #255	; 0xff
 8007d2c:	bf85      	ittet	hi
 8007d2e:	238a      	movhi	r3, #138	; 0x8a
 8007d30:	6003      	strhi	r3, [r0, #0]
 8007d32:	700a      	strbls	r2, [r1, #0]
 8007d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d38:	bf98      	it	ls
 8007d3a:	2001      	movls	r0, #1
 8007d3c:	4770      	bx	lr
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4770      	bx	lr
	...

08007d44 <__swsetup_r>:
 8007d44:	4b32      	ldr	r3, [pc, #200]	; (8007e10 <__swsetup_r+0xcc>)
 8007d46:	b570      	push	{r4, r5, r6, lr}
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	b125      	cbz	r5, 8007d5a <__swsetup_r+0x16>
 8007d50:	69ab      	ldr	r3, [r5, #24]
 8007d52:	b913      	cbnz	r3, 8007d5a <__swsetup_r+0x16>
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 f985 	bl	8008064 <__sinit>
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <__swsetup_r+0xd0>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d10f      	bne.n	8007d80 <__swsetup_r+0x3c>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d68:	0719      	lsls	r1, r3, #28
 8007d6a:	d42c      	bmi.n	8007dc6 <__swsetup_r+0x82>
 8007d6c:	06dd      	lsls	r5, r3, #27
 8007d6e:	d411      	bmi.n	8007d94 <__swsetup_r+0x50>
 8007d70:	2309      	movs	r3, #9
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7e:	e03e      	b.n	8007dfe <__swsetup_r+0xba>
 8007d80:	4b25      	ldr	r3, [pc, #148]	; (8007e18 <__swsetup_r+0xd4>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d101      	bne.n	8007d8a <__swsetup_r+0x46>
 8007d86:	68ac      	ldr	r4, [r5, #8]
 8007d88:	e7eb      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d8a:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <__swsetup_r+0xd8>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	bf08      	it	eq
 8007d90:	68ec      	ldreq	r4, [r5, #12]
 8007d92:	e7e6      	b.n	8007d62 <__swsetup_r+0x1e>
 8007d94:	0758      	lsls	r0, r3, #29
 8007d96:	d512      	bpl.n	8007dbe <__swsetup_r+0x7a>
 8007d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9a:	b141      	cbz	r1, 8007dae <__swsetup_r+0x6a>
 8007d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da0:	4299      	cmp	r1, r3
 8007da2:	d002      	beq.n	8007daa <__swsetup_r+0x66>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fb31 	bl	800740c <_free_r>
 8007daa:	2300      	movs	r3, #0
 8007dac:	6363      	str	r3, [r4, #52]	; 0x34
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	2300      	movs	r3, #0
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	b94b      	cbnz	r3, 8007dde <__swsetup_r+0x9a>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd4:	d003      	beq.n	8007dde <__swsetup_r+0x9a>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 fa09 	bl	80081f0 <__smakebuf_r>
 8007dde:	89a0      	ldrh	r0, [r4, #12]
 8007de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de4:	f010 0301 	ands.w	r3, r0, #1
 8007de8:	d00a      	beq.n	8007e00 <__swsetup_r+0xbc>
 8007dea:	2300      	movs	r3, #0
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6963      	ldr	r3, [r4, #20]
 8007df0:	425b      	negs	r3, r3
 8007df2:	61a3      	str	r3, [r4, #24]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	b943      	cbnz	r3, 8007e0a <__swsetup_r+0xc6>
 8007df8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dfc:	d1ba      	bne.n	8007d74 <__swsetup_r+0x30>
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	0781      	lsls	r1, r0, #30
 8007e02:	bf58      	it	pl
 8007e04:	6963      	ldrpl	r3, [r4, #20]
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	e7f4      	b.n	8007df4 <__swsetup_r+0xb0>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e7f7      	b.n	8007dfe <__swsetup_r+0xba>
 8007e0e:	bf00      	nop
 8007e10:	20000038 	.word	0x20000038
 8007e14:	08008854 	.word	0x08008854
 8007e18:	08008874 	.word	0x08008874
 8007e1c:	08008834 	.word	0x08008834

08007e20 <abort>:
 8007e20:	b508      	push	{r3, lr}
 8007e22:	2006      	movs	r0, #6
 8007e24:	f000 fa54 	bl	80082d0 <raise>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f7fa f97f 	bl	800212c <_exit>
	...

08007e30 <__sflush_r>:
 8007e30:	898a      	ldrh	r2, [r1, #12]
 8007e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	4605      	mov	r5, r0
 8007e38:	0710      	lsls	r0, r2, #28
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	d458      	bmi.n	8007ef0 <__sflush_r+0xc0>
 8007e3e:	684b      	ldr	r3, [r1, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc05      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dc02      	bgt.n	8007e50 <__sflush_r+0x20>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	d0f9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007e56:	2300      	movs	r3, #0
 8007e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e5c:	682f      	ldr	r7, [r5, #0]
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	d032      	beq.n	8007ec8 <__sflush_r+0x98>
 8007e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	075a      	lsls	r2, r3, #29
 8007e68:	d505      	bpl.n	8007e76 <__sflush_r+0x46>
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	1ac0      	subs	r0, r0, r3
 8007e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e70:	b10b      	cbz	r3, 8007e76 <__sflush_r+0x46>
 8007e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e74:	1ac0      	subs	r0, r0, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b0      	blx	r6
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	d106      	bne.n	8007e96 <__sflush_r+0x66>
 8007e88:	6829      	ldr	r1, [r5, #0]
 8007e8a:	291d      	cmp	r1, #29
 8007e8c:	d82c      	bhi.n	8007ee8 <__sflush_r+0xb8>
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	; (8007f38 <__sflush_r+0x108>)
 8007e90:	40ca      	lsrs	r2, r1
 8007e92:	07d6      	lsls	r6, r2, #31
 8007e94:	d528      	bpl.n	8007ee8 <__sflush_r+0xb8>
 8007e96:	2200      	movs	r2, #0
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	04d9      	lsls	r1, r3, #19
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	d504      	bpl.n	8007eac <__sflush_r+0x7c>
 8007ea2:	1c42      	adds	r2, r0, #1
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0x7a>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b903      	cbnz	r3, 8007eac <__sflush_r+0x7c>
 8007eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8007eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eae:	602f      	str	r7, [r5, #0]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	d0ca      	beq.n	8007e4a <__sflush_r+0x1a>
 8007eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d002      	beq.n	8007ec2 <__sflush_r+0x92>
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f7ff faa5 	bl	800740c <_free_r>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec6:	e7c1      	b.n	8007e4c <__sflush_r+0x1c>
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b0      	blx	r6
 8007ed0:	1c41      	adds	r1, r0, #1
 8007ed2:	d1c7      	bne.n	8007e64 <__sflush_r+0x34>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0c4      	beq.n	8007e64 <__sflush_r+0x34>
 8007eda:	2b1d      	cmp	r3, #29
 8007edc:	d001      	beq.n	8007ee2 <__sflush_r+0xb2>
 8007ede:	2b16      	cmp	r3, #22
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0xb6>
 8007ee2:	602f      	str	r7, [r5, #0]
 8007ee4:	e7b1      	b.n	8007e4a <__sflush_r+0x1a>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	e7ad      	b.n	8007e4c <__sflush_r+0x1c>
 8007ef0:	690f      	ldr	r7, [r1, #16]
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	d0a9      	beq.n	8007e4a <__sflush_r+0x1a>
 8007ef6:	0793      	lsls	r3, r2, #30
 8007ef8:	680e      	ldr	r6, [r1, #0]
 8007efa:	bf08      	it	eq
 8007efc:	694b      	ldreq	r3, [r1, #20]
 8007efe:	600f      	str	r7, [r1, #0]
 8007f00:	bf18      	it	ne
 8007f02:	2300      	movne	r3, #0
 8007f04:	eba6 0807 	sub.w	r8, r6, r7
 8007f08:	608b      	str	r3, [r1, #8]
 8007f0a:	f1b8 0f00 	cmp.w	r8, #0
 8007f0e:	dd9c      	ble.n	8007e4a <__sflush_r+0x1a>
 8007f10:	6a21      	ldr	r1, [r4, #32]
 8007f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f14:	4643      	mov	r3, r8
 8007f16:	463a      	mov	r2, r7
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b0      	blx	r6
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	dc06      	bgt.n	8007f2e <__sflush_r+0xfe>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e78e      	b.n	8007e4c <__sflush_r+0x1c>
 8007f2e:	4407      	add	r7, r0
 8007f30:	eba8 0800 	sub.w	r8, r8, r0
 8007f34:	e7e9      	b.n	8007f0a <__sflush_r+0xda>
 8007f36:	bf00      	nop
 8007f38:	20400001 	.word	0x20400001

08007f3c <_fflush_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	690b      	ldr	r3, [r1, #16]
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b913      	cbnz	r3, 8007f4c <_fflush_r+0x10>
 8007f46:	2500      	movs	r5, #0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	b118      	cbz	r0, 8007f56 <_fflush_r+0x1a>
 8007f4e:	6983      	ldr	r3, [r0, #24]
 8007f50:	b90b      	cbnz	r3, 8007f56 <_fflush_r+0x1a>
 8007f52:	f000 f887 	bl	8008064 <__sinit>
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <_fflush_r+0x6c>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d11b      	bne.n	8007f94 <_fflush_r+0x58>
 8007f5c:	686c      	ldr	r4, [r5, #4]
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0ef      	beq.n	8007f46 <_fflush_r+0xa>
 8007f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f68:	07d0      	lsls	r0, r2, #31
 8007f6a:	d404      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f6c:	0599      	lsls	r1, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_fflush_r+0x3a>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f000 f915 	bl	80081a0 <__retarget_lock_acquire_recursive>
 8007f76:	4628      	mov	r0, r5
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7ff ff59 	bl	8007e30 <__sflush_r>
 8007f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f80:	07da      	lsls	r2, r3, #31
 8007f82:	4605      	mov	r5, r0
 8007f84:	d4e0      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	d4dd      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f000 f908 	bl	80081a2 <__retarget_lock_release_recursive>
 8007f92:	e7d9      	b.n	8007f48 <_fflush_r+0xc>
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_fflush_r+0x70>)
 8007f96:	429c      	cmp	r4, r3
 8007f98:	d101      	bne.n	8007f9e <_fflush_r+0x62>
 8007f9a:	68ac      	ldr	r4, [r5, #8]
 8007f9c:	e7df      	b.n	8007f5e <_fflush_r+0x22>
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <_fflush_r+0x74>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	bf08      	it	eq
 8007fa4:	68ec      	ldreq	r4, [r5, #12]
 8007fa6:	e7da      	b.n	8007f5e <_fflush_r+0x22>
 8007fa8:	08008854 	.word	0x08008854
 8007fac:	08008874 	.word	0x08008874
 8007fb0:	08008834 	.word	0x08008834

08007fb4 <std>:
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e9c0 3300 	strd	r3, r3, [r0]
 8007fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc2:	6083      	str	r3, [r0, #8]
 8007fc4:	8181      	strh	r1, [r0, #12]
 8007fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fc8:	81c2      	strh	r2, [r0, #14]
 8007fca:	6183      	str	r3, [r0, #24]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	2208      	movs	r2, #8
 8007fd0:	305c      	adds	r0, #92	; 0x5c
 8007fd2:	f7fd fb5b 	bl	800568c <memset>
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <std+0x38>)
 8007fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <std+0x3c>)
 8007fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <std+0x40>)
 8007fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x44>)
 8007fe4:	6224      	str	r4, [r4, #32]
 8007fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08008309 	.word	0x08008309
 8007ff0:	0800832b 	.word	0x0800832b
 8007ff4:	08008363 	.word	0x08008363
 8007ff8:	08008387 	.word	0x08008387

08007ffc <_cleanup_r>:
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <_cleanup_r+0x8>)
 8007ffe:	f000 b8af 	b.w	8008160 <_fwalk_reent>
 8008002:	bf00      	nop
 8008004:	08007f3d 	.word	0x08007f3d

08008008 <__sfmoreglue>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2268      	movs	r2, #104	; 0x68
 800800c:	1e4d      	subs	r5, r1, #1
 800800e:	4355      	muls	r5, r2
 8008010:	460e      	mov	r6, r1
 8008012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008016:	f7ff fa65 	bl	80074e4 <_malloc_r>
 800801a:	4604      	mov	r4, r0
 800801c:	b140      	cbz	r0, 8008030 <__sfmoreglue+0x28>
 800801e:	2100      	movs	r1, #0
 8008020:	e9c0 1600 	strd	r1, r6, [r0]
 8008024:	300c      	adds	r0, #12
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800802c:	f7fd fb2e 	bl	800568c <memset>
 8008030:	4620      	mov	r0, r4
 8008032:	bd70      	pop	{r4, r5, r6, pc}

08008034 <__sfp_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_acquire+0x8>)
 8008036:	f000 b8b3 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	20000389 	.word	0x20000389

08008040 <__sfp_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_release+0x8>)
 8008042:	f000 b8ae 	b.w	80081a2 <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	20000389 	.word	0x20000389

0800804c <__sinit_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_acquire+0x8>)
 800804e:	f000 b8a7 	b.w	80081a0 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	2000038a 	.word	0x2000038a

08008058 <__sinit_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_release+0x8>)
 800805a:	f000 b8a2 	b.w	80081a2 <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	2000038a 	.word	0x2000038a

08008064 <__sinit>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	f7ff fff0 	bl	800804c <__sinit_lock_acquire>
 800806c:	69a3      	ldr	r3, [r4, #24]
 800806e:	b11b      	cbz	r3, 8008078 <__sinit+0x14>
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	f7ff bff0 	b.w	8008058 <__sinit_lock_release>
 8008078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800807c:	6523      	str	r3, [r4, #80]	; 0x50
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <__sinit+0x68>)
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <__sinit+0x6c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	62a2      	str	r2, [r4, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bf04      	itt	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	61a3      	streq	r3, [r4, #24]
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f820 	bl	80080d4 <__sfp>
 8008094:	6060      	str	r0, [r4, #4]
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f81c 	bl	80080d4 <__sfp>
 800809c:	60a0      	str	r0, [r4, #8]
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f818 	bl	80080d4 <__sfp>
 80080a4:	2200      	movs	r2, #0
 80080a6:	60e0      	str	r0, [r4, #12]
 80080a8:	2104      	movs	r1, #4
 80080aa:	6860      	ldr	r0, [r4, #4]
 80080ac:	f7ff ff82 	bl	8007fb4 <std>
 80080b0:	68a0      	ldr	r0, [r4, #8]
 80080b2:	2201      	movs	r2, #1
 80080b4:	2109      	movs	r1, #9
 80080b6:	f7ff ff7d 	bl	8007fb4 <std>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	2202      	movs	r2, #2
 80080be:	2112      	movs	r1, #18
 80080c0:	f7ff ff78 	bl	8007fb4 <std>
 80080c4:	2301      	movs	r3, #1
 80080c6:	61a3      	str	r3, [r4, #24]
 80080c8:	e7d2      	b.n	8008070 <__sinit+0xc>
 80080ca:	bf00      	nop
 80080cc:	080084b8 	.word	0x080084b8
 80080d0:	08007ffd 	.word	0x08007ffd

080080d4 <__sfp>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	4607      	mov	r7, r0
 80080d8:	f7ff ffac 	bl	8008034 <__sfp_lock_acquire>
 80080dc:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <__sfp+0x84>)
 80080de:	681e      	ldr	r6, [r3, #0]
 80080e0:	69b3      	ldr	r3, [r6, #24]
 80080e2:	b913      	cbnz	r3, 80080ea <__sfp+0x16>
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ffbd 	bl	8008064 <__sinit>
 80080ea:	3648      	adds	r6, #72	; 0x48
 80080ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	d503      	bpl.n	80080fc <__sfp+0x28>
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	b30b      	cbz	r3, 800813c <__sfp+0x68>
 80080f8:	6836      	ldr	r6, [r6, #0]
 80080fa:	e7f7      	b.n	80080ec <__sfp+0x18>
 80080fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008100:	b9d5      	cbnz	r5, 8008138 <__sfp+0x64>
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <__sfp+0x88>)
 8008104:	60e3      	str	r3, [r4, #12]
 8008106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800810a:	6665      	str	r5, [r4, #100]	; 0x64
 800810c:	f000 f847 	bl	800819e <__retarget_lock_init_recursive>
 8008110:	f7ff ff96 	bl	8008040 <__sfp_lock_release>
 8008114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800811c:	6025      	str	r5, [r4, #0]
 800811e:	61a5      	str	r5, [r4, #24]
 8008120:	2208      	movs	r2, #8
 8008122:	4629      	mov	r1, r5
 8008124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008128:	f7fd fab0 	bl	800568c <memset>
 800812c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008134:	4620      	mov	r0, r4
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	3468      	adds	r4, #104	; 0x68
 800813a:	e7d9      	b.n	80080f0 <__sfp+0x1c>
 800813c:	2104      	movs	r1, #4
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ff62 	bl	8008008 <__sfmoreglue>
 8008144:	4604      	mov	r4, r0
 8008146:	6030      	str	r0, [r6, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d1d5      	bne.n	80080f8 <__sfp+0x24>
 800814c:	f7ff ff78 	bl	8008040 <__sfp_lock_release>
 8008150:	230c      	movs	r3, #12
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	e7ee      	b.n	8008134 <__sfp+0x60>
 8008156:	bf00      	nop
 8008158:	080084b8 	.word	0x080084b8
 800815c:	ffff0001 	.word	0xffff0001

08008160 <_fwalk_reent>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4606      	mov	r6, r0
 8008166:	4688      	mov	r8, r1
 8008168:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800816c:	2700      	movs	r7, #0
 800816e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008172:	f1b9 0901 	subs.w	r9, r9, #1
 8008176:	d505      	bpl.n	8008184 <_fwalk_reent+0x24>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	2c00      	cmp	r4, #0
 800817c:	d1f7      	bne.n	800816e <_fwalk_reent+0xe>
 800817e:	4638      	mov	r0, r7
 8008180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008184:	89ab      	ldrh	r3, [r5, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d907      	bls.n	800819a <_fwalk_reent+0x3a>
 800818a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818e:	3301      	adds	r3, #1
 8008190:	d003      	beq.n	800819a <_fwalk_reent+0x3a>
 8008192:	4629      	mov	r1, r5
 8008194:	4630      	mov	r0, r6
 8008196:	47c0      	blx	r8
 8008198:	4307      	orrs	r7, r0
 800819a:	3568      	adds	r5, #104	; 0x68
 800819c:	e7e9      	b.n	8008172 <_fwalk_reent+0x12>

0800819e <__retarget_lock_init_recursive>:
 800819e:	4770      	bx	lr

080081a0 <__retarget_lock_acquire_recursive>:
 80081a0:	4770      	bx	lr

080081a2 <__retarget_lock_release_recursive>:
 80081a2:	4770      	bx	lr

080081a4 <__swhatbuf_r>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	460e      	mov	r6, r1
 80081a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ac:	2900      	cmp	r1, #0
 80081ae:	b096      	sub	sp, #88	; 0x58
 80081b0:	4614      	mov	r4, r2
 80081b2:	461d      	mov	r5, r3
 80081b4:	da08      	bge.n	80081c8 <__swhatbuf_r+0x24>
 80081b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	061a      	lsls	r2, r3, #24
 80081c0:	d410      	bmi.n	80081e4 <__swhatbuf_r+0x40>
 80081c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c6:	e00e      	b.n	80081e6 <__swhatbuf_r+0x42>
 80081c8:	466a      	mov	r2, sp
 80081ca:	f000 f903 	bl	80083d4 <_fstat_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	dbf1      	blt.n	80081b6 <__swhatbuf_r+0x12>
 80081d2:	9a01      	ldr	r2, [sp, #4]
 80081d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081dc:	425a      	negs	r2, r3
 80081de:	415a      	adcs	r2, r3
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	e7ee      	b.n	80081c2 <__swhatbuf_r+0x1e>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	2000      	movs	r0, #0
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	b016      	add	sp, #88	; 0x58
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080081f0 <__smakebuf_r>:
 80081f0:	898b      	ldrh	r3, [r1, #12]
 80081f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f4:	079d      	lsls	r5, r3, #30
 80081f6:	4606      	mov	r6, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	d507      	bpl.n	800820c <__smakebuf_r+0x1c>
 80081fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	6123      	str	r3, [r4, #16]
 8008204:	2301      	movs	r3, #1
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	b002      	add	sp, #8
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	ab01      	add	r3, sp, #4
 800820e:	466a      	mov	r2, sp
 8008210:	f7ff ffc8 	bl	80081a4 <__swhatbuf_r>
 8008214:	9900      	ldr	r1, [sp, #0]
 8008216:	4605      	mov	r5, r0
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff f963 	bl	80074e4 <_malloc_r>
 800821e:	b948      	cbnz	r0, 8008234 <__smakebuf_r+0x44>
 8008220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008224:	059a      	lsls	r2, r3, #22
 8008226:	d4ef      	bmi.n	8008208 <__smakebuf_r+0x18>
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	f043 0302 	orr.w	r3, r3, #2
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	e7e3      	b.n	80081fc <__smakebuf_r+0xc>
 8008234:	4b0d      	ldr	r3, [pc, #52]	; (800826c <__smakebuf_r+0x7c>)
 8008236:	62b3      	str	r3, [r6, #40]	; 0x28
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	9b00      	ldr	r3, [sp, #0]
 8008244:	6163      	str	r3, [r4, #20]
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	6120      	str	r0, [r4, #16]
 800824a:	b15b      	cbz	r3, 8008264 <__smakebuf_r+0x74>
 800824c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008250:	4630      	mov	r0, r6
 8008252:	f000 f8d1 	bl	80083f8 <_isatty_r>
 8008256:	b128      	cbz	r0, 8008264 <__smakebuf_r+0x74>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	89a0      	ldrh	r0, [r4, #12]
 8008266:	4305      	orrs	r5, r0
 8008268:	81a5      	strh	r5, [r4, #12]
 800826a:	e7cd      	b.n	8008208 <__smakebuf_r+0x18>
 800826c:	08007ffd 	.word	0x08007ffd

08008270 <_malloc_usable_size_r>:
 8008270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008274:	1f18      	subs	r0, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbc      	itt	lt
 800827a:	580b      	ldrlt	r3, [r1, r0]
 800827c:	18c0      	addlt	r0, r0, r3
 800827e:	4770      	bx	lr

08008280 <_raise_r>:
 8008280:	291f      	cmp	r1, #31
 8008282:	b538      	push	{r3, r4, r5, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	d904      	bls.n	8008294 <_raise_r+0x14>
 800828a:	2316      	movs	r3, #22
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008296:	b112      	cbz	r2, 800829e <_raise_r+0x1e>
 8008298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800829c:	b94b      	cbnz	r3, 80082b2 <_raise_r+0x32>
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f830 	bl	8008304 <_getpid_r>
 80082a4:	462a      	mov	r2, r5
 80082a6:	4601      	mov	r1, r0
 80082a8:	4620      	mov	r0, r4
 80082aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ae:	f000 b817 	b.w	80082e0 <_kill_r>
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d00a      	beq.n	80082cc <_raise_r+0x4c>
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	d103      	bne.n	80082c2 <_raise_r+0x42>
 80082ba:	2316      	movs	r3, #22
 80082bc:	6003      	str	r3, [r0, #0]
 80082be:	2001      	movs	r0, #1
 80082c0:	e7e7      	b.n	8008292 <_raise_r+0x12>
 80082c2:	2400      	movs	r4, #0
 80082c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c8:	4628      	mov	r0, r5
 80082ca:	4798      	blx	r3
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7e0      	b.n	8008292 <_raise_r+0x12>

080082d0 <raise>:
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <raise+0xc>)
 80082d2:	4601      	mov	r1, r0
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	f7ff bfd3 	b.w	8008280 <_raise_r>
 80082da:	bf00      	nop
 80082dc:	20000038 	.word	0x20000038

080082e0 <_kill_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_kill_r+0x20>)
 80082e4:	2300      	movs	r3, #0
 80082e6:	4604      	mov	r4, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f7f9 ff0d 	bl	800210c <_kill>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d102      	bne.n	80082fc <_kill_r+0x1c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b103      	cbz	r3, 80082fc <_kill_r+0x1c>
 80082fa:	6023      	str	r3, [r4, #0]
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	20000384 	.word	0x20000384

08008304 <_getpid_r>:
 8008304:	f7f9 befa 	b.w	80020fc <_getpid>

08008308 <__sread>:
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	f000 f894 	bl	800843c <_read_r>
 8008314:	2800      	cmp	r0, #0
 8008316:	bfab      	itete	ge
 8008318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800831a:	89a3      	ldrhlt	r3, [r4, #12]
 800831c:	181b      	addge	r3, r3, r0
 800831e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008322:	bfac      	ite	ge
 8008324:	6563      	strge	r3, [r4, #84]	; 0x54
 8008326:	81a3      	strhlt	r3, [r4, #12]
 8008328:	bd10      	pop	{r4, pc}

0800832a <__swrite>:
 800832a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	461f      	mov	r7, r3
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	05db      	lsls	r3, r3, #23
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
 800833a:	d505      	bpl.n	8008348 <__swrite+0x1e>
 800833c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008340:	2302      	movs	r3, #2
 8008342:	2200      	movs	r2, #0
 8008344:	f000 f868 	bl	8008418 <_lseek_r>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835e:	f000 b817 	b.w	8008390 <_write_r>

08008362 <__sseek>:
 8008362:	b510      	push	{r4, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836a:	f000 f855 	bl	8008418 <_lseek_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	bf15      	itete	ne
 8008374:	6560      	strne	r0, [r4, #84]	; 0x54
 8008376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800837a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800837e:	81a3      	strheq	r3, [r4, #12]
 8008380:	bf18      	it	ne
 8008382:	81a3      	strhne	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__sclose>:
 8008386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838a:	f000 b813 	b.w	80083b4 <_close_r>
	...

08008390 <_write_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_write_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7f9 feeb 	bl	800217a <_write>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_write_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_write_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	20000384 	.word	0x20000384

080083b4 <_close_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_close_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	f7f9 fef7 	bl	80021b2 <_close>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_close_r+0x1a>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_close_r+0x1a>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20000384 	.word	0x20000384

080083d4 <_fstat_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	; (80083f4 <_fstat_r+0x20>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	f7f9 fef2 	bl	80021ca <_fstat>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d102      	bne.n	80083f0 <_fstat_r+0x1c>
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	b103      	cbz	r3, 80083f0 <_fstat_r+0x1c>
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	bf00      	nop
 80083f4:	20000384 	.word	0x20000384

080083f8 <_isatty_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	; (8008414 <_isatty_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f9 fef1 	bl	80021ea <_isatty>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_isatty_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_isatty_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000384 	.word	0x20000384

08008418 <_lseek_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_lseek_r+0x20>)
 800841c:	4604      	mov	r4, r0
 800841e:	4608      	mov	r0, r1
 8008420:	4611      	mov	r1, r2
 8008422:	2200      	movs	r2, #0
 8008424:	602a      	str	r2, [r5, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	f7f9 feea 	bl	8002200 <_lseek>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_lseek_r+0x1e>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_lseek_r+0x1e>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000384 	.word	0x20000384

0800843c <_read_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	; (800845c <_read_r+0x20>)
 8008440:	4604      	mov	r4, r0
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f9 fe78 	bl	8002140 <_read>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_read_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_read_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	20000384 	.word	0x20000384

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
